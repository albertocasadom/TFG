SEEDLabsŒPseudoRandomNumberGenerationLab 1 PseudoRandomNumberGenerationLab Copyright©2018WenliangDu SyracuseUniversity ThedevelopmentofthisdocumentwaspartiallyfundedbytheNationalScienceFoundationunderAward No.1303306and1718086.ThisworkislicensedunderaCreativeCommonsAttribution-NonCommercial- ShareAlike4.0InternationalLicense.Ahuman-readablesummaryof andnotasubstitutefor thelicenseis thefollowing Youarefreetocopyandredistributethematerialinanymediumorformat.Youmustgive appropriatecredit.Ifyouremix transform orbuilduponthematerial youmustdistributeyourcontributions underthesamelicenseastheoriginal.Youmaynotusethematerialforcommercialpurposes 1Overview Generatingrandomnumbersisaquitecommontaskinsecuritysoftware.Inmanycases encryptionkeys arenotprovidedbyusers butareinsteadgeneratedinsidethesoftware.Theirrandomnessisextremely important otherwise attackerscanpredicttheencryptionkey andthusdefeatthepurposeofencryption Manydevelopersknowhowtogeneraterandomnumbers e.g.forMonteCarlosimulation fromtheir priorexperiences sotheyusethesimilarmethodstogeneratetherandomnumbersforsecuritypurpose Unfortunately asequenceofrandomnumbersmaybegoodforMonteCarlosimulation buttheymaybe badforencryptionkeys.Developersneedtoknowhowtogeneratesecurerandomnumbers ortheywill makemistakes.Similarmistakeshavebeenmadeinsomewell-knownproducts includingNetscapeand Kerberos Inthislab studentswilllearnwhythetypicalrandomnumbergenerationmethodisnotappropriate forgeneratingsecrets suchasencryptionkeys.Theywillfurtherlearnastandardwaytogeneratepseudo randomnumbersthataregoodforsecuritypurposes.Thislabcoversthefollowingtopics Ł Pseudorandomnumbergeneration Ł Mistakesinrandomnumbergeneration Ł Generatingencryptionkey Ł The /dev/random /dev/urandom device LabEnvironment Thislabhasbeentestedonourpre-builtUbuntu16.04VM whichcanbedownloaded fromtheSEEDwebsite 2LabTasks 2.1Task1 GenerateEncryptionKeyinaWrongWay Togenerategoodpseudorandomnumbers weneedtostartwithsomethingthatisrandom otherwise outcomewillbequitepredictable.Thefollowingprogramusesthecurrenttimeasaseedforthepseudo randomnumbergenerator Listing1 ﬂGeneratinga128-bitencryptionkeyﬂ # include < stdio.h > # include < stdlib.h > # include < time.h > # defineKEYSIZE16 SEEDLabsŒPseudoRandomNumberGenerationLab 2 voidmain { inti charkey KEYSIZE printf `` % lld\n '' longlong time NULL srand time NULL À i=0 < KEYSIZE i++ { key =rand % 256 printf `` % .2x '' unsignedchar key } printf `` \n '' } Thelibraryfunction time returnsthetimeasthenumberofsecondssincetheEpoch 1970-01-01 00:00:00+0000 UTC .Runthecodeabove anddescribeyourobservations.Then commentout Line À runtheprogramagain anddescribeyourobservations.Usetheobservationsinbothcasesto explainthepurposeofthe srand time functionsinthecode 2.2Task2 GuessingtheKey OnApril17,2018 Alicehertaxreturn andshesavedthereturn aPDFonherdisk.Toprotect thesheencryptedthePDFusingakeygeneratedfromtheprogramdescribedinTask1.Shewrote downthekeyinanotebook whichissecurelystoredinasafe.Afewmonthlater Bobbrokeintoher computerandgetsacopyoftheencryptedtaxreturn.SinceAliceisCEOofabigcompany thisisvery valuable Bobcannotgettheencryptionkey butbylookingaroundAlice'scomputer hesawthekey-generation program andsuspectedthatAlice'sencryptionkeymaybegeneratedbytheprogram.Healsonoticedthe timestampoftheencryptedwhichis '' 2018-04-1723:08:49 '' .Heguessedthatthekeymaybe generatedwithinatwo-hourwindowbeforethewascreated SincetheisaPDFwhichhasaheader.Thebeginningpartoftheheaderisalwaystheversion number.Aroundthetimewhenthewascreated PDF-1.5wasthemostcommonversion i.e. theheader startswith % PDF-1.5 whichis8bytesofdata.Thenext8bytesofthedataarequiteeasytopredictas well.Therefore Bobeasilygotthe16bytesoftheplaintext.Basedonthemetadataoftheencrypted heknowsthattheisencryptedusing aes-128-cbc .SinceAESisa128-bitcipher the16-byte plaintextconsistsofoneblockofplaintext soBobknowsablockofplaintextanditsmatchingciphertext Moreover BobalsoknowstheInitialVector IV fromtheencrypted IVisneverencrypted .Hereis whatBobknows Plaintext:255044462d312e350a25d0d4c5d80a34 Ciphertext d06bf9d0dab8e8ef880660d2af65aa82 IV:09080706050403020100A2B2C2D2E2F2 YourjobistohelpBoboutAlice'sencryptionkey soyoucandecrypttheentiredocument.You shouldwriteaprogramtotryallthepossiblekeys.Ifthekeywasgeneratedcorrectly thistaskwillnotbe possible.However sinceAliceused time toseedherrandomnumbergenerator youshouldbeable tooutherkeyeasily.Youcanusethe date commandtoprintoutthenumberofsecondsbetweena timeandtheEpoch 1970-01-0100:00:00+0000 UTC .Seethefollowingexample SEEDLabsŒPseudoRandomNumberGenerationLab 3 $ date-d '' 2018-04-1515:00:00 '' + % 1523818800 2.3Task3 MeasuretheEntropyofKernel Inthevirtualworld itisdiftocreaterandomness i.e. softwarealoneishardtocreaterandomnumbers Mostsystemsresorttothephysicalworldtogaintherandomness Linux gainstherandomnessfromthe followingphysicalresources voidadd_keyboard_randomness unsignedcharscancode voidadd_mouse_randomness __u32mouse_data voidadd_interrupt_randomness intirq voidadd_blkdev_randomness intmajor Thetwoarequitestraightforwardtounderstand theoneusesthetimingbetweenkeypresses thesecondoneusesmousemovementandinterrupttiming thethirdonegathersrandomnumbersusing theinterrupttiming.Ofcourse notallinterruptsaregoodsourcesofrandomness.Forexample thetimer interruptisnotagoodchoice becauseitispredictable.However diskinterruptsareabettermeasure.The lastonemeasuresthetimeofblockdevicerequests Therandomnessismeasuredusing entropy whichisdifferentfromthemeaningofentropyintheinfor- mationtheory.Here itsimplymeanshowmanybitsofrandomnumbersthesystemcurrentlyhas.Youcan outhowmuchentropythekernelhasatthecurrentmomentusingthefollowingcommand $ cat/proc/sys/kernel/random/entropy_avail Letusmonitorthechangeoftheentropybyrunningtheabovecommandvia watch whichexecutes aprogramperiodically showingtheoutputinfullscreen.Thefollowingcommandrunsthe cat program every 0.1 second $ watch-n.1cat/proc/sys/kernel/random/entropy_avail Pleaseruntheabovecommand.Whileitisrunning moveyourmouse clickyourmouse typesome- things readalargevisitawebsite.Whatactivitiesincreasestheentropy.Pleasedescribe yourobservationinyourreport 2.4Task4 GetPseudoRandomNumbersfrom /dev/random Linux storestherandomdatacollectedfromthephysicalresourcesintoarandompool andthenuses twodevicestoturntherandomnessintopseudorandomnumbers.Thesetwodevicesare /dev/random /dev/urandom .Theyhavedifferentbehaviors.The /dev/random deviceisablockingdevice Namely everytimearandomnumberisgivenoutbythisdevice theentropyoftherandomnesspoolwillbe decreased.Whentheentropyreacheszero /dev/random willblock untilitgainsenoughrandomness Letusdesignanexperimenttoobservethebehaviorofthe /dev/random device.Wewillusethe cat commandtokeepreadingpseudorandomnumbersfrom /dev/random .Wepipetheoutputto hexdump forniceprinting $ cat/dev/random|hexdump Pleaseruntheabovecommandandatthesametimeusethe watch commandtomonitortheentropy Whathappensifyoudonotmoveyourmouseortypeanything.Then randomlymoveyourmouseandsee whetheryoucanobserveanydifference.Pleasedescribeandexplainyourobservations SEEDLabsŒPseudoRandomNumberGenerationLab 4 Question Ifaserveruses /dev/random togeneratetherandomsessionkeywithaclient.Please describehowyoucanlaunchaDenial-Of-Service DOS attackonsuchaserver 2.5Task5 GetRandomNumbersfrom /dev/urandom Linux providesanotherwaytoaccesstherandompoolviathe /dev/urandom device exceptthatthis devicewillnotblock.Both /dev/random /dev/urandom usetherandomdatafromthepoolto generatepseudorandomnumbers.Whentheentropyisnotsuf /dev/random willpause /dev/urandom willkeepgeneratingnewnumbers.Thinkofthedatainthepoolastheﬁseedﬂ andaswe know wecanuseaseedtogenerateasmanypseudorandomnumbersaswewant Letusseethebehaviorof /dev/urandom .Weagainuse cat togetpseudorandomnumbersfrom thisdevice.Pleaserunthefollowingcommand andthedescribewhethermovingthemousehasanyeffect ontheoutcome $ cat/dev/urandom|hexdump Letusmeasurethequalityoftherandomnumber.Wecanuseatoolcalled ent whichhasalreadybeen installedinourVM.Accordingtoitsmanual ﬁ ent appliesvariousteststosequencesofbytesstoredin andreportstheresultsofthosetests.Theprogramisusefulforevaluatingpseudo-randomnumbergenerators forencryptionandstatisticalsamplingapplications compressionalgorithms andotherapplicationswhere theinformationdensityofaisofinterestﬂ.Letusgenerate1MBofpseudorandomnumberfrom /dev/urandom andsavetheminaThenwerun ent onthePleasedescribeyouroutcome analyzewhetherthequalityoftherandomnumbersisgoodornot $ head-c1M/dev/urandom > output.bin $ entoutput.bin Theoreticallyspeaking /dev/random deviceismoresecure butinpractice thereisnotmuch difference becausetheﬁseedﬂusedby /dev/urandom israndomandnon-predictable /dev/urandom doesre-seedwhenevernewrandomdatabecomeavailable .Abigproblemoftheblockingbehaviorof /dev/random isthatblockingcanleadtodenialofserviceattacks.Therefore itisrecommendedthatwe use /dev/urandom togetrandomnumbers.Todothatinourprogram wejustneedtoreaddirectlyfrom thisdeviceThefollowingcodesnippetshowshow # defineLEN16//128bits unsignedchar * key= unsignedchar * malloc sizeof unsignedchar * LEN FILE * random=fopen `` /dev/urandom '' '' r '' fread key sizeof unsignedchar * LEN,1 random fclose random Pleasemodifytheabovecodesnippettogeneratea256-bitencryptionkey.Pleasecompileandrunyour code printoutthenumbersandincludethescreenshotinthereport 3Submission Youneedtosubmitadetailedlabreport withscreenshots todescribewhatyouhavedoneandwhatyou haveobserved.Youalsoneedtoprovideexplanationtotheobservationsthatareinterestingorsurprising Pleasealsolisttheimportantcodesnippetsfollowedbyexplanation.Simplyattachingcodewithoutany explanationwillnotreceivecredits 