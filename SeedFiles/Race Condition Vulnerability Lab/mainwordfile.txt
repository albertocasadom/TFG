SEEDLabsŒRaceConditionVulnerabilityLab 1 RaceConditionVulnerabilityLab Copyright©2006-2016WenliangDu SyracuseUniversity ThedevelopmentofthisdocumentwaspartiallyfundedbytheNationalScienceFoundationunderAward No.1303306and1318814.ThisworkislicensedunderaCreativeCommonsAttribution-NonCommercial- ShareAlike4.0InternationalLicense.Ahuman-readablesummaryof andnotasubstitutefor thelicenseis thefollowing Youarefreetocopyandredistributethematerialinanymediumorformat.Youmustgive appropriatecredit.Ifyouremix transform orbuilduponthematerial youmustdistributeyourcontributions underthesamelicenseastheoriginal.Youmaynotusethematerialforcommercialpurposes 1LabOverview Thelearningobjectiveofthislabisforstudentstogaintheexperienceontherace-conditionvul- nerabilitybyputtingwhattheyhavelearnedaboutthevulnerabilityfromclassintoactions.Aracecondition occurswhenmultipleprocessesaccessandmanipulatethesamedataconcurrently andtheoutcomeofthe executiondependsontheparticularorderinwhichtheaccesstakesplace.Ifaprivilegedprogramhasa race-conditionvulnerability attackerscanrunaparallelprocesstoﬁraceﬂagainsttheprivilegedprogram withanintentiontochangethebehaviorsoftheprogram Inthislab studentswillbegivenaprogramwitharace-conditionvulnerability theirtaskistodevelop aschemetoexploitthevulnerabilityandgaintherootprivilege.Inadditiontotheattacks studentswillbe guidedtowalkthroughseveralprotectionschemesthatcanbeusedtocountertherace-conditionattacks Studentsneedtoevaluatewhethertheschemesworkornotandexplainwhy.Thislabcoversthefollowing topics Ł Raceconditionvulnerability Ł Stickysymlinkprotection Ł Principleofleastprivilege Readingsandrelatedtopics DetailedcoverageoftheraceconditionattackcanbefoundinChapter7 oftheSEEDbook ComputerSecurity AHands-onApproach byWenliangDu.Atopicrelatedtothis labistheDirtyCOWattack whichisanotherformofraceconditionvulnerability.Chapter8oftheSEED bookcoverstheDirtyCOWattack andthereisaseparateSEEDlabforthisattack.However theDirty COWattackexploitsakernelvulnerability whichisalreadyedinUbuntu16.04 sothelabcanonlybe conductedinourUbuntu12.04VM Labenvironment Thislabhasbeentestedonourpre-builtUbuntu12.04VMandUbuntu16.04VM bothofwhichcanbedownloadedfromtheSEEDwebsite 2LabTasks 2.1InitialSetup Ubuntu10.10andlatercomewithabuilt-inprotectionagainstraceconditionattacks.Thisschemeworksby restrictingwhocanfollowasymlink.Accordingtothedocumentation ﬁsymlinksinworld-writablesticky directories e.g /tmp cannotbefollowedifthefolloweranddirectoryownerdonotmatchthesymlink owner.ﬂInthislab weneedtodisablethisprotection.Youcanachievethatusingthefollowingcommands SEEDLabsŒRaceConditionVulnerabilityLab 2 //OnUbuntu12.04 usethefollowing $ sudosysctl-wkernel.yama.protected_sticky_symlinks=0 //OnUbuntu16.04 usethefollowing $ sudosysctl-wfs.protected_symlinks=0 2.2AVulnerableProgram Thefollowingprogramisaseeminglyharmlessprogram.Itcontainsarace-conditionvulnerability * vulp.c * # include < stdio.h > # include < unistd.h > intmain { char * fn= '' /tmp/XYZ '' charbuffer 60 FILE * fp * getuserinput * scanf `` % 50s '' buffer ! access fn W_OK { À fp=fopen fn '' a+ '' Á fwrite `` \n '' sizeof char ,1 fp fwrite buffer sizeof char strlen buffer fp fclose fp } elseprintf `` Nopermission\n '' } Theprogramaboveisaroot-owned Set-UID program itappendsastringofuserinputtotheendof atemporary /tmp/XYZ .Sincethecoderunswiththerootprivilege i.e. itseffectiveuseIDiszero canoverwriteanyTopreventitselffromaccidentallyoverwritingotherpeople'stheprogram checkswhethertherealuserIDhastheaccesspermissiontothe /tmp/XYZ thatisthepurposeofthe access callinLine À .IftherealuserIDindeedhastheright theprogramopenstheinLine Á appendtheuserinputtothe Atglancetheprogramdoesnotseemtohaveanyproblem.However thereisaraceconditionvul- nerabilityinthisprogram duetothetimewindowbetweenthecheck access andtheuse fopen thereisapossibilitythattheusedby access isdifferentfromtheusedby fopen even thoughtheyhavethesamename /tmp/XYZ .Ifamaliciousattackercansomehowmake /tmp/XYZ asymboliclinkpointingtoaprotectedsuchas /etc/passwd insidethetimewindow theattacker cancausetheuserinputtobeappendedto /etc/passwd andasaresultgaintherootprivilege.The vulnerablerunswiththerootprivilege soitcanoverwriteany Setupthe Set-UID program Wecompiletheabovecode andturnitsbinaryintoa Set-UID programthatisownedbytheroot.Thefollowingcommandsachievethisgoal $ gccvulp.c-ovulp SEEDLabsŒRaceConditionVulnerabilityLab 3 $ sudochownrootvulp $ sudochmod4755vulp 2.3Task1 ChoosingOurTarget Wewouldliketoexploittheraceconditionvulnerabilityinthevulnerableprogram.Wechoosetotarget thepassword /etc/passwd whichisnotwritablebynormalusers.Byexploitingthevulnerability wewouldliketoaddarecordtothepasswordwithagoalofcreatinganewuseraccountthathasthe rootprivilege.Insidethepasswordeachuserhasanentry whichconsistsofsevenseparatedby colons .Theentryfortherootuserislistedbelow.Fortherootuser thethird theuserIDhas avaluezero.Namely whentherootuserlogsin itsprocess'suserIDissettozero givingtheprocessthe rootprivilege.Basically thepoweroftherootaccountdoesnotcomefromitsname butinsteadfromthe userIDIfwewanttocreateanaccountwiththerootprivilege wejustneedtoputazerointhis root x:0:0 root /root /bin/bash EachentryalsocontainsapasswordwhichisthesecondIntheexampleabove theis setto '' x '' indicatingthatthepasswordisstoredinanothercalled /etc/shadow theshadow Ifwefollowthisexample wehavetousetheraceconditionvulnerabilitytomodifybothpasswordand shadowwhichisnotveryhardtodo.However thereisasimplersolution.Insteadofputting '' x '' inthepasswordwecansimplyputthepasswordthere sotheoperatingsystemwillnotlookforthe passwordfromtheshadow Thepassworddoesnotholdtheactualpassword itholdstheone-wayhashvalueofthepassword Togetsuchavalueforagivenpassword wecanaddanewuserinourownsystemusingthe adduser command andthengettheone-wayhashvalueofourpasswordfromtheshadowOrwecansimplycopy thevaluefromthe seed user'sentry becauseweknowitspasswordis dees .Interestingly thereisamagic valueusedin Ubuntu liveCDforapassword-lessaccount andthemagicvalueis U6aMy0wojraho 6thcharacteriszero notletter O .Ifweputthisvalueinthepasswordofauserentry weonlyneedto hitthereturnkeywhenpromptedforapassword Task Toverifywhetherthemagicpasswordworksornot wemanually asasuperuser addthefollowing entrytotheendofthe /etc/passwd Pleasereportwhetheryoucanlogintothe test accountwithout typingapassword andcheckwhetheryouhavetherootprivilege test U6aMy0wojraho:0:0 test /root /bin/bash Afterthistask pleaseremovethisentryfromthepasswordInthenexttask weneedtoachievethis goalasanormaluser.Clearly wearenotallowedtodothatdirectlytothepasswordbutwecanexploit araceconditioninaprivilegedprogramtoachievethesamegoal 2.4Task2 LaunchingtheRaceConditionAttack Thegoalofthistaskistoexploittheraceconditionvulnerabilityinthevulnerable Set-UID programlisted earlier.Theultimategoalistogaintherootprivilege Themostcriticalstep i.e. making /tmp/XYZ pointtothepasswordofourraceconditionattack mustoccurwithinthewindowbetweencheckanduse namelybetweenthe access andthe fopen callsinthevulnerableprogram.Sincewecannotmodifythevulnerableprogram theonlythingthatwecan doistorunourattackingprograminparalleltoﬁraceﬂagainstthetargetprogram hopingtowintherace condition i.e. changingthelinkwithinthatcriticalwindow.Unfortunately wecannotachievetheperfect SEEDLabsŒRaceConditionVulnerabilityLab 4 timing.Therefore thesuccessofattackisprobabilistic.Theprobabilityofsuccessfulattackmightbequite lowifthewindowaresmall.Youneedtothinkabouthowtoincreasetheprobability.Forexample youcan runthevulnerableprogramformanytimes youonlyneedtoachievesuccessonceamongallthesetrials Sinceyouneedtoruntheattacksandthevulnerableprogramformanytimes youneedtowritea programtoautomatetheattackprocess.Toavoidmanuallytypinganinputtothevulnerableprogram vulp youcanuseinputredirection.Namely yousaveyourinputinaandask vulp togettheinput fromthisusing '' vulp < inputFile '' Knowingwhethertheattackissuccessful Sinceitmaytakeawhilebeforeourattackcansuccessfully modifythepasswordweneedawaytoautomaticallydetectwhethertheattackissuccessfulornot Therearemanywaystodothat aneasywayistomonitorthetimestampoftheThefollowingshell scriptrunsthe '' ls-l '' command whichoutputsseveralpieceofinformationaboutaincludingthe lasttime.Bycomparingtheoutputsofthecommandwiththeonesproducedpreviously wecan tellwhetherthehasbeenornot # ! /bin/bash CHECK_FILE= '' ls-l/etc/passwd '' old= $ $ CHECK_FILE new= $ $ CHECK_FILE `` $ old '' == '' $ new '' Ù Checkif/etc/passwdismodified ./vulp < passwd_input Ù Runthevulnerableprogram new= $ $ CHECK_FILE done echo '' STOP ... Thepasswdfilehasbeenchanged '' 2.5Task3 Countermeasure ApplyingthePrincipleofLeastPrivilege Thefundamentalproblemofthevulnerableprograminthislabistheviolationofthe PrincipleofLeast Privilege .Theprogrammerdoesunderstandthattheuserwhorunstheprogrammightbetoopowerful he/sheintroduced access tolimittheuser'spower.However thisisnottheproperapproach.Abetter approachistoapplythe PrincipleofLeastPrivilege namely ifusersdonotneedcertainprivilege privilegeneedstobedisabled Wecanuse seteuid systemcalltotemporarilydisabletherootprivilege andlaterenableitifneces- sary.Pleaseusethisapproachtothevulnerabilityintheprogram andthenrepeatyourattack.Willyou beabletosucceed ? Pleasereportyourobservationsandprovideexplanation 2.6Task4 Countermeasure Using Ubuntu 'sBuilt-inScheme Ubuntu10.10andlatercomewithabuilt-inprotectionschemeagainstraceconditionattacks.Inthistask youneedtoturntheprotectionbackonusingthefollowingcommands //OnUbuntu12.04 usethefollowingcommand $ sudosysctl-wkernel.yama.protected_sticky_symlinks=1 //OnUbuntu16.04 usethefollowingcommand $ sudosysctl-wfs.protected_symlinks=1 SEEDLabsŒRaceConditionVulnerabilityLab 5 Conductyourattackaftertheprotectionisturnedon.Pleasedescribeyourobservations.Pleasealso explainthefollowings 1 Howdoesthisprotectionschemework ? 2 Whatarethelimitationsofthis scheme ? 3Guidelines DetailedguidelinescanbefoundinChapter7oftheSEEDbook ComputerSecurity AHands-onApproach byWenliangDu.Wesummarizesomeoftheguidelinesinthissection 3.1CreatingSymbolicLinks YoucancallCfunction symlink tocreatesymboliclinksinyourprogram.Since Linux doesnot allowonetocreatealinkifthelinkalreadyexists weneedtodeletetheoldlinkThefollowingCcode snippetshowshowtoremovealinkandthenmake /tmp/XYZ pointto /etc/passwd unlink `` /tmp/XYZ '' symlink `` /etc/passwd '' '' /tmp/XYZ '' Youcanalsouse Linux command '' ln-sf '' tocreatesymboliclinks.Herethe '' f '' optionmeans thatifthelinkexists removetheoldoneTheimplementationofthe '' ln '' commandactuallyuses unlink symlink 3.2AnUndesirableSituation Whiletestingyourattackprogram youmayoutthat /tmp/XYZ iscreatedwithrootbeingitsowner Ifthishappens youhavelosttheﬁraceﬂ i.e. thewassomehowcreatedbythetargetprogram whichhas therootprivilege.Oncethathappens thereisnowayyoucanremovethisThisisbecausethe /tmp folderhasaﬁstickyﬂbiton meaningthatonlytheownerofthecandeletetheeventhoughthefolder isworld-writable Ifthishappens youneedtoadjustyourattackstrategy andtryitagain ofcourse aftermanually removingtheefromtherootaccount .Themainreasonforthistohappenisthattheattackprogram iscontextswitchedoutrightafteritremoves /tmp/XYZ butbeforeitlinksthenametoanother Remember theactiontoremovetheexistingsymboliclinkandcreateanewoneisnotatomic itinvolves twoseparatesystemcalls soifthecontextswitchoccursinthemiddle i.e. rightaftertheremovalof /tmp/XYZ andthetarget Set-UID programgetsachancetorunits fopen fn '' a+ '' statement willcreateanewwithrootbeingtheowner.Thinkaboutastrategythatcanminimizethechancetoget contextswitchedinthemiddleofthataction 3.3Warning Inthepast somestudentsaccidentallyemptiedthe /etc/passwd duringtheattacks westilldonot knowwhathascausedthat .Ifyoulosethepasswordyouwillnotbeabletologinagain.Toavoidthis trouble pleasemakeacopyoftheoriginalpasswordortakeasnapshotoftheVM.Thisway youcan easilyrecoverfromthemishap SEEDLabsŒRaceConditionVulnerabilityLab 6 4Submission Youneedtosubmitadetailedlabreport withscreenshots todescribewhatyouhavedoneandwhatyou haveobserved.Youalsoneedtoprovideexplanationtotheobservationsthatareinterestingorsurprising Pleasealsolisttheimportantcodesnippetsfollowedbyexplanation.Simplyattachingcodewithoutany explanationwillnotreceivecredits 