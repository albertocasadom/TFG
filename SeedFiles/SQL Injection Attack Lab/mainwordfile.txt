SEEDLabsŒSQLInjectionAttackLab 1 SQLInjectionAttackLab Copyright©2006-2016WenliangDu SyracuseUniversity ThedevelopmentofthisdocumentwaspartiallyfundedbytheNationalScienceFoundationunderAward No.1303306and1318814.ThisworkislicensedunderaCreativeCommonsAttribution-NonCommercial- ShareAlike4.0InternationalLicense.Ahuman-readablesummaryof andnotasubstitutefor thelicenseis thefollowing Youarefreetocopyandredistributethematerialinanymediumorformat.Youmustgive appropriatecredit.Ifyouremix transform orbuilduponthematerial youmustdistributeyourcontributions underthesamelicenseastheoriginal.Youmaynotusethematerialforcommercialpurposes 1Overview SQLinjectionisacodeinjectiontechniquethatexploitsthevulnerabilitiesintheinterfacebetweenweb applicationsanddatabaseservers.Thevulnerabilityispresentwhenuser'sinputsarenotcorrectlychecked withinthewebapplicationsbeforebeingsenttotheback-enddatabaseservers Manywebapplicationstakeinputsfromusers andthenusetheseinputstoconstructSQLqueries theycangetinformationfromthedatabase.WebapplicationsalsouseSQLqueriestostoreinformationin thedatabase.Thesearecommonpracticesinthedevelopmentofwebapplications.WhenSQLqueriesare notcarefullyconstructed SQLinjectionvulnerabilitiescanoccur.SQLinjectionisoneofthemostcommon attacksonwebapplications Inthislab wehavecreatedawebapplicationthatisvulnerabletotheSQLinjectionattack.Ourweb applicationincludesthecommonmistakesmadebymanywebdevelopers.Students'goalistowaysto exploittheSQLinjectionvulnerabilities demonstratethedamagethatcanbeachievedbytheattack masterthetechniquesthatcanhelpdefendagainstsuchtypeofattacks.Thislabcoversthefollowingtopics Ł SQLstatement SELECT UPDATE statements Ł SQLinjection Ł Preparedstatement Readings DetailedcoverageofSQLinjectioncanbefoundinChapter11oftheSEEDbook Computer Security AHands-onApproach byWenliangDu LabEnvironment Thislabhasbeentestedonourpre-builtUbuntu16.04VM whichcanbedownloaded fromtheSEEDwebsite 2LabEnvironment Wehavedevelopedawebapplicationforthislab.ThefolderwheretheapplicationisinstalledandtheURL toaccessthiswebapplicationaredescribedinthefollowing URL http //www.SEEDLabSQLInjection.com Folder /var/www/SQLInjection/ TheaboveURLisisonlyaccessiblefrominsideofthevirtualmachine becausewehave /etc/hosts tomapthedomainnameofeachURLtothevirtualmachine'slocalIPaddress 127.0.0.1 .YoumaymapanydomainnametoaparticularIPaddressusing /etc/hosts .For example youcanmap http //www.example.com tothelocalIPaddressbyappendingthefollowing entryto /etc/hosts SEEDLabsŒSQLInjectionAttackLab 2 127.0.0.1www.example.com Ifyourwebserverandbrowserarerunningontwodifferentmachines youneedtomodify /etc/hosts onthebrowser'smachineaccordinglytomapthesedomainnamestothewebserver'sIPaddress notto 127.0.0.1 Apache Inourpre-builtVMimage weusedApacheservertohostallthewebsitesused inthelab.Thename-basedvirtualhostingfeatureinApachecouldbeusedtohostseveralwebsites URLs onthesamemachine.Anamed 000-default.conf inthedirectory '' /etc/ apache2/sites-available '' containsthenecessarydirectivesforthe Insidetheeachwebsitehasa VirtualHost blockthattheURLforthe websiteanddirectoryinthesystemthatcontainsthesourcesforthewebsite.Thefollowingexamples showhowtoawebsitewithURL http //www.example1.com andanotherwebsitewith URL http //www.example2.com < VirtualHost * > ServerNamehttp //www.example1.com DocumentRoot/var/www/Example_1/ < /VirtualHost > < VirtualHost * > ServerNamehttp //www.example2.com DocumentRoot/var/www/Example_2/ < /VirtualHost > Youmaymodifythewebapplicationbyaccessingthesourceinthementioneddirectories.Forexam- ple withtheabovethewebapplication http //www.example1.com canbechangedby modifyingthesourcesinthe /var/www/Example_1/ directory.Afterachangeismadetothe ration theApacheserverneedstoberestarted.Seethefollowingcommand $ sudoserviceapache2start 3LabTasks Wehavecreatedawebapplication andhostitat www.SEEDLabSQLInjection.com .Thiswebap- plicationisasimpleemployeemanagementapplication.Employeescanviewandupdatetheirpersonal informationinthedatabasethroughthiswebapplication.Therearemainlytworolesinthiswebapplica- tion Administrator isaprivilegeroleandcanmanageeachindividualemployees'information Employee isanormalroleandcanvieworupdatehis/herowninformation.Allemployeeinfor- mationisdescribedinthefollowingtable Name EmployeeID Password Salary Birthday SSN Nickname Email Address Phone # Admin 99999 seedadmin 400000 3/5 43254314 Alice 10000 seedalice 20000 9/20 10211002 Boby 20000 seedboby 50000 4/20 10213352 Ryan 30000 seedryan 90000 4/10 32193525 Samy 40000 seedsamy 40000 1/11 32111111 Ted 50000 seedted 110000 11/3 24343244 SEEDLabsŒSQLInjectionAttackLab 3 3.1Task1 GetFamiliarwithSQLStatements TheobjectiveofthistaskistogetfamiliarwithSQLcommandsbyplayingwiththeprovideddatabase.We havecreatedadatabasecalled Users whichcontainsatablecalled credential thetablestoresthe personalinformation e.g.eid password salary ssn etc ofeveryemployee.Inthistask youneedtoplay withthedatabasetogetfamiliarwithSQLqueries MySQLisanopen-sourcerelationaldatabasemanagementsystem.WehavealreadysetupMySQLin ourSEEDUbuntuVMimage.Theusernameis root andpasswordis seedubuntu .Pleaseloginto MySQLconsoleusingthefollowingcommand $ mysql-uroot-pseedubuntu Afterlogin youcancreatenewdatabaseorloadanexistingone.Aswehavealreadycreatedthe Users databaseforyou youjustneedtoloadthisexistingdatabaseusingthefollowingcommand mysql > useUsers Toshowwhattablesarethereinthe Users database youcanusethefollowingcommandtoprintout allthetablesoftheselecteddatabase mysql > showtables Afterrunningthecommandsabove youneedtouseaSQLcommandtoprintalltheinformation oftheemployee Alice .Pleaseprovidethescreenshotofyourresults 3.2Task2 SQLInjectionAttackonSELECTStatement SQLinjectionisbasicallyatechniquethroughwhichattackerscanexecutetheirownmaliciousSQLstate- mentsgenerallyreferredasmaliciouspayload.ThroughthemaliciousSQLstatements attackerscansteal informationfromthevictimdatabase evenworse theymaybeabletomakechangestothedatabase.Our employeemanagementwebapplicationhasSQLinjectionvulnerabilities whichmimicthemistakesfre- quentlymadebydevelopers Wewillusetheloginpagefrom www.SEEDLabSQLInjection.com forthistask.Theloginpage isshowninFigure1.Itasksuserstoprovideausernameandapassword.Thewebapplicationauthenticate usersbasedonthesetwopiecesofdata soonlyemployeeswhoknowtheirpasswordsareallowedtologin Yourjob asanattacker istologintothewebapplicationwithoutknowinganyemployee'scredential Tohelpyoustartedwiththistask weexplainhowauthenticationisimplementedinthewebapplication ThePHPcode unsafe home.php locatedinthe /var/www/SQLInjection directory isusedto conductuserauthentication.Thefollowingcodesnippetshowhowusersareauthenticated $ input_uname= $ _GET 'username ' $ input_pwd= $ _GET 'Password ' $ hashed_pwd=sha1 $ input_pwd ... $ sql= '' SELECTid name eid salary birth ssn address email nickname Password FROMcredential WHEREname= ' $ input_uname'andPassword= ' $ hashed_pwd ' '' $ result= $ conn- > query $ sql //ThefollowingisPseudoCode id ! =NULL { SEEDLabsŒSQLInjectionAttackLab 4 Figure1 TheLoginpage name=='admin ' { returnAllemployeesinformation } elseif name ! =NULL { returnemployeeinformation } } else { AuthenticationFails } TheaboveSQLstatementselectspersonalemployeeinformationsuchasid name salary ssnetcfrom credential table.TheSQLstatementusestwovariables input uname hashed pwd input uname holdsthestringtypedbyusersintheusernameoftheloginpage hashed pwd holdsthe sha1 hashofthepasswordtypedbytheuser.Theprogramcheckswhetheranyrecordmatches withtheprovidedusernameandpassword ifthereisamatch theuserissuccessfullyauthenticated andis giventhecorrespondingemployeeinformation.Ifthereisnomatch theauthenticationfails Ł Task2.1 SQLInjectionAttackfromwebpage .Yourtaskistologintothewebapplicationasthe administratorfromtheloginpage soyoucanseetheinformationofalltheemployees.Weassume thatyoudoknowtheadministrator'saccountnamewhichis admin butyoudonotthepassword Youneedtodecidewhattotypeinthe Username Password tosucceedintheattack Ł Task2.2 SQLInjectionAttackfromcommandline .YourtaskistorepeatTask2.1 butyou needtodoitwithoutusingthewebpage.Youcanusecommandlinetools suchas curl cansendHTTPrequests.Onethingthatisworthmentioningisthatifyouwanttoincludemultiple parametersinHTTPrequests youneedtoputtheURLandtheparametersbetweenapairofsingle quotes otherwise thespecialcharactersusedtoseparateparameters suchas & willbeinterpretedby theshellprogram changingthemeaningofthecommand.Thefollowingexampleshowshowtosend anHTTPGETrequesttoourwebapplication withtwoparameters username Password attached $ curl SEEDLabsŒSQLInjectionAttackLab 5 'www.SeedLabSQLInjection.com/index.php ? username=alice & Password=111' Ifyouneedtoincludespecialcharactersinthe username Password youneedtoencode themproperly ortheycanchangethemeaningofyourrequests.Ifyouwanttoincludesinglequote inthoseyoushoulduse % 27 instead ifyouwanttoincludewhitespace youshoulduse % 20 Inthistask youdoneedtohandleHTTPencodingwhilesendingrequestsusing curl Ł Task2.3 AppendanewSQLstatement .Intheabovetwoattacks wecanonlystealinformation fromthedatabase itwillbebetterifwecanmodifythedatabaseusingthesamevulnerabilityinthe loginpage.AnideaistousetheSQLinjectionattacktoturnoneSQLstatementintotwo withthe secondonebeingtheupdateordeletestatement.InSQL semicolon isusedtoseparatetwoSQL statements.PleasedescribehowyoucanusetheloginpagetogettheserverruntwoSQLstatements Trytheattacktodeletearecordfromthedatabase anddescribeyourobservation 3.3Task3 SQLInjectionAttackonUPDATEStatement IfaSQLinjectionvulnerabilityhappenstoanUPDATEstatement thedamagewillbemoresevere attackerscanusethevulnerabilitytomodifydatabases.InourEmployeeManagementapplication isanEditpage Figure ? ? thatallowsemployeestoupdatetheirinformation including nickname email address phonenumber andpassword.Togotothispage employeesneedtologin WhenemployeesupdatetheirinformationthroughtheEditpage thefollowingSQLUPDATE querywillbeexecuted.ThePHPcodeimplementedin unsafe edit backend.php isusedtoup- dateemployee'sinformation.ThePHPislocatedinthe /var/www/SQLInjection directory $ hashed_pwd=sha1 $ input_pwd $ sql= '' UPDATEcredentialSET nickname= ' $ input_nickname ' email= ' $ input_email ' address= ' $ input_address ' Password= ' $ hashed_pwd ' PhoneNumber= ' $ input_phonenumber' WHEREID= $ id '' $ conn- > query $ sql Ł Task3.1 Modifyyourownsalary .AsshownintheEditepage employeescanonlyupdate theirnicknames emails addresses phonenumbers andpasswords theyarenotauthorizedtochange theirsalaries.Assumethatyou Alice areadisgruntledemployee andyourbossBobydidnot increaseyoursalarythisyear.YouwanttoincreaseyourownsalarybyexploitingtheSQLinjection vulnerabilityinthepage.Pleasedemonstratehowyoucanachievethat.Weassumethat youdoknowthatsalariesarestoredinacolumncalled salary Ł Task3.2 Modifyotherpeople'salary .Afterincreasingyourownsalary youdecidetopunishyour bossBoby.Youwanttoreducehissalaryto1dollar.Pleasedemonstratehowyoucanachievethat Ł Task3.3 Modifyotherpeople'password .AfterchangingBoby'ssalary youarestilldisgruntled soyouwanttochangeBoby'spasswordtosomethingthatyouknow andthenyoucanlogintohis accountanddofurtherdamage.Pleasedemonstratehowyoucanachievethat.Youneedtodemon- stratethatyoucansuccessfullylogintoBoby'saccountusingthenewpassword.Onethingworth SEEDLabsŒSQLInjectionAttackLab 6 Figure2 Thepage mentioninghereisthatthedatabasestoresthehashvalueofpasswordsinsteadoftheplaintextpass- wordstring.Youcanagainlookatthe unsafe edit backend.php codetoseehowpasswordis beingstored.ItusesSHA1hashfunctiontogeneratethehashvalueofpassword Tomakesureyourinjectionstringdoesnotcontainanysyntaxerror youcantestyourinjectionstring onMySQLconsolebeforelaunchingtherealattackonourwebapplication 3.4Task4 CountermeasureŠPreparedStatement ThefundamentalproblemoftheSQLinjectionvulnerabilityisthefailuretoseparatecodefromdata.When constructingaSQLstatement theprogram e.g.PHPprogram knowswhichpartisdataandwhichpart iscode.Unfortunately whentheSQLstatementissenttothedatabase theboundaryhasdisappeared boundariesthattheSQLinterpreterseesmaybedifferentfromtheoriginalboundariesthatwassetbythe developers.Tosolvethisproblem itisimportanttoensurethattheviewoftheboundariesareconsistentin theserver-sidecodeandinthedatabase.Themostsecurewayistouse preparedstatement TounderstandhowpreparedstatementpreventsSQLinjection weneedtounderstandwhathappens whenSQLserverreceivesaquery.Thehigh-levelwwofhowqueriesareexecutedisshownin Figure3.Inthecompilationstep queriesgothroughtheparsingandnormalizationphase whereaquery ischeckedagainstthesyntaxandsemantics.Thenextphaseisthecompilationphasewherekeywords e.g SELECT FROM UPDATE etc areconvertedintoaformatunderstandabletomachines.Basically inthis phase queryisinterpreted.Inthequeryoptimizationphase thenumberofdifferentplansareconsideredto executethequery outofwhichthebestoptimizedplanischosen.Thechosenplanisstoreinthecache wheneverthenextquerycomesin itwillbecheckedagainstthecontentinthecache ifit'salreadypresent inthecache theparsing compilationandqueryoptimizationphaseswillbeskipped.Thecompiledquery isthenpassedtotheexecutionphasewhereitisactuallyexecuted Preparedstatementcomesintothepictureafterthecompilationbutbeforetheexecutionstep.Apre- paredstatementwillgothroughthecompilationstep andbeturnedintoapre-compiledquerywithempty placeholdersfordata.Torunthispre-compiledquery dataneedtobeprovided butthesedatawillnotgo SEEDLabsŒSQLInjectionAttackLab 7 Figure3 PreparedStatementWw throughthecompilationstep instead theyarepluggeddirectlyintothepre-compiledquery andaresent totheexecutionengine.Therefore evenifthereisSQLcodeinsidethedata withoutgoingthroughthe compilationstep thecodewillbesimplytreatedaspartofdata withoutanyspecialmeaning.Thisishow preparedstatementpreventsSQLinjectionattacks HereisanexampleofhowtowriteapreparedstatementinPHP.WeuseaSELECTstatmentinthe followingexample.WeshowhowtousepreparedstatementtorewritethecodethatisvulnerabletoSQL injectionattacks $ sql= '' SELECTname local gender FROMUSER_TABLE WHEREid= $ idANDpassword= ' $ pwd ' '' $ result= $ conn- > query $ sql TheabovecodeisvulnerabletoSQLinjectionattacks.Itcanberewrittentothefollowing $ stmt= $ conn- > prepare `` SELECTname local gender FROMUSER_TABLE WHEREid= ? andpassword= ? `` //Bindparameterstothequery $ stmt- > bind_param `` '' $ id $ pwd $ stmt- > execute $ stmt- > bind_result $ bind_name $ bind_local $ bind_gender $ stmt- > fetch Usingthepreparedstatementmechanism wedividetheprocessofsendingaSQLstatementtothe databaseintotwosteps.Thestepistoonlysendthecodepart i.e. aSQLstatementwithouttheactual thedata.Thisisthepreparestep.Aswecanseefromtheabovecodesnippet theactualdataarereplaced byquestionmarks ? .Afterthisstep wethensendthedatatothedatabaseusing bind param .The databasewilltreateverythingsentinthissteponlyasdata notascodeanymore.Itbindsthedatatothe correspondingquestionmarksofthepreparedstatement.Inthe bind param method theargument SEEDLabsŒSQLInjectionAttackLab 8 '' '' indicatesthetypesoftheparameters '' '' meansthatthedatain $ id hastheintegertype '' '' meansthatthedatain $ pwd hasthestringtype Forthistask pleaseusethepreparedstatementmechanismtotheSQLinjectionvulnerabilities exploitedbyyouintheprevioustasks.Then checkwhetheryoucanstillexploitthevulnerabilityornot 4Guidelines TestSQLInjectionString Inreal-worldapplications itmaybehardtocheckwhetheryourSQLinjec- tionattackcontainsanysyntaxerror becauseusuallyserversdonotreturnthiskindoferrormessages.To conductyourinvestigation youcancopytheSQLstatementfromphpsourcecodetotheMySQLconsole AssumeyouhavethefollowingSQLstatement andtheinjectionstringis 'or1=1 # SELECT * fromcredential WHEREname= ' $ name'andpassword= ' $ pwd ' Youcanreplacethevalueof $ name withtheinjectionstringandtestitusingtheMySQLconsole.This approachcanhelpyoutoconstructasyntax-errorfreeinjectionstringbeforelaunchingtherealinjection attack 5Submission Youneedtosubmitadetailedlabreporttodescribewhatyouhavedoneandwhatyouhaveobserved Pleaseprovidedetailsusingscreenshotsandcodesnippets.Youalsoneedtoprovideexplanationtothe observationsthatareinterestingorsurprising 