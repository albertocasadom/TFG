This man page converted HTML bsdi-man cgi BSDI -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - -- -- -- -- -- -- -- -- -- -- -- -- -- -- - SETUID 7 SETUID 7 NAME setuid - checklist security setuid pr ograms DESCRIPTION Writing secure setuid setgid prog ram tricky There number possible ways subve rting program The conspicuous security hole occur setuid program sufficiently careful avoid giving away access resources legitimately h use Most attacks basically tter alter- ing program 's environment unexpected ways hop- ing fail security-breaching manner There generally three categories environ ment manipula- tion supplying legal unexpected env ironment may cause program directly somet hing insecure arranging error conditions pro gram may handle correctly specialized subca tegory giv- ing program inadequate resources h opes wo n't respond properly The following general considerations security writing setuid program The program run weakest userid possi- ble preferably one used itsel f. A security hole setuid program running highly-privi- leged userid compromise entire system Secu- rity-critical programs like passwd 1 hould always private userids minimize possib le damage penetrations elsewhere The result getlogin ttyname may wrong descriptors meddled The fool- proof way determine controlling te rminal login name opposed uid V7 On systems setuid bit may honored program run root program may find running root Programs attempt use creat lo cking foul run root use link p referred implementing locking Using chmod locking obvious disaster Breaking existing lock dangero us break- locking protocol may symp tomatic far worse problems Doing basis lock ` old ' sometimes necessary bu programs run surprising lengths time heavily-loaded systems Care must taken user reques ts i/o checked permissions using user's permissions local 1 SETUID 7 SETUID 7 program 's Use access reco mmended Programs executed user request e.g shell escapes must receive setuid program 's per missions use daughter processes setuid getui plus set- gid getgid fork exec vital Similarly programs executed user requ est must receive sensitive resources notably file descriptors Use closeall 3 cl ose-on-exec arrangements systems hem recom- mended Programs activated one user handli ng traffic behalf others e.g daemons shou ld avoid setuid getuid setgid getgid sin ce origi- nal invoker 's identity almost certain ly inappropri- ate On systems permit use setuid geteuid setgid getegid recommended performing work behalf sys tem opposed specific user There inherent permission problems setuid program executes another setuid program since per- missions additive Care taken created files owned wrong person Use setuid geteuid gid counter part help system allows Care taken newly-created files wrong permission ownership even momentar- ily Permissions arranged u sing umask advance rather creating file wide-open using chmod Ownership get stic ky due limitations setuid concept al though using daughter process connected pipe help Setuid programs especially careful error checking normal respons e strange situation termination rather han attempt carry The following ways program may induced carelessly give away speci al privileges The directory program started directories may plausibly chdir may contain programs names system programs p laced hopes program activate shell permissive PATH setting PATH lways stan- dardized invoking shell either directly via popen execvp/execlp Similarly bizarre IFS setting ay alter local 2 SETUID 7 SETUID 7 interpretation shell command r eally strange ways possibly causing user-supplied program invoked IFS always standa rdized invoking shell Our shell utomatically Environment variables general trusted Their contents never taken granted Setuid shell files systems mplement simply cope adequately f prob- lems They also nasty proble ms like trying run .profile run suitab le name They terminally insecure must avoi ded Relying contents files placed publically- writeable directories /tmp nearly-incur- able security problem Setuid program avoid using /tmp entirely humanly possible The sticky- directories modification sticky bit f directory means owner file remove feature helps complete sol ution A related problem spool direct ories holding information program trust later must never publically writeable even th e files directory protected Among sin ister manipu- lations performed note many Unixes core dump setuid progr owned program 's owner user r unning The following unusual possible er ror conditions program cope proper ly resource- exhaustion questions considered eparately see The value argc might 0 The setting umask might sen sible In case standardized crea ting files intended owned user One standard descript ors might closed opened file might get say descrip- tor 1 causing chaos program tr ies printf The current directory p arents may unreadable unsearchable On many ystems pwd 1 run setuid-root f ail conditions Descriptors shared processes i. e. open startup may manipulated n strange ways said processes local 3 SETUID 7 SETUID 7 The standard descriptors may refer erminal bizarre mode setting ca nnot opened gives end-of-file read attempt read written succes sfully The process may hit interrupt qu hangup broken-pipe signals singly fast su ccession The user may deliberately exploit ra ce conditions inherent catching signals ignoring si gnals safe catching Although non-keyboard signals sent ordi- nary users V7 may perhaps sen sys- tem authorities e.g indicate system shut possibili ty ignored On systems may n alarm signal pending startup The program may children create This normal process part p ipeline In non-V7 systems users change ownerships files Setuid programs void trusting owner identification file User-supplied arguments input data ust checked meticulously Overly-long input stored array without proper bound checking easil breach secu- rity When software depends file ing spe- cific format user-supplied data sho uld never inserted file without c hecked first Meticulous checking includes allowing possibil- ity non-ASCII characters Temporary files left public directori es like /tmp might vanish inconvenient times The following resource-exhaustion possibilities program respond properly The user might used allowed pro- cesses attempt create new e via fork popen fail There might many files open exhaustin g supply descriptors Running closeall 3 systems recommended There might many arguments The arguments environment togethe r might occupy great deal space local 4 SETUID 7 SETUID 7 Systems impose resource l imitations open setuid programs similar resou rce-exhaustion attacks Setuid programs execute ordinary pr ograms without reducing authority pass pr oblems unprepared children Standardizing execution environment partial solution SEE ALSO closeall 3 standard 3 HISTORY Locally written although based outside contributions BUGS The list really rather long ... p robably incom- plete Neither author Universit Toronto accepts responsibility whatever use non- use information local 5 SEEDLabsŒEnvironmentVariableand Set-UID ProgramLab 1 EnvironmentVariableand Set-UID ProgramLab Copyright©2006-2016WenliangDu SyracuseUniversity ThedevelopmentofthisdocumentwaspartiallyfundedbytheNationalScienceFoundationunderAward No.1303306and1318814.ThisworkislicensedunderaCreativeCommonsAttribution-NonCommercial- ShareAlike4.0InternationalLicense.Ahuman-readablesummaryof andnotasubstitutefor thelicenseis thefollowing Youarefreetocopyandredistributethematerialinanymediumorformat.Youmustgive appropriatecredit.Ifyouremix transform orbuilduponthematerial youmustdistributeyourcontributions underthesamelicenseastheoriginal.Youmaynotusethematerialforcommercialpurposes 1Overview Thelearningobjectiveofthislabisforstudentstounderstandhowenvironmentvariablesaffectprogram andsystembehaviors.Environmentvariablesareasetofdynamicnamedvaluesthatcanaffecttheway runningprocesseswillbehaveonacomputer.Theyareusedbymostoperatingsystems sincetheywere introducedtoUnixin1979.Althoughenvironmentvariablesaffectprogrambehaviors howtheyachieve thatisnotwellunderstoodbymanyprogrammers.Asaresult ifaprogramusesenvironmentvariables buttheprogrammerdoesnotknowthattheyareused theprogrammayhavevulnerabilities.Inthislab studentswillunderstandhowenvironmentvariableswork howtheyarepropagatedfromparentprocessto child andhowtheyaffectsystem/programbehaviors.Weareparticularlyinterestedinhowenvironment variablesaffectthebehaviorof Set-UID programs whichareusuallyprivilegedprograms Thislabcoversthefollowingtopics.DetailedcoverageofthesetopicscanbefoundinChapters1and2 oftheSEEDbook ComputerSecurity AHands-onApproach byWenliangDu Ł Environmentvariables Ł Set-UID programs Ł Securelyinvokeexternalprograms Ł Capabilityleaking Ł Dynamicloader/linker Readingsandrelatedtopics Detailedcoverageofthe Set-UID mechanismanditssecurityproblems canbefoundinChapter1oftheSEEDbook ComputerSecurity AHands-onApproach byWenliangDu EnvironmentvariablesandtheirrelatedattacksarecoveredinChapter2ofthebook.Atopicrelatedto environmentvariablesistheShellshockattack whichwasdiscoveredin2014.Thisrelativelynewattackis coveredinChapter3 aswellasinaseparateSEEDlab Labenvironment Thislabhasbeentestedonourpre-builtUbuntu12.04VMandUbuntu16.04VM bothofwhichcanbedownloadedfromtheSEEDwebsite 2LabTasks 2.1Task1 ManipulatingEnvironmentVariables Inthistask westudythecommandsthatcanbeusedtosetandunsetenvironmentvariables.Weareusing Bashintheseedaccount.Thedefaultshellthatauserusesissetinthe /etc/passwd thelast ofeachentry .Youcanchangethistoanothershellprogramusingthecommand chsh pleasedonotdoit forthislab .Pleasedothefollowingtasks SEEDLabsŒEnvironmentVariableand Set-UID ProgramLab 2 Ł Use printenv env commandtoprintouttheenvironmentvariables.Ifyouareinterestedin someparticularenvironmentvariables suchas PWD youcanuse '' printenvPWD '' '' env| grepPWD '' Ł Use export unset tosetorunsetenvironmentvariables.Itshouldbenotedthatthesetwo commandsarenotseperateprograms theyaretwooftheBash'sinternalcommands youwillnotbe abletothemoutsideofBash 2.2Task2 PassingEnvironmentVariablesfromParentProcesstoChildProcess Inthistask westudyhowachildprocessgetsitsenvironmentvariablesfromitsparent.InUnix fork createsanewprocessbyduplicatingthecallingprocess.Thenewprocess referredtoasthechild isan exactduplicateofthecallingprocess referredtoastheparent however severalthingsarenotinheritedby thechild pleaseseethemanualof fork bytypingthefollowingcommand manfork .Inthistask wewouldliketoknowwhethertheparent'senvironmentvariablesareinheritedbythechildprocessornot Step1 Pleasecompileandrunthefollowingprogram anddescribeyourobservation.Becausetheoutput containsmanystrings youshouldsavetheoutputintoasuchasusing a.out > child assuming a.out isyourexecutablename # include < unistd.h > # include < stdio.h > # include < stdlib.h > externchar ** environ voidprintenv { inti=0 environ ! =NULL { printf `` % s\n '' environ i++ } } voidmain { pid_tchildPid switch childPid=fork { case0 * childprocess * printenv À exit 0 default * parentprocess * //printenv Á exit 0 } } Step2 Nowcommentoutthe printenv statementinthechildprocesscase Line À anduncomment printenv statementintheparentprocesscase Line Á .Compileandrunthecodeagain SEEDLabsŒEnvironmentVariableand Set-UID ProgramLab 3 describeyourobservation.Savetheoutputinanother Step3 Comparethedifferenceofthesetwousingthe diff command.Pleasedrawyourconclusion 2.3Task3 EnvironmentVariablesand execve Inthistask westudyhowenvironmentvariablesareaffectedwhenanewprogramisexecutedvia execve Thefunction execve callsasystemcalltoloadanewcommandandexecuteit thisfunctionneverre- turns.Nonewprocessiscreated instead thecallingprocess'stext data bss andstackareoverwrittenby thatoftheprogramloaded.Essentially execve runsthenewprograminsidethecallingprocess.We areinterestedinwhathappenstotheenvironmentvariables aretheyautomaticallyinheritedbythenew program ? Step1 Pleasecompileandrunthefollowingprogram anddescribeyourobservation.Thisprogram simplyexecutesaprogramcalled /usr/bin/env whichprintsouttheenvironmentvariablesofthe currentprocess # include < stdio.h > # include < stdlib.h > externchar ** environ intmain { char * argv 2 argv 0 = '' /usr/bin/env '' argv 1 =NULL execve `` /usr/bin/env '' argv NULL À return0 } Step2 Changetheinvocationof execve inLine À tothefollowing describeyourobservation execve `` /usr/bin/env '' argv environ Step3 Pleasedrawyourconclusionregardinghowthenewprogramgetsitsenvironmentvariables 2.4Task4 EnvironmentVariablesand system Inthistask westudyhowenvironmentvariablesareaffectedwhenanewprogramisexecutedviathe system function.Thisfunctionisusedtoexecuteacommand butunlike execve whichdi- rectlyexecutesacommand system actuallyexecutes '' /bin/sh-ccommand '' i.e. itexecutes /bin/sh andaskstheshelltoexecutethecommand Ifyoulookattheimplementationofthe system function youwillseethatituses execl execute /bin/sh execl calls execve passingtoittheenvironmentvariablesarray.Therefore SEEDLabsŒEnvironmentVariableand Set-UID ProgramLab 4 using system theenvironmentvariablesofthecallingprocessispassedtothenewprogram /bin/sh Pleasecompileandrunthefollowingprogramtoverifythis # include < stdio.h > # include < stdlib.h > intmain { system `` /usr/bin/env '' return0 } 2.5Task5 EnvironmentVariableand Set-UID Programs Set-UID isanimportantsecuritymechanisminUnixoperatingsystems.Whena Set-UID program runs itassumestheowner'sprivileges.Forexample iftheprogram'sownerisroot thenwhenanyoneruns thisprogram theprogramgainstheroot'sprivilegesduringitsexecution Set-UID allowsustodomany interestingthings butitescalatestheuser'sprivilegewhenexecuted makingitquiterisky.Althoughthe behaviorsof Set-UID programsaredecidedbytheirprogramlogic notbyusers userscanindeedaffect thebehaviorsviaenvironmentvariables.Tounderstandhow Set-UID programsareaffected letus outwhetherenvironmentvariablesareinheritedbythe Set-UID program'sprocessfromtheuser's process Step1 Writethefollowingprogramthatcanprintoutalltheenvironmentvariablesinthecurrentprocess # include < stdio.h > # include < stdlib.h > externchar ** environ voidmain { inti=0 environ ! =NULL { printf `` % s\n '' environ i++ } } Step2 Compiletheaboveprogram changeitsownershipto root andmakeita Set-UID program //Asssumetheprogram'snameisfoo $ sudochownrootfoo $ sudochmod4755foo Step3 Inyourshell youneedtobeinanormaluseraccount notthe root account usethe export commandtosetthefollowingenvironmentvariables theymayhavealreadyexist Ł PATH SEEDLabsŒEnvironmentVariableand Set-UID ProgramLab 5 Ł LD LIBRARY PATH Ł ANY NAME thisisanenvironmentvariablebyyou sopickwhatevernameyouwant Theseenvironmentvariablesaresetintheuser'sshellprocess.Now runthe Set-UID programfrom Step2inyourshell.Afteryoutypethenameoftheprograminyourshell theshellforksachildprocess andusesthechildprocesstoruntheprogram.Pleasecheckwhetheralltheenvironmentvariablesyouset intheshellprocess parent getintothe Set-UID childprocess.Describeyourobservation.Ifthereare surprisestoyou describethem 2.6Task6 ThePATHEnvironmentVariableand Set-UID Programs Becauseoftheshellprograminvoked calling system withina Set-UID programisquitedangerous Thisisbecausetheactualbehavioroftheshellprogramcanbeaffectedbyenvironmentvariables suchas PATH theseenvironmentvariablesareprovidedbytheuser whomaybemalicious.Bychangingthese variables malicioususerscancontrolthebehaviorofthe Set-UID program.In Bash youcanchange PATH environmentvariableinthefollowingway thisexampleaddsthedirectory /home/seed tothe beginningofthe PATH environmentvariable $ exportPATH=/home/seed $ PATH The Set-UID programbelowissupposedtoexecutethe /bin/ls command however theprogram- meronlyusestherelativepathforthe ls command ratherthantheabsolutepath intmain { system `` ls '' return0 } Pleasecompiletheaboveprogram andchangeitsownerto root andmakeita Set-UID program Canyouletthis Set-UID programrunyourcodeinsteadof /bin/ls ? Ifyoucan isyourcoderunning withtherootprivilege ? Describeandexplainyourobservations Note Ubuntu16.04VMonly The system cmd functionexecutesthe /bin/sh programand thenasksthisshellprogramtorunthe cmd command.InbothUbuntu12.04andUbuntu16.04VMs /bin/sh isactuallyasymboliclinkpointingtothe /bin/dash shell.However dash programin thesetwoVMshaveanimportantdifference.The dash shellinUbuntu16.04hasacountermeasurethat preventsitselffrombeingexecutedina Set-UID process.Basically dash detectsthatitisexecutedin Set-UID process itimmediatelychangestheeffectiveuserIDtotheprocess'srealuserID essentially droppingtheprivilege.The dash programinUbuntu12.04doesnothavethisbehavior Sinceourvictimprogramisa Set-UID program thecountermeasurein /bin/dash canpreventour attack.Toseehowourattackworkswithoutsuchacountermeasure wewilllink /bin/sh toanother shellthatdoesnothavesuchacountermeasure.Wehaveinstalledashellprogramcalled zsh inourUbuntu 16.04VM.Weusethefollowingcommandstolink /bin/sh zsh thereisnoneedtodotheseinUbuntu 12.04 $ sudorm/bin/sh $ sudoln-s/bin/zsh/bin/sh SEEDLabsŒEnvironmentVariableand Set-UID ProgramLab 6 2.7Task7 The LD PRELOAD EnvironmentVariableand Set-UID Programs Inthistask westudyhow Set-UID programsdealwithsomeoftheenvironmentvariables.Severalen- vironmentvariables including LD PRELOAD LD LIBRARY PATH andother LD * thebehavior ofdynamicloader/linker.Adynamicloader/linkeristhepartofanoperatingsystem OS thatloads persistentstoragetoRAM andlinksthesharedlibrariesneededbyanexecutableatruntime InLinux ld.so ld-linux.so arethedynamicloader/linker eachfordifferenttypesofbinary Amongtheenvironmentvariablesthataffecttheirbehaviors LD LIBRARY PATH LD PRELOAD thetwothatweareconcernedinthislab.InLinux LD LIBRARY PATH isacolon-separatedsetofdi- rectorieswherelibrariesshouldbesearchedforbeforethestandardsetofdirectories LD PRELOAD alistofadditional usersharedlibrariestobeloadedbeforeallothers.Inthistask willonlystudy LD PRELOAD Step1 First wewillseehowtheseenvironmentvariablesthebehaviorofdynamicloader/linker whenrunninganormalprogram.Pleasefollowthesesteps 1 Letusbuildadynamiclinklibrary.Createthefollowingprogram andnameit mylib.c .Itbasically overridesthe sleep functionin libc # include < stdio.h > voidsleep ints { * Ifthisisinvokedbyaprivilegedprogram youcandodamageshere ! * printf `` Iamnotsleeping ! \n '' } 2 Wecancompiletheaboveprogramusingthefollowingcommands inthe -lc argument thesecond characteris ` % gcc-fPIC-g-cmylib.c % gcc-shared-olibmylib.so.1.0.1mylib.o-lc 3 Now setthe LD PRELOAD environmentvariable % exportLD_PRELOAD=./libmylib.so.1.0.1 4 Finally compilethefollowingprogram myprog andinthesamedirectoryastheabovedynamiclink library libmylib.so.1.0.1 * myprog.c * intmain { sleep 1 return0 } SEEDLabsŒEnvironmentVariableand Set-UID ProgramLab 7 Step2 Afteryouhavedonetheabove pleaserun myprog underthefollowingconditions andobserve whathappens Ł Make myprog aregularprogram andrunitasanormaluser Ł Make myprog Set-UID rootprogram andrunitasanormaluser Ł Make myprog Set-UID rootprogram exportthe LD PRELOAD environmentvariableagainin therootaccountandrunit Ł Make myprog Set-UID user1program i.e. theownerisuser1 whichisanotheruseraccount exportthe LD PRELOAD environmentvariableagaininadifferentuser'saccount not-rootuser runit Step3 Youshouldbeabletoobservedifferentbehaviorsinthescenariosdescribedabove eventhough youarerunningthesameprogram.Youneedtooutwhatcausesthedifference.Environmentvariables playarolehere.Pleasedesignanexperimenttooutthemaincauses andexplainwhythebehaviors inStep2aredifferent Hint thechildprocessmaynotinheritthe LD * environmentvariables 2.8Task8 InvokingExternalProgramsUsing system versus execve Although system execve canbothbeusedtorunnewprograms system isquitedanger- ousifusedinaprivilegedprogram suchas Set-UID programs.WehaveseenhowthePATHenvironment variableaffectthebehaviorof system becausethevariableaffectshowtheshellworks execve doesnothavetheproblem becauseitdoesnotinvokeshell.Invokingshellhasanotherdangerousconse- quence andthistime ithasnothingtodowithenvironmentvariables.Letuslookatthefollowingscenario Bobworksforanauditingagency andheneedstoinvestigateacompanyforasuspectedfraud.For theinvestigationpurpose Bobneedstobeabletoreadalltheinthecompany's Unix system onthe otherhand toprotecttheintegrityofthesystem BobshouldnotbeabletomodifyanyToachievethis goal Vince thesuperuserofthesystem wroteaspecialset-root-uidprogram seebelow andthengavethe executablepermissiontoBob.ThisprogramrequiresBobtotypeanameatthecommandline andthen itwillrun /bin/cat todisplaytheSincetheprogramisrunningasaroot itcandisplayany BobHowever sincetheprogramhasnowriteoperations VinceisverysurethatBobcannot usethisspecialprogramtomodifyany # include < string.h > # include < stdio.h > # include < stdlib.h > intmain intargc char * argv { char * v 3 char * command argc < 2 { printf `` Pleasetypeafilename.\n '' return1 } v 0 = '' /bin/cat '' v 1 =argv 1 v 2 =NULL SEEDLabsŒEnvironmentVariableand Set-UID ProgramLab 8 command=malloc strlen v 0 +strlen v 1 +2 sprintf command '' % % '' v 0 v 1 //Useonlyoneofthefollowings system command //execve v 0 v NULL return0 } Step1 Compiletheaboveprogram makeitaroot-owned Set-UID program.Theprogramwilluse system toinvokethecommand.IfyouwereBob canyoucompromisetheintegrityofthesystem ? For example canyouremoveathatisnotwritabletoyou ? Step2 Commentoutthe system command statement anduncommentthe execve statement theprogramwilluse execve toinvokethecommand.Compiletheprogram andmakeitaroot-owned Set-UID .DoyourattacksinStep1stillwork ? Pleasedescribeandexplainyourobservations 2.9Task9 CapabilityLeaking TofollowthePrincipleofLeastPrivilege Set-UID programsoftenpermanentlyrelinquishtheirroot privilegesifsuchprivilegesarenotneededanymore.Moreover sometimes theprogramneedstohandover itscontroltotheuser inthiscase rootprivilegesmustberevoked.The setuid systemcallcanbe usedtorevoketheprivileges.Accordingtothemanual ﬁ setuid setstheeffectiveuserIDofthecalling process.IftheeffectiveUIDofthecallerisroot therealUIDandsavedset-user-IDarealsosetﬂ.Therefore ifa Set-UID programwitheffectiveUID0calls setuid n theprocesswillbecomeanormalprocess withallitsUIDsbeingsetto n Whenrevokingtheprivilege oneofthecommonmistakesiscapabilityleaking.Theprocessmayhave gainedsomeprivilegedcapabilitieswhenitwasstillprivileged whentheprivilegeisdowngraded ifthe programdoesnotcleanupthosecapabilities theymaystillbeaccessiblebythenon-privilegedprocess Inotherwords althoughtheeffectiveuserIDoftheprocessbecomesnon-privileged theprocessisstill privilegedbecauseitpossessesprivilegedcapabilities Compilethefollowingprogram changeitsownertoroot andmakeita Set-UID program.Runthe programasanormaluser anddescribewhatyouhaveobserved.Willthe /etc/zzz Pleaseexplainyourobservation # include < stdio.h > # include < stdlib.h > # include < fcntl.h > voidmain { intfd * Assumethat/etc/zzzisanimportantsystemfile * anditisownedbyrootwithpermission0644 * Beforerunningthisprogram youshouldcreat * thefile/etc/zzzfirst * fd=open `` /etc/zzz '' O_RDWR|O_APPEND fd==-1 { SEEDLabsŒEnvironmentVariableand Set-UID ProgramLab 9 printf `` Cannotopen/etc/zzz\n '' exit 0 } * Simulatethetasksconductedbytheprogram * sleep 1 * Afterthetask therootprivilegesarenolongerneeded it'stimetorelinquishtherootprivilegespermanently * setuid getuid * getuid returnstherealuid * fork { * Intheparentprocess * close fd exit 0 } else { * inthechildprocess * * Now assumethatthechildprocessiscompromised malicious attackershaveinjectedthefollowingstatements intothisprocess * write fd '' MaliciousData\n '' ,15 close fd } } 3Submission Youneedtosubmitadetailedlabreporttodescribewhatyouhavedoneandwhatyouhaveobserved includingscreenshotsandcodesnippets.Youalsoneedtoprovideexplanationtotheobservationsthatare interestingorsurprising.Youareencouragedtopursuefurtherinvestigation beyondwhatisrequiredbythe labdescription.Yourcanearnbonuspointsforextraefforts atthediscretionofyourinstructor 