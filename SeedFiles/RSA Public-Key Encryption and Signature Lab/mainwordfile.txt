SEEDLabsŒRSAPublic-KeyEncryptionandSignatureLab 1 RSAPublic-KeyEncryptionandSignatureLab Copyright©2018WenliangDu SyracuseUniversity ThisworkislicensedunderaCreativeCommonsAttribution-NonCommercial-ShareAlike4.0International License.Ahuman-readablesummaryof andnotasubstitutefor thelicenseisthefollowing Youarefreeto copyandredistributethematerialinanymediumorformat.Youmustgiveappropriatecredit.Ifyouremix transform orbuilduponthematerial youmustdistributeyourcontributionsunderthesamelicenseasthe original.Youmaynotusethematerialforcommercialpurposes 1Introduction RSA RivestShamirAdleman isoneofthepublic-keycryptosystemsandiswidelyusedforsecure communication.TheRSAalgorithmgeneratestwolargerandomprimenumbers andthenusethem togeneratepublicandprivatekeypairs whichcanbeusedtodoencryption decryption digitalsignature generation anddigitalsignaturevTheRSAalgorithmisbuiltuponnumbertheories anditcan bequiteeasilyimplementedwiththesupportoflibraries Thelearningobjective ofthislabisforstudentstogainhands-onexperiencesontheRSAalgorithm Fromlectures studentsshouldhavelearnedthetheoreticpartoftheRSAalgorithm sotheyknowmath- ematicallyhowtogeneratepublic/privatekeysandhowtoperformencryption/decryptionandsignature generation/vThislabenhancesstudent'sunderstandingofRSAbyrequiringthemtogothrough everyessentialstepoftheRSAalgorithmonactualnumbers sotheycanapplythetheorieslearnedfrom theclass.Essentially studentswillbeimplementingtheRSAalgorithmusingtheCprogramlanguage.The labcoversthefollowingsecurity-relatedtopics Ł Public-keycryptography Ł TheRSAalgorithmandkeygeneration Ł Bignumbercalculation Ł EncryptionandDecryptionusingRSA Ł Digitalsignature Ł X.509 Labenvironment Thislabhasbeentestedonourpre-builtUbuntu12.04VMandUbuntu16.04VM bothofwhichcanbedownloadedfromtheSEEDwebsite.Thislabrequiresthe openssl library isalreadyinstalledontheUbuntu16.04 butnotontheUbuntu12.04VM.IfyouuseUbuntu12.04 please runthefollowingtwocommandstoinstall openssl $ sudoapt-getupdate $ sudoapt-getinstalllibssl-dev Acknowledgment ThislabwasdevelopedwiththehelpofShatadiyaSaha agraduatestudentinthe DepartmentofElectricalEngineeringandComputerScienceatSyracuseUniversity 2Background TheRSAalgorithminvolvescomputationsonlargenumbers.Thesecomputationscannotbedirectlycon- ductedusingsimplearithmeticoperatorsinprograms becausethoseoperatorscanonlyoperateonprimitive SEEDLabsŒRSAPublic-KeyEncryptionandSignatureLab 2 datatypes suchas32-bitintegerand64-bitlongintegertypes.ThenumbersinvolvedintheRSAalgorithms aretypicallymorethan512bitslong.Forexample tomultipletwo32-bitintegernumbers b wejust needtouse * b inourprogram.However iftheyarebignumbers wecannotdothatanymore instead weneedtouseanalgorithm i.e. afunction tocomputetheirproducts Thereareseverallibrariesthatcanperformarithmeticoperationsonintegersofarbitrarysize.Inthis lab wewillusetheBigNumberlibraryprovidedby openssl .Tousethislibrary wewilleachbig numberasa BIGNUM type andthenusetheAPIsprovidedbythelibraryforvariousoperations suchas addition multiplication exponentiation modularoperations etc 2.1BIGNUMAPIs AllthebignumberAPIscanbefoundfrom https //linux.die.net/man/3/bn .Inthefollowing wedescribesomeoftheAPIsthatareneededforthislab Ł Someofthelibraryfunctionsrequirestemporaryvariables.Sincedynamicmemoryallocationtocre- ateBIGNUMsisquiteexpensivewhenusedinconjunctionwithrepeatedsubroutinecalls BN CTX structureiscreatedtoholdsBIGNUMtemporaryvariablesusedbylibraryfunctions.Weneedto createsuchastructure andpassittothefunctionsthatrequiresit BN_CTX * ctx=BN_CTX_new Ł InitializeaBIGNUMvariable BIGNUM * a=BN_new Ł ThereareanumberofwaystoassignavaluetoaBIGNUMvariable //Assignavaluefromadecimalnumberstring BN_dec2bn & '' 12345678901112231223 '' //Assignavaluefromahexnumberstring BN_hex2bn & '' 2A3B4C55FF77889AED3F '' //Generatearandomnumberof128bits BN_rand a,128,0,0 //Generatearandomprimenumberof128bits BN_generate_prime_ex a,128,1 NULL NULL NULL Ł Printoutabignumber voidprintBN char * msg BIGNUM * { //ConverttheBIGNUMtonumberstring char * number_str=BN_bn2dec //Printoutthenumberstring printf `` % % s\n '' msg number_str //Freethedynamicallyallocatedmemory OPENSSL_free number_str } SEEDLabsŒRSAPublic-KeyEncryptionandSignatureLab 3 Ł Compute res= b res= + b BN_sub res b BN_add res b Ł Compute res= b .Itshouldbenotedthata BN CTX structureisneedinthisAPI BN_mul res b ctx Ł Compute res= b modn BN_mod_mul res b n ctx Ł Compute res= c modn BN_mod_exp res c n ctx Ł Computemodularinverse i.e. given b suchthat b modn=1 .Thevalue b iscalled theinverseof withrespecttomodular n BN_mod_inverse b n ctx 2.2ACompleteExample Weshowacompleteexampleinthefollowing.Inthisexample weinitializethreeBIGNUMvariables b n wethencompute b b modn * bn_sample.c * # include < stdio.h > # include < openssl/bn.h > # defineNBITS256 voidprintBN char * msg BIGNUM * { * UseBN_bn2hex forhexstring * UseBN_bn2dec fordecimalstring * char * number_str=BN_bn2hex printf `` % % s\n '' msg number_str OPENSSL_free number_str } intmain { BN_CTX * ctx=BN_CTX_new BIGNUM * a=BN_new BIGNUM * b=BN_new BIGNUM * n=BN_new BIGNUM * res=BN_new SEEDLabsŒRSAPublic-KeyEncryptionandSignatureLab 4 //Initializea b n BN_generate_prime_ex NBITS,1 NULL NULL NULL BN_dec2bn & b '' 273489463796838501848592769467194369268 '' BN_rand n NBITS,0,0 //res=a * b BN_mul res b ctx printBN `` * b= '' res //res=a‹bmodn BN_mod_exp res b n ctx printBN `` a‹cmodn= '' res return0 } Compilation Wecanusethefollowingcommandtocompile bn sample.c thecharacterafter-isthe letter ` notthenumber1 ittellsthecompilertousethe crypto library $ gccbn_sample.c-lcrypto 3LabTasks Toavoidmistakes pleaseavoidmanuallytypingthenumbersusedthelabtasks.Instead copyandpastethe numbersfromthisPDF Submissionrequirement Inyourreport youshoulddescribeyourstepsandincludeyourcodeand runningresults 3.1Task1 DerivingthePrivateKey Let p q e bethreeprimenumbers.Let n=p * q .Wewilluse e n asthepublickey.Please calculatetheprivatekey .Thehexadecimalvaluesof p q e arelistedinthefollowing.Itshouldbe notedthatalthough p q usedinthistaskarequitelargenumbers theyarenotlargeenoughtobesecure Weintentionallymakethemsmallforthesakeofsimplicity.Inpractice thesenumbersshouldbeatleast 512bitslong theoneusedhereareonly128bits p=F7E75FDC469067FFDC4E847C51F452DF q=E85CED54AF57E53E092113E62F436F4F e=0D88C3 3.2Task2 EncryptingaMessage Let e n bethepublickey.Pleaseencryptthemessage '' Atopsecret ! '' thequotationsarenot included .WeneedtoconvertthisASCIIstringtoahexstring andthenconvertthehexstringtoaBIGNUM usingthehex-to-bnAPI BN hex2bn .Thefollowing python commandcanbeusedtoconvertaplain ASCIIstringtoahexstring SEEDLabsŒRSAPublic-KeyEncryptionandSignatureLab 5 $ python-c'print `` Atopsecret ! `` .encode `` hex '' ' 4120746f702073656372657421 Thepublickeysarelistedinthefollowings hexadecimal .Wealsoprovidetheprivatekey tohelp youverifyyourencryptionresult n=DCBFFE3E51F62E09CE7032E2677A78946A849DC4CDDE3A4D0CB81629242FB1A5 e=010001 thishexvalueequalstodecimal65537 M=Atopsecret ! d=74D806F9F3A62BAE331FFE3F0A68AFE35B3D2E4794148AACBC26AA381CD7D30D 3.3Task3 DecryptingaMessage Thepublic/privatekeysusedinthistaskarethesameastheonesusedinTask2.Pleasedecryptthefollowing ciphertext C andconvertitbacktoaplainASCIIstring C=8C0F971DF2F3672B28811407E2DABBE1DA0FEBBBDFC7DCB67396567EA1E2493F Youcanusethefollowing python commandtoconvertahexstringbacktotoaplainASCIIstring $ python-c'print `` 4120746f702073656372657421 '' .decode `` hex '' ' Atopsecret ! 3.4Task4 SigningaMessage Thepublic/privatekeysusedinthistaskarethesameastheonesusedinTask2.Pleasegenerateasignature forthefollowingmessage pleasedirectlysignthismessage insteadofsigningitshashvalue M=Ioweyou $ 2000 Pleasemakeaslightchangetothemessage M suchaschanging $ 2000 $ 3000 andsignthe message.Comparebothsignaturesanddescribewhatyouobserve 3.5Task5 VerifyingaSignature BobreceivesamessageM= '' Launchamissile '' fromAlice withhersignature S .Weknowthat Alice'spublickeyis e n .PleaseverifywhetherthesignatureisindeedAlice'sornot.Thepublickey andsignature hexadecimal arelistedinthefollowing M=Launchamissle S=643D6F34902D9C7EC90CB0B2BCA36C47FA37165C0005CAB026C0542CBDB6802F e=010001 thishexvalueequalstodecimal65537 n=AE1CD4DC432798D933779FBD46C6E1247F0CF1233595113AA51B450F18116115 Supposethatthesignatureiniscorrupted suchthatthelastbyteofthesignaturechangesfrom 2F 3F i.e thereisonlyonebitofchange.Pleaserepeatthistask anddescribewhatwillhappentothev process 3.6Task6 ManuallyVerifyinganX.509 Inthistask wewillmanuallyverifyanX.509usingourprogram.AnX.509containsdataabout apublickeyandanissuer'ssignatureonthedata.WewilldownloadarealX.509fromaweb SEEDLabsŒRSAPublic-KeyEncryptionandSignatureLab 6 server getitsissuer'spublickey andthenusethispublickeytoverifythesignatureonthe Step1 Downloadafromarealwebserver Weusethe www.example.org serverin thisdocument.Studentsshouldchooseadifferentwebserverthathasadifferentthanthe oneusedinthisdocument itshouldbenotedthat www.example.com sharethesamewith www.example.org .Wecandownloadusingbrowsersorusethefollowingcommand $ openssls_client-connectwww.example.org:443-showcerts Certificatechain 0s /C=US/ST=California/L=LosAngeles/O=InternetCorporationforAssigned NamesandNumbers/OU=Technology/CN=www.example.org /C=US/O=DigiCertInc/OU=www.digicert.com/CN=DigiCertSHA2HighAssurance ServerCA -- -- -BEGINCERTIFICATE -- -- - MIIF8jCCBNqgAwIBAgIQDmTF+8I2reFLFyrrQceMsDANBgkqhkiG9w0BAQsFADBw MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3 ... ... wDSiIIWIWJiJGbEeIO0TIFwEVWTOnbNl/faPXpk5IRXicapqiII= -- -- -ENDCERTIFICATE -- -- - 1s /C=US/O=DigiCertInc/OU=www.digicert.com/CN=DigiCertSHA2High AssuranceServerCA /C=US/O=DigiCertInc/OU=www.digicert.com/CN=DigiCertHighAssurance EVRootCA -- -- -BEGINCERTIFICATE -- -- - MIIEsTCCA5mgAwIBAgIQBOHnpNxc8vNtwCtCuF0VnzANBgkqhkiG9w0BAQsFADBs MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3 ... ... cPUeybQ= -- -- -ENDCERTIFICATE -- -- - TheresultofthecommandcontainstwoThesubject theentrystartingwith theis www.example.org i.e. thisis www.example.org 'sTheissuer entrystartingwith providestheissuer'sinformation.Thesubjectofthesecondisthe sameastheissueroftheBasically thesecondbelongstoanintermediate CA.Inthistask wewilluseCA'stoverifyaserver Ifyouonlygetonebackusingtheabovecommand thatmeanstheyougetissigned byarootCA.RootCAs'canbeobtainedfromtheFirefoxbrowserinstalledinourpre-builtVM Gotothe Edit Õ Preferences Õ Privacy andthen Security Õ ViewCertificates .Search forthenameoftheissueranddownloadits Copyandpasteeachofthe thetextbetweenthelinecontaining '' BeginCERTIFICATE '' andthelinecontaining '' ENDCERTIFICATE '' includingthesetwolines toaLetuscalltheone c0.pem andthesecondone c1.pem Step2 Extractthepublickey e n fromtheissuer's Opensslprovidescommandsto extractcertainattributesfromthex509Wecanextractthevalueof n using -modulus .There isnocommandtoextract e butwecanprintoutalltheandcaneasilythevalueof e Formodulus n $ opensslx509-inc1.pem-noout-modulus SEEDLabsŒRSAPublic-KeyEncryptionandSignatureLab 7 Printoutallthefields findtheexponent e $ opensslx509-inc1.pem-text-noout Step3 Extractthesignaturefromtheserver's Thereisno openssl commandto extractthesignatureHowever wecanprintoutalltheandthencopyandpastethesignature blockintoa note ifthesignaturealgorithmusedintheisnotbasedonRSA youcan another $ opensslx509-inc0.pem-text-noout ... SignatureAlgorithm sha256WithRSAEncryption 84 a8:9a:11 a7 d8 bd:0b:26:7e:52:24:7b b2:55:9d ea:30 89:51:08:87:6f a9 ed:10 ea:5b:3e:0b c7:2d:47:04:4e dd ... ... 5c:04:55:64 ce:9d b3:65 fd f6:8f:5e:99:39:21:15 e2:71 aa:6a:88:82 Weneedtoremovethespacesandcolonsfromthedata sowecangetahex-stringthatwecanfeedinto ourprogram.Thefollowingcommandcommandscanachievethisgoal.The tr commandisaLinuxutility toolforstringoperations.Inthiscase -d optionisusedtodelete '' '' '' space '' fromthedata $ catsignature|tr-d ' space ' 84a89a11a7d8bd0b267e52247bb2559dea30895108876fa9ed10ea5b3e0bc7 ... ... 5c045564ce9db365fdf68f5e99392115e271aa6a8882 Step4 Extractthebodyoftheserver's AAuthority CA generatesthesignature foraserverbycomputingthehashoftheandthensignthehash.Toverifythe signature wealsoneedtogeneratethehashfromaSincethehashisgeneratedbeforethe signatureiscomputed weneedtoexcludethesignatureblockofawhencomputingthehash Findingoutwhatpartoftheisusedtogeneratethehashisquitechallengingwithoutagood understandingoftheformatofthe X.509areencodedusingtheASN.1 AbstractSyntaxNotation.One standard soifwecan parsetheASN.1structure wecaneasilyextractanyfromaOpensslhasacommandcalled asn1parse whichcanbeusedtoparseaX.509 $ opensslasn1parse-i-inc0.pem 0 d=0hl=4l=1522cons SEQUENCE 4 d=1hl=4l=1242cons SEQUENCE Ê 8 d=2hl=2l=3cons cont 0 10 d=3hl=2l=1prim INTEGER:02 13 d=2hl=2l=16prim INTEGER :0E64C5FBC236ADE14B172AEB41C78CB0 ... ... 1236 d=4hl=2l=12cons SEQUENCE 1238 d=5hl=2l=3prim OBJECT X509v3BasicConstraints 1243 d=5hl=2l=1prim BOOLEAN:255 1246 d=5hl=2l=2prim OCTETSTRING HEXDUMP :3000 1250 d=1hl=2l=13cons SEQUENCE Ë 1252 d=2hl=2l=9prim OBJECT sha256WithRSAEncryption SEEDLabsŒRSAPublic-KeyEncryptionandSignatureLab 8 1263 d=2hl=2l=0prim NULL 1265 d=1hl=4l=257prim BITSTRING Thestartingfrom Ê isthebodyofthethatisusedtogeneratethehash thestarting Ë isthesignatureblock.Theiroffsetsarethenumbersatthebeginningofthelines.Inourcase bodyisfromoffset4to1249 whilethesignatureblockisfrom1250totheendoftheFor X.509thestartingoffsetisalwaysthesame i.e.,4 buttheenddependsonthecontentlength ofaWecanusethe -strparse optiontogetthefromtheoffset4 whichwillgiveusthe bodyoftheexcludingthesignatureblock $ opensslasn1parse-i-inc0.pem-strparse4-outc0_body.bin-noout Oncewegetthebodyofthewecancalculateitshashusingthefollowingcommand $ sha256sumc0_body.bin Step5 Verifythesignature Nowwehavealltheinformation includingtheCA'spublickey theCA's signature andthebodyoftheserver'sWecanrunourownprogramtoverifywhetherthe signatureisvalidornot.Openssldoesprovideacommandtoverifytheforus butstudentsare requiredtousetheirownprogramstodoso otherwise theygetzerocreditforthistask 4Submission Youneedtosubmitadetailedlabreporttodescribewhatyouhavedoneandwhatyouhaveobserved includingscreenshotsandcodesnippets.Youalsoneedtoprovideexplanationtotheobservationsthatare interestingorsurprising.Youareencouragedtopursuefurtherinvestigation beyondwhatisrequiredbythe labdescription.Yourcanearnbonuspointsforextraefforts atthediscretionofyourinstructor 