www.enisa.europa.eu European Union Agency For Network And Information Security Advanced static analysis TOOLSET DOCUMENT FOR STUDENTS OCTOBER 2015 Advanced artefact analysis Advanced static analysis 02 About ENISA The European Union Agency Network Information Security ENISA centre network information security expertise ENISA works groups develop advice recommendations good practice information security It assists EU member states implementing relevant EU legislation works improve expertise EU member states supporting development cross - border communities committed improving network information secu rity throughout EU More information ENISA work found www.enisa.europa.eu Authors This document created Yonas Leguesse Christos Sidiropoulos Kaarel Jõgi Lauri Palkmets consultation ComCERT 1 Poland S - CURE 2 The Netherlands DFN - CERT Services Germany Contact For contacting authors please use cert - relations @ enisa.europa.eu For dia enquir es paper please use press @ enisa.europa.eu Acknowledgements ENISA wants thank institutions persons contributed document A special goes 1 Dawid Osojca Tomasz Chlebowski 2 Don Stikvoort Michael Potter Legal notice Notice must taken publication represents views interpretations authors editors unless stated otherwise This publication construed legal action ENISA ENISA bodies unless adopted pursuant Regulation EU No 526/2013 This publication necessarily represent state - - art ENISA may update time time Third - party sources quoted appropriate ENISA respon sible content external sources including external websites referenced publication This publication intended information purposes It must accessible free charge Neither E NISA person acting behalf responsible use might made information contained publication Copyright Notice © European Union Agency Network Information Security ENISA 201 5 Reproduction authorised provided source acknowledged Advanced artefact analysis Advanced static analysis 03 Tab le Contents 1 Introduction IDA Pro 5 Opening closing samples 5 IDA Pro interface 9 Exer cise 10 Disassembly view 13 Basic navigation 17 Exercise 21 Functions 21 Enhancing assembly code 25 Exercise 38 2 Recognizing important functions 39 Using call graphs 39 Exercise 44 Using cross references 47 Exercise 54 3 Functions ana lysis 55 Analysis network function 55 Analysis WinMain 67 Analysis thread function 72 Exercise 80 4 Anti - disassembly techniques 81 Linear sweep vs. recursive disassemblers 8 1 Anti - disassembly techniques 82 Analysis anti - disassembly techniques 83 Exercise 95 Advanced artefact analysis Advanced static analysis 04 Main Objective The main goal training teach participants aspects static artefact analysis During first part taught approach disassembly binary code recognize basic programming language structures navigate disassembled cod e. This part conducted non - malicious binary code safety reasons Second part exercise focuses characteristic patterns assembly code found popular artefacts The participants learn quickly recognize common patterns adds effectiveness work Eventually instructor guides class real - world samples known threats gradually increa sing level complexity Targeted Audience CSIRT staff involved technical analysis incidents especially dealing sample examination malware analysis Prior knowledge assembly language operating systems internals highly recommended Total Duration 8 - 12 hours Frequency Once team member Advanced artefact analysis Advanced static analysis 05 1 Introduction IDA Pro Opening closing samples During first part training learn use IDA Free disassembler powerful tool allowing analyst effectively analyse disassembled code In training examine binary popular SSH client PuTTY 3 Copy putty.exe sample Desktop start IDA Free disassembler C lick Ok. Click Go button You also check prevent IDA displaying dialog time 3 PuTTY A Free Telnet/SSH Client http //www.chiark.greenend.org.uk/~sgtatham/putty/ last accessed 11.09.2015 Advanced artefact analysis Advanced static analysis 06 Open putty.exe file choosing File - dragging putty.exe binar onto disassembler window Advanced artefact analysis Advanced static analysis 07 Leave default options set shown screenshot press Ok button Advanced artefact analysis Advanced static analysis 08 Now take lo ok directory putty.exe located When finishing analysis either quitting IDA Pro selecting File - > Close IDA ask whether pack database files Pack database store - recommended leave unpacked files You also choo se finish analysis without saving results option Advanced artefact analysis Advanced static analysis 09 IDA Pro interface Load putty.exe described previous step open saved session To switch windows use Windows tabs 3 If accidentally close windows bring back using View - > Open sub views menu corresponding shortcut key Advanced artefact analysis Advanced static analysis 10 Right window tabs Overview navigator 2 panel Switch Hex View - A window scroll observe changes current position pointed yellow arrow The last three elements IDA workspace toolbars area 1 quickly access certain IDA functions graph overview 5 quickly navigate disassembled code output window 6 Exercise Take time switch different data views windows check type data presented Name functions imported PuTTY executable What sections present within execu table ? What strings tell binary ? Advanced artefact analysis Advanced static ana lysis 11 Right click toolbars 1 uncheck unnecessary toolbars context menu In example display following toolbars Main Files Navigation - > Jumps Navigation - > Navigation Navigation - > Graph overview Disassembly - > Cross references Graphs It also worth resizing output window 6 rarely used analysis Next rearrange windows toolbars give IDA cleaner look Since functions window nd disassembly window frequently used good top Moreover also good maximize IDA Advanced artefact analysis Advanced static analysis 12 S ave layout using Windows - > Save desktop option Now whenever start new analysis layout gets messed quickly restore using Windows - > Load desktop option Advanced artefact analysis Advanced static analysis 13 Disassembly view There two types assembly view text view graph view To switch text graph vie ws click assembly view IDA View - A press spacebar If click jump destination IDA highlight destination label well corresponding arrow The second type assembly view graph view Advanced artefact analysis Advanced static analysis 14 You also hover cursor branches IDA show small hint window code snippet branch leading Sometimes want get higher level grasp code flow function In situation useful zoom graph vie w Ctrl + Scroll button Advanced artefact analysis Advanced static analysis 15 You click almost name register operation variable comment etc IDA highlight every occurrence name For example highlight push/pop operations track registry changes highlight particular registry track instructions changing Advanced artefact analysis Advanced static analysis 16 If would like see instruction addresses staying graph view choose Options - > General Line prefixes option Now viewing code graph view also see instruction addresses For convenience use rest document could always easily navigate part code pointed screenshot Advanced artefact analysis Advanced static analysis 17 At end part code proper function graph view unavailable You recognize situation instruction addresses text view red impossible switch graph view Basic navigation One easiest ways navigate code use functions window Just find interesting function name double click move function instantaneously For example go sub_4457D6 function Moreover functions l ist long click functions window start typing function name At bottom window observe characters typed function given name exists selected automatically Advanced artefact analysis Advanced static analysis 18 As may noticed functions functions list named differently sub_XXXXXX Examples functions _fwrite _strcat _sscanf etc With exceptions library functions statically linked binary dur ing compilation If resize functions window functions marked capital L sixth column 4 Moreover take look overview navigator bar library functions marked cyan colour Go back WinMain functio n look group four calls beginning routine 4 To check meaning ther columns refer https //www.hex - rays.com/products/ida/support/idadoc/586.shtml last accessed 11.09.2015 Advanced artefact analysis Advanced static analysis 19 To quickly navigate sub_44B2C5 double click name In similar way also click data offsets move location data memory For example double cli ck aWs2_32_dll name given IDA string defined memory section .rdata address 0x473EF0 Now go back WinMain quickly press < Esc > key twice It move back WinMain routine Respectively move forward press < Ctrl > + < Enter > back sub_44B2C5 You also use Jumps toolbar When dealing large complicated functions useful use small Graph overview window navigate wit hin code function The Graph overview window present whenever disassembly view active Advanced artefact analysis Advanced static analysis 20 current mode graph view If accidentally close Graph overview window open using View - > Toolbars - > Navigation - > Graph overview If function graph big fit current disassembly view size current position marked small dotted rectangle within Graph overview window This rectangle change size whenever zoom function graph You move rectangle click part Graph overview move chosen part function Now try inspect function sub_44F102 using Graph overview window belongs In situations use Jump address feature Jump - press < g > In dialog enter ny hexadecimal address within memory range analysed binary e.g 0x440C74 name recognized IDA like function name certain label e.g sub_40E589 loc_40E5CA Advanced artefact analysis Advanced st atic analysis 21 Exercise Take time navigate various functions disassembled PuTTY binary Find function sub_4497AE What API calls made within function ? Go address 0x406AFB To function address belong ? Go address 0x430E AB Is anything special instructions stored address ? Functions The WinMain You edit function prototype clicking function name choosing Edit - > Fu nctions - > Set function menu Below function header list local variables 2 function arguments 3 IDA tracks variables used code tries suggest names Local variables always negative offsets function arguments positive offsets arg_8 ebp+10 arg_4 ebp+C Advanced artefact analysis Advanced static analysis 22 arg_0 ebp+8 ret addr ebp+4 ebp ebp var_4 ebp - 4 var_8 ebp - 8 var_C ebp - C If double click variable names IDA open stack frame window current function In functions EBP - based stack frames variables referenced relative EBP register WinMain sub_42FCAD examples functions In functions ESP - based stack frame iables referenced relative ESP register Example function sub_40486C Advanced artefact analysis Advanced static analysis 23 either manually custom script sometimes enough tell IDA create function given address Example functi IDA properly recognize code address 0x430E38 To create function click first instruction push ebp choose Edit - > Functions - > Create function Advanced artefact analysis Advanced static analysis 24 IDA recognize part code proper function able switch graph view Edit - > Functions - > Edit function r end address Advanced artefact analysis Advanced static analysis 25 Enhancing assembly code Go function sub_44D262 0x44D262 This function takes one unknown argument arg_0 uses variables two IDA named FileName FindFileData In function body see API calls functions GetWindowsDirectoryA FindFirstFileA FindNextFileA GetProcAddress etc There also unknown calls address stored registers Advanced artefact analysis Advance static analysis 26 And calls functions pointed global variable To start improving code readability first look graph nodes calls GetProcAddr In total three calls sub_ 44D262 You read name function resolved value pushed onto stack CryptAcquireContextA After call GetProcAddress result saved memory location pointed dword_47E0C8 You rename memory location clicking dword_47E0C8 pressing < n > key Rename CryptAcquireContextA Advanced artefact analysis Advanced static analysis 27 After pressing Ok informed name exceeds 15 characters Ignore warning click Yes Now code look like Repeat step remaining two calls GetProcAddress sub_44D262 CryptGenRandom CryptReleaseContext Make sure rename memory locations exactly names resolved functions Next scroll location wh ere calls functions pointed memory address call dword_XXXXXX previously Notice changed ? Advanced artefact analysis Advanced static analysis 28 S witch Analysis tab click Reanalyze program Wait IDA finish analysis close IDA Options dialog Notice IDA added additional comme nts renamed variables ! Advanced artefact analysis Advanced static analysis 29 Now scroll location 0x44D391 call eax eax register take look blocks notice eax assigned pointer CryptAcquireContextA To add comment click call eax pres < > colon Comment remaining arguments CryptAcquireContextA accordingly function prototype 5 make look like following 5 CryptAcquireContext function https //msdn.microsoft.com/en - us/library/windows/desktop/aa379886 % 28v=vs.85 % 29.aspx last accessed 11.09.2015 Advanced artefact analysis Advanced static analysis 30 Now know 0F0000000h 1 constants passed CryptAcquireContextA arguments dwFlags dwProvType You check function reference 6 dwFlags takes constant CRYPT_ prefix whil e dwProvType takes constant PROV_ prefix You tell IDA represent values symbolic constant To use symbolic constant representation right - click 0F0000000h choose In next window I DA display known standard symbolic constants whose value equals 0F0000000h Choose constant CRYPT_ prefix CRYPT_VERIFYCONTEXT Repeat steps dwProvType time choosing PROV_RSA_FULL Now code look like 6 CryptAcquireContext function https //msdn.microsoft.com/en - us/library/windows/desktop/aa379886 % 28v=vs.85 % 29.aspx last accessed 11.09.2015 Advanced artefact analysis Adv anced static analysis 31 Now scroll address 0x44D367 Here see group nodes making jump location loc_44D3BE Further inspection shows loc_44D3BE location function epilogue probably jumped something earlier fails Rename location func_exit way renaming memory location Now jumps look much clearly Advanced artefact analysis Advanced static analysis 32 Group graph nodes used resolve crypto fu nctions addresses To go graph node address 0x44D2F7 select graph nodes clicking holding < Ctrl > key Select graph nodes starting 0x44D2F7 0x44D367 Now right - click selected nodes cho ose Group nodes Advanced artefact analysis Advanced static analysis 33 In next window write short description grouped nodes used After clicking Ok previously selected nodes replaced single node To edit node group text temporarily un - collapse group use pair f new buttons node group header Advanced artefact analysis Advanced static analysis 34 Now go location loc_44D2B1 0x44D2B1 Take look call ebx instruction If select call ebx notice similar calls made two locations function Advanced artefact analysis Advanced static analysis 35 In case two arguments pushed onto stack first address second one seems size buffer pointed first argument good comment ! Now select ebx register notice value b eing assigned beginning function This means arg_0 function pointer function pointed argument called three times function rename arg_0 func_ptr Since seems significant element good mark three graph nodes call takes place To mark graph node use node colouring feature Go back loc_44D2B1 click icon colour palette left upper corner Advanced artefact analysis Advanced static analysis 36 After clicking Ok node background become cyan Repeat step two remaining graph nodes call ebx takes place One thing IDA improv e code readability change IDA presents numerical values By default numerical value presented hexadecimal Sometimes would like view decimal binary even custom defined constant To change value format right - cl ick choose suitable format Advanced artefact analysis Advanced static analysis 37 Additionally rare situations might also helpful change name registers For example given function register frequently used one purpose e.g storing poi nter constant value might good change name This change would apply current function An example register sub_44D262 edi The register first zeroed xor edi edi used rest function co mpare values zero push zero onto stack To rename register click register press < N > rename Advanced artefact analysis Advanced static analysis 38 Now code look like Exercise Find variable var_8 used rename Try rename remaining locations loc_44D2B1 loc_44D2DA loc_44D36B loc_44D3B4 What names would suggest ? Group three graph nodes checking functions CryptAcquireContextA CryptGenRandom CryptReleaseContext resolved correctly 0x44D36B 0x44D374 0x44D3 7C Has code readability function improved ? Can guess function sub_44D262 might used ? Advanced artefact analysis Advanced static analysis 39 2 Recognizing important functions In exercise use sample Slave trojan 7 banking trojan first detected S21s ec company 8 Before continuing please load slave.exe sample IDA wait initial auto analysis completes Because analysing live malware sample remember take necessary precautions Using call graphs To access cal l graph functionality use menu View - > Graphs use Graphs toolbar Start clicking wWinMain function slave.exe sample choose create Xrefs call graph Note need click actual function picture function name function prototype Now see WinGraph32 window newly created call graph wWinMain function This Xrefs graph presen ts functions called wWinMain routine local functions library functions well API functions 7 Sample 400fbcaaac9b50becbe91ea891c25d71 MD5 https //malwr.com/analysis/OTRiMDk1ODFkOGVjNDhkMzljYzdiZTUzZDUyYjEwM2M/ last accessed 11.09.2015 8 New banking trojan 'Slave ' hitting Polish Banks http //securityblog.s21sec.com/2015/03/new - banker - slave - hitting - polish - banks.html last accessed 11.09.2015 Advanced artefact analysis Advanced static analysis 40 To navigate graph use left - mouse button To zoom zoom use toolbar buttons shown screen Now zoom zoom 100 % notice different colours graph nodes What want check functions call wWinMain ? You use Xrefs call graph Click wWinMain choose Xrefs graph Advanced artefact analysis Advanced static analysis 41 C reate Xrefs graph sub_404330 Xrefs graphs might also used check functions referencing particular memory location As example go wWinMain function click dword_438120 choose create Xrefs graph Advanced artefact analysis Advanced static analysis 42 You see functions referencing memory location Th e th ird type graphs user defined graphs To create graph wWinMain select wWinMain choose Advanced artefact analysis Advanced static analysis 43 As example create graph wWinMain presenting references function limiting graph recursion depth 2 Advanced artefact analysis Advanced static analysis 44 Is newly created graph clearer easier follow ? Exercise Take minutes experiment options user defined graphs Create graphs functions wWinMain The last graph type Function calls presents graph function calls recognized functions Advanced artefact analysis Advanced static analysis 45 Y ou analyse call graph wWinMain function 9 First notice top group three functions 1 sub_406410 sub_406120 sub_401B90 At point already suspect important functions called directly wWinMain calling lot APIs Unfortunately due structure graph hard tell API called function To deal problem create call graph wWinMain recursion depth equal 2 Then take look sub_401B90 We see function iterating process list calls Process32FirstW Pro cess32NextW etc. Next look sub_406410 It calls APIs us RegSetValueExW CreateDirectoryW CreateFileW MoveFileExW 9 This graph might slightly different us ing IDA version general struct ure similar Advanced artefact analysis Advanced static analysis 46 Then take look sub_406120 It enumerates registry RegEnumValueW checks module path GetModuleFileNameW Now go back general graph wWinMain take look function sub_402050 2 Among APIs also calling CreateRemoteThread WriteProcessMemory This tells us function likely injecting code processes also notice sub_402050 first called already checked sub_401B90 iterating process list Next take look function sub_405760 3 calling many functions If look closer rest graph notice several potentially interesting functions like sub_4027E0 performing file system operations DeleteFileW WriteFile SetFileAttributesW CreateFi leW sub_406CA0 threads operations Advanced artefact analysis Advanced static analysis 47 The next thing might consider would create separate call graphs functions previously noticed sub_405760 Using cross referen ces To use cross references go place given object defined referenced click object name press < X > select View - > Open subviews - > Cross references As example go wWinMain function To check global variable dword_438120 used double click go memory location data variable defined T get better view list cross references best select variable press < Ctrl+X > open Cross references dialog Advanced artefact analysis Advanced static analysis 48 You also immediately jump cross reference double clicking For example jump cross reference address sub_402540+C5 want go back simply press < Esc > S witch imports view If wind ow already open choosing View - > Open subviews - > Imports To make searching easier sort imported functions name clicking Name column first find WriteProcessMemory function imports list double click Advanced artefact analysis Advanced static analysis 49 Next click function name open Xrefs dialog When looking imports list one thing stands complete lack network related fun ctions It rather uncommon malware communicate servers This suggests functions might loaded GetProcAddress function Advanced artefact analysis Advanced static analysis 50 As suspected quite lot calls GetProcAddress Now go cross reference sub_402860 go function take look calls GetProcAddress Now follow cross references dword_438108 check HttpSendRequest A function called Advanced artefact analysis Advanced static analysis 51 You see one call HttpSendRequestA sub_402300 Follow cross reference S witch strings view If strings view open choose View - > Open subviews - > Strings In strings window see interesting strings There domain name www.bizzanalytics.com Double click string follow cross references Advanced artefact analysis Advanced static analysis 52 You see two cross references first one leads sub_402300 function already found communicate C & C server second one string offset written memory Now go back strings window notice strings named PR_Write PR_Read PR_Close names functions NSPR li brary used network communication 10 10 Netscape Portable Runtime NSPR https //developer.mozilla.org/en - US/docs/Mozilla/Projects/NSPR last ac cessed 11.09.2015 Advanced artefact analysis Advanced static analysis 53 All three strings referenced two different functions sub_405390 sub_405760 If jump either two functions examine see references strings like network functions used I nternet Explorer web browser Advanced artefact analysis Advanced static analysis 54 Exercise Save results current work open new sample dexter.exe sample Dexter malware targeting POS systems 11 Using techniques presented exercise try pinpoint important functions disassembled code Find network related functions Find installation routine Find function performing RAM scraping reading memory processes Find process injection routine Are potentially interesting suspicious functions ? 11 POS malware - look Dexter Decebal http //h30499.www3.hp.com/t5/HP - Security - Research - Blog/POS - malware - - look - - Dexter - - Decebal/ba - p/6654398 last accessed 11.09.2015 Advanced artefact analysis Advanced static analysis 55 3 Functions analysis Analysis network function In previous exercise found group suspicious functions The next step analyse functions order better understand functionality used In exercise learn basic First go sub_402300 0x402300 address sub_402300 f_CnC_func Advanced artefact analysis Advanced static analysis 56 To check functions called within f_CnC_func need first deal calls global variables Using cross references go place value dword_438104 set jump G 0x402939 order make typo Advanced artefact analysis Advanced static analysis 57 Now go back f_CnC_func reanalyse code Options - > General - > Analysis - > Reanalyse program IDA add additional comments 12 While staying f_CnC_func choose View - > Open subviews - > Function calls 12 If point notice disassembly lacking comments except ones added manually comparison screenshots document try repeating step Also make sure properly renamed global variables containing pointers API functions Advanced artefact analysis Advanced static analysis 58 analysing f_CnC_ func function arguments Go place f_CnC_func called following address 0x40256C got function calls window Advanced artefact analysis Advanced static analysis 59 You beginning sub_402540 Now go back f_CnC_func check ecx register used anything Rename var_C Now go last block f_CnC_func loc_40246A Advanced artefact analysis Advanced static analysis 60 Rename var_14 retval For convenience also good rename label loc_40246A something like func_exit Go beginning function For clarity rename var_10 hInternet Advanced artefact analysis Advanced static analysis 61 For clarity rename variables add symbolic constants For 0x40233D right click select symbolic constant - > use standard symbolic constant list select For 0x402343 switch decimal clicking use shortc ut key Shift+H Also rename var_18 hConnect In next step malware opening HTTP request using HttpOpenRequestA Hover mouse cursor szObjectName double click Advanced artefact analysis Advanced static analysis 62 Rename global variable dword_438124 CnC_hRequest check xrefs Now take look next three code blocks 0x4023A6 0x4023D3 0x4023DA Advanced artefact analysis Advanced static analysis 63 In first block single call InternetReadFile Then loop block 2 3 additional call InternetReadFile block 3 analyse block 1 detail Highlight edi register search code value last set Advanced artefact analysis Advanced static analysis 64 Going back block 1 notice variable var_8 initialized zero Highlight var_8 check else code variable used You see var_8 used times block 3 First conjunction memcpy function specify number bytes copied later number received bytes added var_8 Th means var_8 used store number received bytes Knowing comment appropriately beginning block 1 In second half block 1 call InternetReadFile Here see received data saved Buffer variable memory buffer declared stack size 4096 bytes 1000h Moreover number received bytes saved dwNumberOfBytesRead variable Advanced artefact analysis Advanced static analysis 65 Now go block 2 first block receive loop analysis block 3 Advanced artefact analysis Advanced static analysis 66 At point detailed function analysis done However remember detailed function analysis always necessary What learnt f_CnC_func Returns 1 data received Connection made hardcoded URL No POST data sent request C & C server There processing received data Function used solely download data server Advanced artefact analysis Advanced static analysis 67 Received data saved newly allocated memo ry block A pointer memory saved variable passed function argument Analysis WinMain Now perform analysis wWinMain function located address 0x406060 It also seems wWinMain using local variable r eferencing arguments F irst go last block function loc_40610F rename func_exit Advanced artefact analysis Advanced static analysis 68 Now take look first block function A couple things take place First see call sub_40286 0 function line 03 If take quick look function see used dynamically load API functions Rename sub_402860 f_Initialize_APIs Advanced artefact analysis Advanced static analysis 69 Rename global variable hHandle line 12 hUnnamedMutex Additionally line 11 global variable dword_438120 variable used code good give temporary name example var_main_zero If later see reference variable wi immediately know first set zero wWinMain function C heck xrefs value dword_437E40 ? However virtual address 0x437E40 located uninitialized part data section slave.exe according PE - COFF specification 13 memory au tomatically initialized zero 13 Microsoft PE COFF Specification https //msdn.microsoft.com/en - us/windows/hardware/gg463119.aspx last accessed 11.09.2015 Advanced artefact analysis Advanced static analysi 70 The n ext code block quite interesting If time result greater equal zero result compared value 0x551B3500 1427846400 In next two code blocks malware tries create named mutex checks succeeds Advanced artefact analysis Advanced static analysis 71 In next two code blocks program calls two functions sub_406120 sub_406410 None functions seem take arguments second function called first one returns value zero eax sub_406120 In next block program creating new threa d. The thread routine set sub_401B90 Rename function f_ThreadFunction Advanced artefact analysis Advanced static analysis 72 Analysis thread function In exercise analysis thread function f_ThreadFunction - sub_401B90 However unlike previous examples w ill quick assessment function get general knowledge functionality G f_ThreadFunction IDA Free N otice IDA highlighted parts code red I n case enough tell IDA reanalyse code Options - > General - > Analysis - > Reanalyze program IDA fix references local variables Rename local variable var_264 PID Notice entire thread function big loop iterating processes Advanced artefact analysis Advanced static analysis 73 G block Process32Next called rename block label get_proc_next T ake look ginning loop block 1 Next take look blocks 2 3 4 Advanced artefact analysis Advanced static analysis 74 Next ake look 5 Next proceed 6 Advanced artefact analysis Advanced static ana lysis 75 To check anonymous_0 field first hover mouse SystemInfo Next go Structures view View - > Open Subviews - > Structures This view presents well - known data structures recognized IDA disassembled code also possible create c ustom data structures Next find list _SYSTEM_INFO structure Advanced artefact analysis Advanced static analysis 76 To expand structure declaration click _SYSTEM_INFO name Here see anonymous_0 field first field _SYSTEM_INFO structure This means union containing information processor architecture wProcessorArchitecture The n ext block quite interesting educational point view Advanced artefact analysis Advanced static analysis 77 This code executed malware determines runn ing 64 - bit system The call IsWow64Process suggests malware checks web browser process running WOW64 14 The second argument Wow64Process pointer BOOL variable used return information whether given process running u nder WOW64 14 Windows subsystem allowing 32 - bit applications running 64 - bit Windows system https //msdn.microsoft.com/en - us/library/windows/desktop/aa384249 % 28v=vs.85 % 29.aspx last accessed 11.09.2015 Advanced artefact analysis Advanced static analysis 78 Choose Options - > General check Stack pointer checkbox Notice instruction changing stack pointer push pop etc changing value column instructions like mov xor add cmp H mouse IsWow64Process Advanced artefact analysis Advanced static analysis 79 Click call IsWow64Process choose Edit - > Functions - > Change stack pointer 0x8 function taking two DWORD sized arguments Now IDA correctly reference variables making code much clearer Notice previously referenced var_274 var_26C Going back thread function analysis take look block 7 single function sub_402050 called loop end This function takes single argument process ID call graph function see calls APIs WriteProcessMemory CreateRemoteThread This means function used inject code browser process Advanced artefact analysis Advanced static analysis 80 Finally code 8 executed Process32NextW returns FALSE zero What learnt thread function endlessly iterates process list search processes popular web browsers Mozilla Firefox Google Chrome Internet Explorer inject code process sub_402050 What yo - bit process affects code injection You also skipped call sub_401DA0 function using mutexes prevent injection code twice process Exercise Open dexter.exe sample previous exercise try analyse following functions sub_401E70 function used ? How return result ? sub_402620 function arguments used ? sub_4022B0 function used f ? For function quick assessment order get general understanding function role No detailed analysis necessary Advanced artefact analysis Advanced static analysis 81 4 Anti - disassembly techniques In exercise learn popular anti - disassembly echniques Note since techniques affect disassembled code usually also problem dynamic analysis debugger needs disassemble code well Linear sweep vs. recursive disassemblers T ake look hexdump executable Highlighted bytes represent consecutive assembly instructions E8 34 04 00 00 call 0x401a20 E9 58 FD FF FF jmp 0x401349 8B FF mov edi edi But start analysis example offset changed two bytes would pro duce com pletely different assembly code Red frames mark previously disassembled instructions highlighted bytes mark new instructions di sassembling changed offset 04 00 add al 0x0 00 E9 add cl ch 58 pop eax FD std FF db 0xFF incorrect FF 8B FF 55 8B EC dec dword ebx - 0x1374aa01 Advanced artefact analysis Advanced static analysis 82 The difference linear sweep recursive disassembler disassembler follows consecutive instructions A linear sweep disassembler tries disassemble code code secti executable The instruction type That bytes injected instructions disassembler would try terpret another instruction For example interpreting text string Resulting disassembly would look follows Notice first two instructions push jmp disassembled properly rest code comp letely different Anti - disassembly techniques Below short summary common anti - disassembly techniques Inserting garbage bytes This echnique works inserting random bytes chosen parts code The intention make disassembler interpret bytes normal code would lead incorrect disassembly This technique usually used conjunction oth er technique Return address manipulation This one several execution flow manipulation techniques It works changing return address current function This way disassembler expecting function return address call instruction function would return completely different part code Middle instruction jump In technique one instruction e.g push mov us ed hide another instruction Always taken jumps This technique works using conditional jumps condition always met Since disassembler likely know try disassemble tes following instruction Indirect calls based runtime value If jump call made dyna know calling convention destination function called function changing stack pointer Advanced artefact analysis Advanced static analysis 83 Structured Exception Handling SEH Structured Exception Handling SEH mechanism normally used handle exceptions programs It also used obscure execution flow first installing exception handler rou tine triggering exception part code As consequence program execution switched exception handler routine Inserting junk code This technique works inserting instructions code direct change program result The aim technique make disassembled code less clear harder analyse usually difficult analyst distinguish real instructions junk code Dynamic API l oading Based API functions malware calling try predict functionality also recognize important parts code To make analysis harder malicious code frequently dynamically loads important API functions th present default import address able Analysis anti - disassembly techniques In exercise analyse specially prepared binary file non - malicious using various anti - disassembly techniques S tart opening antidisasm.exe IDA You see group calls various functions Each function using different anti - disassembly techniques returns value eax register The task tell value returned function using static analysis techniques 4.3.1 Analysis call loc_40101A First go function 0x40101A Advanced artefact analysis Advanced static analysis 84 Notice beginning loc_40101A strange call call $ +5 Then add 10h eax value call address newly computed eax value At point know eax value 0x401032 0x401022+0x10 Unfortunately leads us right middle junk code seems instruction address S elect junk code right click choose undefined press < U > Advanced artefact analysis Advanced st atic analysis 85 Next click byte address 0x401032 press < C > convert code Notice also string Now code much clearer You also read return value loc_40101A 0x1337 Advanced artefact analysis Advanced static analysis 86 To sum function seen two anti - disassembly techniques First indirect call called thus tried disassemble next instruction happened inline embedded string second technique This resulted creation junk code instead valid assembly instructions 4.3.2 Analysis call loc_401045 The second functio n analyse function loc_401045 H ighlight eax register check value set Notice red coloured cross reference suggesting something wrong S elect highlighted instruction convert data use Undefine press < U > Advanced artefact analysis Advanced static analysis 87 Now select byte 0x40104B press < C > define code Do byte 0x401050 jz instruction After see code similar one Now select b yte 0x40104B press < C > define code Do byte 0x401050 jz instruction This means middle push instruction hidden another jump instruction Advanced artefact analysis Advanced static analysis 88 To proceed go undefined instruction 0x40105D create code address 0x40105E After operations code look follow Now clearly see return value set 0x4096 Notice retn instruction garbage bytes added prevent IDA properly disassembling instructions eax value set The creenshot shows execution flow routine making changes To sum routine seen anti - disassembly techniques The notable one jump middle another instruction In scenario push instruction used conceal another jump instruction You also seen usage conditional jump always taken well use garbage bytes desynchronize disassembled code 4.3.3 Analysis call sub_401065 The next call made sub_401065 This time IDA recognized code normal function Advanced artefact analysis Advanced static analysis 89 What see eax register first zeroed function sub_40107D called argument 0x1000 finally add 0x1000 eax The question whether sub_40107D changes eax return value sub_40107D It looks like thing function eax first loading arg_0 value 0x1000 adding another 0x1000 Thus function returns eax value 0x2000 Does mean return value sub_401065 0x3000 0x2000+0x1000 ? As might suspected easy Take look happens sub_40107D returns Advanced artefact analysis Advance static analysis 90 First load edx stack address first argument subtract 4 bytes edx What address stored edx point ? Remember stack frame structure arg_0 ebp+8 ret addr ebp+4 ebp ebp After subtraction edx points return address stored stack Then third line add 0x2B return address value This means return address function changed sub_40107D return different place code To check function return go back sub_401065 The original return address 0x401074 But know increased 0x2B This means function sub_40107D return address 0x40109F 0x401074+0x2B Switch graph view text v iew search address Not surprisingly see junk code stored location Undefine < U > code create new code < C > starting address 0x40109F Advanced artefact analysis Advanced static analysis 91 You found final eax value 0xC0DE ! To sum section seen quite popular anti - disassembly technique return address replacement Malicious code trying deceive disassembler replaces return address call certain function would point completely different part code disassembler expects 4.3.4 Analysis call sub_4010 B2 Now analyse call subroutine sub_4010B2 If go function see long disassembled code many operations eax register However take closer look code might notice groups instructions anything might change fla gs relevant example Advanced artefact analysis Advanced static analysis 92 This little simplified version technique blocks junk instructions effect program execution making manual analysis harder injected real code The way dealing code try look repeated pattern junk code disassembly If notice pattern might try eliminate writing script would overwrite junk code NOP instructions highlight wit h colour However writing scripts IDA part course If analyse code little notice three instructions effect final eax value This means final eax value 0x1500 Advanced artefact analysis Advanced static analysis 93 4.3.5 Analysis call sub_40116D The last call analyse call sub_40116D In routine eax register seemingly set 0xEBFE value However immediately notice instruction mov fs:0 esp tells us new Structured Exception Handler SEH installed 15 Information exception handlers stored list EXCEPTION_REGISTRATION structures _EXCEPTION_REGISTRATION struc prev dd ? handler dd ? _EXCEPTION_REGISTRATION ends This structure consists two fields The first field prev pointer next EXCEPTION REGISTRATION structure second field handler pointer exception handler function The pointer first EXCEPTION_REGISTRATION structure list head always stored first DWORD value Thread Information Block TIB On Win32 platform TIB address stored FS register thus executing mov fs:0 esp setting first exception handler EXCEPTION_REGISTRATION structure created stack In case sub_40116D stack would look follows SEH installation 15 To get information SEH refer https //www.microsoft.com/msj/0197/exception/exception.aspx last accessed 11.09.2015 Advanced artefact analysis Advanced static analysis 94 The next question whether exceptio n triggered th function ? Yes take look ecx register First zeroed program tries write DWORD value address pointed register However ecx points unallocated address 0x00000000 cause exception ST ATUS_ACCESS_VIOLATION 0xC0000005 program execution would switched installed exception handler But address exception handler routine ? In example see value 0x15232A1 pushed onto stack exception handler But valid address function Indeed notice xor instruction xoring exception handler address stack value 0x1122300 This means real exception handler addr ess 0x15232A1 xor 0x1122300 = 0x4011A1 To calculate xor value use IDA calculator View - > Calculator Now switch graph view text view search address 0x4011A1 Advanced artefact analysis Adv anced static analysis 95 Repeat steps previous exercises convert data 0x4011A1 code Exercise After completing analysis anti - disassembly techniques sample try repeat exercise using OllyDbg instead This executable acc identally executing When debugging OllyDbg try follow execution using Step F7 function instead stepping analysed functions How disassembled code OllyDbg differ code initially disassembled IDA ? Was analysis eas ier OllyDbg IDA ? NISA European Union Agency Network Information Security Science Technology Park Crete ITE Vassilika Vouton 700 13 Heraklion Greece Athens Office 1 Vass Sofias & Meg Alexandrou Marousi 151 24 Athens Greece PO Box 1309 710 01 Heraklion Greece Tel +30 28 14 40 9710 info @ enisa.europa.eu www.enisa.europa.eu 